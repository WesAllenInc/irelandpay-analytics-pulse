openapi: 3.0.3
info:
  title: IRIS API
  description: >
    # Introduction

    Welcome to IRIS’s API!


    The API is organized around `REST`.
    All requests should be made over `SSL`.


    All request and response bodies, including errors, are encoded in `JSON`.

    # Open API

    The Open API provides numerous functions to access or to update your CRM lead  and merchant  data using simple REST calls.

    ### You can use the E-Signature API to:

    - [Generate an e-signature document](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1generate/post)

    - [Send an e-signature document](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1send/post)

    - [Download an e-signature document](https://iriscrm.com/api#/paths/~1leads~1signatures~1{applicationId}~1download/get)

    - [Get a list of all lead e-signatures documents](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1signatures/get)

    - [Get a list of available applications](https://iriscrm.com/api#/paths/~1leads~1applications/get)

    - [Create a new application field mapping](https://iriscrm.com/api#/paths/~1leads~1applications~1{appId}~1mappings/post)

    - [Get a list of available application field mappings](https://iriscrm.com/api#/paths/~1leads~1applications~1{appId}~1mappings/get)

    - [Get an application field mapping list](https://iriscrm.com/api#/paths/~1leads~1applications~1{appId}~1mappings~1{mapId}/get)

    - [Update an application field mapping](https://iriscrm.com/api#/paths/~1leads~1applications~1{appId}~1mappings~1{mapId}/patch)

    - [Delete an application field mapping](https://iriscrm.com/api#/paths/~1leads~1applications~1{appId}~1mappings~1{mapId}/delete)

    ### You can use the Helpdesk API to:

    - [Create a new ticket](https://iriscrm.com/api#/paths/~1helpdesk/post)

    - [Get a list of helpdesk tickets](https://iriscrm.com/api#/paths/~1helpdesk/get)

    - [Add a ticket comment](https://iriscrm.com/api#/paths/~1helpdesk~1{ticketId}~1comment/post)

    - [Get detailed ticked information](https://iriscrm.com/api#/paths/~1helpdesk~1{ticketId}/get)

    - [Update a ticket](https://iriscrm.com/api#/paths/~1helpdesk~1{ticketId}/patch)

    - [Delete a ticket](https://iriscrm.com/api#/paths/~1helpdesk~1{ticketId}/delete)

    - [Upload temporary file that will be added to a ticket, comment, checklist, or ticket type](https://iriscrm.com/api#/paths/~1helpdesk~1file/post)

    - [Download an attachment from a ticket](https://iriscrm.com/api#/paths/~1helpdesk~1{ticketId}~1download~1{attachmentId}/get)

    - [Create a new helpdesk ticket type](https://iriscrm.com/api#/paths/~1helpdesk~1types/post)

    - [Get a list of helpdesk ticket types](https://iriscrm.com/api#/paths/~1helpdesk~1types/get)

    - [Get details for a helpdesk ticket type](https://iriscrm.com/api#/paths/~1helpdesk~1types~1{typeId}/get)

    - [Update a helpdesk ticket type](https://iriscrm.com/api#/paths/~1helpdesk~1types~1{typeId}/patch)

    - [Delete a ticket type](https://iriscrm.com/api#/paths/~1helpdesk~1types~1{typeId}/delete)

    - [Download an attachment from a ticket type](https://iriscrm.com/api#/paths/~1helpdesk~1types~1{typeId}~1download~1{attachmentId}/get)

    - [Get a list of available users to notify and assign](https://iriscrm.com/api#/paths/~1helpdesk~1users/get)

    ### You can use the Lead API to:

    - [Create a lead](https://iriscrm.com/api#/paths/~1leads/post)

    - [Get a list of leads](https://iriscrm.com/api#/paths/~1leads/get)

    - [Get detailed lead information](https://iriscrm.com/api#/paths/~1leads~1{leadId}/get)

    - [Update a lead](https://iriscrm.com/api#/paths/~1leads~1{leadId}/patch)
    
    - [Get lead information from a specific tab](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1tabs~1{tabId}~1fields/get)

    - [Create a new lead field](https://iriscrm.com/api#/paths/~1leads~1fields/post)

    - [Get a list of available lead fields](https://iriscrm.com/api#/paths/~1leads~1fields/get)

    - [Get a lead field](https://iriscrm.com/api#/paths/~1leads~1fields~1{fieldId}/get)

    - [Update a lead field](https://iriscrm.com/api#/paths/~1leads~1fields~1{fieldId}/patch)

    - [Update a lead field order position](https://iriscrm.com/api#/paths/~1leads~1fields~1{fieldId}~1order/patch)

    - [Create a lead field tab](https://iriscrm.com/api#/paths/~1leads~1fields~1tabs/post)

    - [Get a list of all lead field tabs](https://iriscrm.com/api#/paths/~1leads~1fields~1tabs/get)

    - [Get a lead field tab](https://iriscrm.com/api#/paths/~1leads~1fields~1tabs~1{tabId}/get)

    - [Update a lead field tab](https://iriscrm.com/api#/paths/~1leads~1fields~1tabs~1{tabId}/patch)

    - [Create a lead note](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1notes/post)

    - [Get lead notes](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1notes/get)

    - [Create a lead appointment](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1appointments/post)

    - [Get lead appointments](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1appointments/get)

    - [Populate PDF Document](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1applications~1{applicationId}~1populate/post)

    - [Create a lead task](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1tasks/post)

    - [Get lead tasks](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1tasks/get)

    - [Assign a user](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1users/post)

    - [Get a list of assigned users](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1users/get)

    - [Unassign a user from a lead](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1users~1{userId}/delete)

    - [Upload a document](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1documents/post)

    - [Get a list of available documents](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1documents/get)

    - [Get a list of available document labels](https://iriscrm.com/api#/paths/~1leads~1file_labels/get)

    - [Download a document](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1documents~1{documentId}/get)

    - [Send an email to lead with template](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1emails~1{templateId}/post)

    - [Get a list of email templates](https://iriscrm.com/api#/paths/~1leads~1emails~1templates/get)

    - [Download a mailbox email attachment](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1mailbox~1{emailId}~1attachment~1{attachmentId}/get)

    - [Send an SMS to lead with selected SMS template](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1sms~1{templateId}/post)

    - [Get list of SMS templates](https://iriscrm.com/api#/paths/~1leads~1sms~1templates/get)

    - [Get a list of all lead campaign activity](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1activity~1campaign/get)

    - [Get a list of all lead deletion activity](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1activity~1deletion/get)

    - [Get a list of all lead duplicate activity](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1activity~1duplicates/get)

    - [Get a list of all lead links activity](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1activity~1links/get)

    - [Get a list of all lead source activity](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1activity~1source/get)

    - [Get a list of all lead status activity](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1activity~1status/get)

    - [Get a list of available campaigns](https://iriscrm.com/api#/paths/~1leads~1campaigns/get)

    - [Get a list of available groups](https://iriscrm.com/api#/paths/~1leads~1groups/get)

    - [Get a list of available sources](https://iriscrm.com/api#/paths/~1leads~1sources/get)

    - [Get a list of available statuses](https://iriscrm.com/api#/paths/~1leads~1statuses/get)

    - [Get a list of available users](https://iriscrm.com/api#/paths/~1leads~1users/get)
    
    ### You can use the WebForms API to:

    - [Generate a web form from lead](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1webforms~1{webFormDefaultId}~1generate/post)

    - [Send a web form from lead](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1webforms~1{webFormSessionId}~1send/post)

    - [Get a list of all lead web forms](https://iriscrm.com/api#/paths/~1leads~1{leadId}~1webforms/get)
    
    - [Get a list of all web forms](https://iriscrm.com/api#/paths/~1webforms/get)

    
    ### You can use the Merchant API to:

    - [Get a list of merchants](https://iriscrm.com/api#/paths/~1merchants/get)

    - [Get detailed merchant information](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}/get)

    - [Update an existing merchant](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}/patch)

    - [Get a list of batches and transactions](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}~1transactions/get)

    - [Get a list of chargebacks](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}~1chargebacks/get)

    - [Get a list of retrievals](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}~1retrievals/get)

    - [Get a list of statements](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}~1statements/get)

    - [Download a statement](https://iriscrm.com/api#/paths/~1merchants~1{merchantNumber}~1statements~1{statementId}/get)

    ### You can use the Residuals API to:

    - [Get residuals summary data](https://iriscrm.com/api#/paths/~1residuals~1reports~1summary~1{year}~1{month}/get)

    - [Get residuals summary with merchant rows](https://iriscrm.com/api#/paths/~1residuals~1reports~1summary~1rows~1{processor_id}~1{year}~1{month}/get)

    - [Get residuals details with merchant rows](https://iriscrm.com/api#/paths/~1residuals~1reports~1details~1{processor_id}~1{year}~1{month}/get)

    - [Get residuals line items](https://iriscrm.com/api#/paths/~1residuals~1lineitems~1{year}~1{month}/get)

    - [Get residuals templates](https://iriscrm.com/api#/paths/~1residuals~1templates~1/get)

    - [Get a list of users with assigned residuals templates](https://iriscrm.com/api#/paths/~1residuals~1templates~1assigned~1{year}~1{month}/get)

    

    # Generate an API token

    When you send an API request, you will need to include an API token in your request in order to authenticate your account.


    The tokens are generated in the CRM by each user individually, and each user may create one or more tokens.


    To generate a new API Token, open your user settings page by clicking on your username in the top-right corner, and clicking on the ** Settings ** link or you can use the link.


    `[CLIENT URL HERE]/settings`


    Then open the ** API Settings ** tab, click ** Create New API Token **, configure your token’s settings as needed, and click ** Add New Token **:


    <img src='images/docs/mapi001.png'/>


    Your new token will now be created and displayed in a popup window:


    <img src='images/docs/mapi002.png'/>


    Once the token is created, it will be shown in the list of available API Tokens where you can copy the token, update its settings, or delete it once it’s no longer needed:


    <img src='images/docs/mapi003.png'/>


    ** Note: ** The created tokens will inherit the user’s permissions to assigned merchants, leads, groups and processors.

    # Using the API

    Authentication to the API is performed via `X-API-KEY` header. Requests not properly authenticated will return a `401` error code.


    `curl -X GET "[CLIENT URL HERE]/api/v1/leads" -H "accept: application/json" -H "X-API-KEY: [YOURKEY]"`


    Note that all requests should be made over `SSL`. All request and response bodies, including errors, are encoded in JSON.


    The API returns standard HTTP success or error status codes. In case of errors, additional information about what went wrong will be encoded in the response as JSON.


    By default, you can make `500` requests per minute. Check the returned HTTP headers of any API request to see your current rate limit status.


    Each GET "List" request will return 1,000 matching results.  A maximum of 500,000 results can be returned per minute using a pagination parameter in these requests.

    # Using the Subscription API

    API Subscriptions are used to send information about an event to a URL and trigger an API call. This is more efficient than doing scheduled API calls.


    To create a subscription, use the API Settings page or send a request using the instructions in the Subscriptions section below.


    All you need to know is the events you want to be subscribed for and the url to which the updates need to be sent.


    To create subscriptions using our GUI open tab ** API Settings ** at ** `[CLIENT URL HERE]/settings` **:


    <img src='images/docs/new-subscription.png'/>

    # Authentication

    Authenticate your account by including your secret key in API requests.
    Do not share your secret API keys in publicly accessible areas, client-side code, and so forth.
    Authentication to the API is performed via `X-API-KEY` header.
    Requests not properly authenticated will return a `401` error code.

    # Errors

    Our API returns standard `HTTP` success or error status codes.
    For errors, we will also include extra information about what went wrong encoded in the response as `JSON`.

    # Limiting

    You can make `500` requests per minute.
    If you will reach a limit you will get a `429: Too Many Attempts.` response from the server.
    Check the returned `HTTP` headers of any API request to see your current rate limit status.

    Headers description:

    * `X-RateLimit-Limit` tells you the max number of requests you're allowed to make within this application's time period

    * `X-RateLimit-Remaining` tells you how many requests you have left within this current time period

    * `Retry-After` tells you how many seconds to wait until you try again. (you'll only get `Retry-After` if you've hit the limit).



    # PHP SDK


    ### Installation and Usage


    #### Availability


    The IRIS CRM PHP SDK requires PHP version 5.5 or higher and the PHP cURL extension.


    #### Composer


    To install the bindings via [Composer](http://getcomposer.org/), please run:


    ```bash
     composer require iris-crm/php-sdk
         ```


    In your code, configure the environment and API credentials:


    ```php

    require_once(__DIR__ . '/vendor/autoload.php');


    use Swagger\Client\Configuration;

    use Swagger\Client\Api\LeadsApi;


    // Configure API key authorization

    $config = Configuration::getDefaultConfiguration()
    ->setApiKey('X-API-KEY', 'YOUR_API_KEY')
    ->setHost('https://iriscrm.com/api/v1/');
    ```

    Here’s an example of how to get a list of leads using an SDK.

    Swagger\Client\Api\LeadsApi it's a SDK Class for Lead endpoints.

    ```php

    $apiInstance = new LeadsApi(null, $config);


    $page        = 1; // int | Page number

    $sort_by     = "created"; // string | Sorting of leads by the field value

    $sort_dir    = "asc"; // string | Direction of sorting

    $group       = 2; // int | Filter leads by a group id

    $campaign    = 3; // int | Filter leads by a campaign id

    $source      = 4; // int | Filter leads by a source id

    $status      = 1; // int | Filter leads by a status id

    $category    = 1; // int | Filter leads by a status category id

    $user        = 12; // int | Filter leads by a user id

    $date_filter = "created"; // string | Filtering leads by a date range depends on this filter

    $start_date  = new \DateTime("2018-10-20T19:20:30+01:00"); // \DateTime | Filter leads by a date in ISO 8601 format (Y-m-d\\TH:i:sP)

    $end_date    = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter leads by a date in ISO 8601 format (Y-m-d\\TH:i:sP)

    $email       = "test@mail.com"; // string | Filter leads by a email

    try {
        $result = $apiInstance->leadsGet($page, $sort_by, $sort_dir, $group, $campaign, $source, $status, $category, $user, $date_filter, $start_date, $end_date, $email);
        print_r($result);
    } catch (Exception $e) {
        echo 'Exception when calling LeadsApi->leadsGet: ' . $e->getMessage() . PHP_EOL;
    }
    ```

    All parameters for leadsGet method is optional and can be skipped.


    If you want skip some parameters - you need to set parameter to `null`


    All available classes and methods you can get in "API Endpoints" section below.

    ### API Endpoints

    All URIs are relative to *https://iriscrm.com/api/v1*


    Class | Method | HTTP Request | Description

    ------------ | ------------- | ------------- | -------------

    *LeadsApi* | **leadsApplicationsAppIdMappingsGet** | **GET** /leads/applications/{appId}/mappings | Get a list of available application field mappings

    *LeadsApi* | **leadsApplicationsAppIdMappingsMapIdDelete** | **DELETE** /leads/applications/{appId}/mappings/{mapId} | Delete an application field mapping

    *LeadsApi* | **leadsApplicationsAppIdMappingsMapIdGet** | **GET** /leads/applications/{appId}/mappings/{mapId} | Get an application field mapping list

    *LeadsApi* | **leadsApplicationsAppIdMappingsMapIdPatch** | **PATCH** /leads/applications/{appId}/mappings/{mapId} | Update an application field mapping

    *LeadsApi* | **leadsApplicationsAppIdMappingsPost** | **POST** /leads/applications/{appId}/mappings | Create a new application field mapping

    *LeadsApi* | **leadsApplicationsGet** | **GET** /leads/applications | Get a list of available applications

    *LeadsApi* | **leadsCampaignsGet** | **GET** /leads/campaigns | Get a list of available campaigns

    *LeadsApi* | **leadsDynamicFieldsSchemaGet** | **GET** /leads/dynamic-fields-schema | Get a schema of lead fields

    *LeadsApi* | **leadsEmailsTemplatesGet** | **GET** /leads/emails/templates | Get a list of email templates

    *LeadsApi* | **leadsFieldsFieldIdGet** | **GET** /leads/fields/{fieldId} | Get a lead field

    *LeadsApi* | **leadsFieldsFieldIdOrderPatch** | **PATCH** /leads/fields/{fieldId}/order | Update a lead field order position

    *LeadsApi* | **leadsFieldsFieldIdPatch** | **PATCH** /leads/fields/{fieldId} | Update a lead field

    *LeadsApi* | **leadsFieldsGet** | **GET** /leads/fields | Get a list of available lead fields

    *LeadsApi* | **leadsFieldsPost** | **POST** /leads/fields | Create a new lead field

    *LeadsApi* | **leadsFieldsTabsGet** | **GET** /leads/fields/tabs | Get a list of all lead field tabs

    *LeadsApi* | **leadsFieldsTabsPost** | **POST** /leads/fields/tabs | Create a lead field tab

    *LeadsApi* | **leadsFieldsTabsTabIdGet** | **GET** /leads/fields/tabs/{tabId} | Get a lead field tab

    *LeadsApi* | **leadsFieldsTabsTabIdPatch** | **PATCH** /leads/fields/tabs/{tabId} | Update a lead field tab

    *LeadsApi* | **leadsGet** | **GET** /leads | Get a list of leads

    *LeadsApi* | **leadsGroupsGet** | **GET** /leads/groups | Get a list of available groups

    *LeadsApi* | **leadsLeadIdActivityCampaignGet** | **GET** /leads/{leadId}/activity/campaign | Get a list of all lead campaign activity

    *LeadsApi* | **leadsLeadIdActivityDeletionGet** | **GET** /leads/{leadId}/activity/deletion | Get a list of all lead deletion activity

    *LeadsApi* | **leadsLeadIdActivityDuplicatesGet** | **GET** /leads/{leadId}/activity/duplicates | Get a list of all lead duplicate activity

    *LeadsApi* | **leadsLeadIdActivityLinksGet** | **GET** /leads/{leadId}/activity/links | Get a list of all lead links activity

    *LeadsApi* | **leadsLeadIdActivitySourceGet** | **GET** /leads/{leadId}/activity/source | Get a list of all lead source activity

    *LeadsApi* | **leadsLeadIdActivityStatusGet** | **GET** /leads/{leadId}/activity/status | Get a list of all lead status activity

    *LeadsApi* | **leadsLeadIdApplicationsApplicationIdPopulatePost** | **POST** /leads/{leadId}/applications/{applicationId}/populate | Populate PDF Document

    *LeadsApi* | **leadsLeadIdAppointmentsGet** | **GET** /leads/{leadId}/appointments | Get lead appointments

    *LeadsApi* | **leadsLeadIdAppointmentsPost** | **POST** /leads/{leadId}/appointments | Create a lead appointment

    *LeadsApi* | **leadsLeadIdDocumentsDocumentIdGet** | **GET** /leads/{leadId}/documents/{documentId} | Download a document

    *LeadsApi* | **leadsLeadIdDocumentsGet** | **GET** /leads/{leadId}/documents | Get a list of available documents

    *LeadsApi* | **leadsLeadIdDocumentsPost** | **POST** /leads/{leadId}/documents | Upload a document

    *LeadsApi* | **leadsLeadIdEmailsTemplateIdPost** | **POST** /leads/{leadId}/emails/{templateId} | Send an email to lead with template

    *LeadsApi* | **leadsLeadIdGet** | **GET** /leads/{leadId} | Get detailed lead information

    *LeadsApi* | **leadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet** | **GET** /leads/{leadId}/mailbox/{emailId}/attachment/{attachmentId} | Download a mailbox email attachment

    *LeadsApi* | **leadsLeadIdNotesGet** | **GET** /leads/{leadId}/notes | Get lead notes

    *LeadsApi* | **leadsLeadIdNotesPost** | **POST** /leads/{leadId}/notes | Create a lead note

    *LeadsApi* | **leadsLeadIdPatch** | **PATCH** /leads/{leadId} | Update a lead

    *LeadsApi* | **leadsLeadIdSignaturesApplicationIdGeneratePost** | **POST** /leads/{leadId}/signatures/{applicationId}/generate | Generate an e-signature document

    *LeadsApi* | **leadsLeadIdSignaturesApplicationIdSendPost** | **POST** /leads/{leadId}/signatures/{applicationId}/send | Send an e-signature document

    *LeadsApi* | **leadsLeadIdSignaturesGet** | **GET** /leads/{leadId}/signatures | Get a list of all lead e-signatures documents

    *LeadsApi* | **leadsLeadIdSmsTemplateIdPost** | **POST** /leads/{leadId}/sms/{templateId} | Send an SMS to lead with selected SMS template

    *LeadsApi* | **leadsLeadIdTasksGet** | **POST** /leads/{leadId}/tasks | Create a lead task

    *LeadsApi* | **leadsLeadIdUsersGet** | **GET** /leads/{leadId}/users | Get a list of assigned users

    *LeadsApi* | **leadsLeadIdUsersPost** | **POST** /leads/{leadId}/users | Assign a user

    *LeadsApi* | **leadsLeadIdUsersUserIdDelete** | **DELETE** /leads/{leadId}/users/{userId} | Unassign a user from a lead

    *LeadsApi* | **leadsPost** | **POST** /leads | Create a lead

    *LeadsApi* | **leadsSignaturesApplicationIdDownloadGet** | **GET** /leads/signatures/{applicationId}/download | Download an e-signature document

    *LeadsApi* | **leadsSmsTemplatesGet** | **GET** /leads/sms/templates | Get list of SMS templates

    *LeadsApi* | **leadsSourcesGet** | **GET** /leads/sources | Get a list of available sources

    *LeadsApi* | **leadsStatusesGet** | **GET** /leads/statuses | Get a list of available statuses

    *LeadsApi* | **leadsUsersGet** | **GET** /leads/users | Get a list of available users
    
    *MerchantsApi* | **merchantsGet** | **GET** /merchants | Get a list of merchants

    *MerchantsApi* | **merchantsMerchantNumberChargebacksGet** | **GET** /merchants/{merchantNumber}/chargebacks | Get a list of chargebacks

    *MerchantsApi* | **merchantsMerchantNumberGet** | **GET** /merchants/{merchantNumber} | Get detailed merchant information

    *MerchantsApi* | **merchantsMerchantNumberPatch** | **PATCH** /merchants/{merchantNumber} | Update an existing merchant

    *MerchantsApi* | **merchantsMerchantNumberRetrievalsGet** | **GET** /merchants/{merchantNumber}/retrievals | Get a list of retrievals

    *MerchantsApi* | **merchantsMerchantNumberStatementsGet** | **GET** /merchants/{merchantNumber}/statements | Get a list of statements

    *MerchantsApi* | **merchantsMerchantNumberStatementsStatementIdGet** | **GET** /merchants/{merchantNumber}/statements/{statementId} | Download a statement

    *MerchantsApi* | **merchantsMerchantNumberTransactionsGet** | **GET** /merchants/{merchantNumber}/transactions | Get a list of batches and transactions
    
    *SubscriptionsApi* | **subscriptionsGet** | **GET** /subscriptions | Return a list of subscriptions

    *SubscriptionsApi* | **subscriptionsPost** | **POST** /subscriptions | Create a subscription

    *SubscriptionsApi* | **subscriptionsSampleApiUpdatedGet** | **GET** /subscriptions/sample/api.updated | Data sample for the \&quot;api.updated\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleApplicationCreatedGet** | **GET** /subscriptions/sample/turboapp.submitted | Data sample for the \&quot;turboapp.submitted\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleApplicationUpdatedGet** | **GET** /subscriptions/sample/turboapp.updated | Data sample for the \&quot;turboapp.updated\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadCreatedGet** | **GET** /subscriptions/sample/lead.created | Data sample for the \&quot;lead.created\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadDeletedGet** | **GET** /subscriptions/sample/lead.deleted | Data sample for the \&quot;lead.deleted\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadDocumentUploadedGet** | **GET** /subscriptions/sample/lead.document.uploaded | Data sample for the \&quot;lead.document.uploaded\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadEmailReceivedGet** | **GET** /subscriptions/sample/lead.email.received | Data sample for the \&quot;lead.email.received\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadNoteAddedGet** | **GET** /subscriptions/sample/lead.note.added | Data sample for the \&quot;lead.note.added\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadRestoredGet** | **GET** /subscriptions/sample/lead.restored | Data sample for the \&quot;lead.restored\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadStatusUpdatedGet** | **GET** /subscriptions/sample/lead.status.updated | Data sample for the \&quot;lead.status.updated\&quot; event

    *SubscriptionsApi* | **subscriptionsSampleLeadUpdatedGet** | **GET** /subscriptions/sample/lead.updated | Data sample for the \&quot;lead.updated\&quot; event

    *SubscriptionsApi* | **subscriptionsSubscriptionIdDelete** | **DELETE** /subscriptions/{subscriptionId} | Delete a subscription

    *SubscriptionsApi* | **subscriptionsSubscriptionIdGet** | **GET** /subscriptions/{subscriptionId} | Return a subscription by its id

    *SubscriptionsApi* | **subscriptionsSubscriptionIdPatch** | **PATCH** /subscriptions/{subscriptionId} | Update a subscription

    # Change Log

     ### 1.23.0 (2022-12-19)

     #### Updated:

     * Added `skip_empty_set` option into the lead details endpoint **Link:** [#/paths/~1leads~1{leadId}/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}/get)





     ### 1.22.0 (2022-12-05)

     #### Created:

     * Added `Create reserve funding` endpoint **Link:** [#/paths/~1merchants~1tsys~1reserve-funding/post](https://iriscrm.com/api/#/paths/~1merchants~1tsys~1reserve-funding/post)

     * Added `Get reserve funding` endpoint **Link:** [#/paths/~1merchants~1tsys~1reserve-funding/get](https://iriscrm.com/api/#/paths/~1merchants~1tsys~1reserve-funding/get)

     * Added `Create reserve funding maintenance file` endpoint **Link:** [#/paths/~1merchants~1tsys~1reserve-funding~1batch-maintenance-files/post](https://iriscrm.com/api/#/paths/~1merchants~1tsys~1reserve-funding~1batch-maintenance-files/post)

     * Added `Get a list of reserve funding maintenance files` endpoint **Link:** [#/paths/~1merchants~1tsys~1reserve-funding~1batch-maintenance-files/get](https://iriscrm.com/api/#/paths/~1merchants~1tsys~1reserve-funding~1batch-maintenance-files/get)





     ### 1.21.0 (2022-11-30)

     #### Created:

     * Added endpoint to edit a user. **Link:** [#/paths/~1users~1{userId}/patch](https://iriscrm.com/api/#/paths/~1users~1{userId}/patch)



     #### Updated:

     * Added `reports_to`, `manages`, `set_events_for`, `merchants` and `residual_templates` fields to the `Create a user` endpoint. **Link:** [#/paths/~1users/post](https://iriscrm.com/api/#/paths/~1users/post)





     ### 1.20.0 (2022-11-30)

     #### Created:

     * Added endpoint to get lead field revision activity. **Link:** [#/paths/~1leads~1{leadId}~1activity~1revision-history/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1activity~1revision-history/get)





     ### 1.19.0 (2022-11-01)

     #### Created:

     * Added endpoint to get list of users. **Link:** [#/paths/~1users~1list/get](https://iriscrm.com/api/#/paths/~1users~1list/get)





     ### 1.18.0 (2022-11-01)

     #### Updated:

     * Added data source ID to the `Get processors` response **Link:** [#/paths/~1processors/get](https://iriscrm.com/api/#/paths/~1processors/get)





     ### 1.17.0 (2022-11-01)

     #### Updated:

     * Added `assignees.classEveryTime` and `assignees.classRoundRobin` fields to the `Create a new helpdesk ticket type` endpoint **Link:** [#/paths/~1helpdesk~1types/post](https://iriscrm.com/api/#/paths/~1helpdesk~1types/post)

     * Added `assignees.classEveryTime` and `assignees.classRoundRobin` fields to the `Update a helpdesk ticket type` endpoint **Link:** [#/paths/~1helpdesk~1types~1{typeId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/patch)





     ### 1.16.0 (2022-10-06)

     #### Created:

     * Added an endpoint for user creation. **Link:** [#/paths/~1users/post](https://iriscrm.com/api/#/paths/~1users/post)

     * Added an endpoint for getting User Classes available for assigning to users. **Link:** [#/paths/~1users~1classes/get](https://iriscrm.com/api/#/paths/~1users~1classes/get)

     * Added an endpoint for getting Groups available for assigning to users. **Link:** [#/paths/~1users~1groups/get](https://iriscrm.com/api/#/paths/~1users~1groups/get)





     ### 1.15.0 (2022-10-05)

     #### Created:

     * Added download Lead documents packed into archive file. **Link:** [#/paths/~1leads~1{leadId}~1documents~1download-files-archived/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1documents~1download-files-archived/get)





     ### 1.14.1 (2022-09-22)

     #### Updated:

     * Added pricing information inside `account_information` field to the `Get detailed merchant information` endpoint **Link:** [#/paths/~1merchants~1{merchantNumber}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}/get)





     ### 1.14.0 (2022-08-23)

     #### Updated:

     * Added `details.fields.uid` field to the `Get detailed lead information` endpoint **Link:** [#/paths/~1leads~1{leadId}/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}/get)





     ### 1.13.0 (2022-08-23)

     #### Updated:

     * Added `notify_users` field to the `Create a lead note` request **Link:** [#/paths/~1leads~1{leadId}~1notes/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1notes/post)





     ### 1.12.0 (2022-08-23)

     #### Updated:

     * Added `notify_users` field to `UploadDocumentRequest` **Link:** [#/paths/~1leads~1{leadId}~1documents/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1documents/post)





     ### 1.11.2 (2022-08-23)

     #### Created:

     * Added new subscriptions for `ticket.deleted` event. **Link:** [#/paths/~1subscriptions~1sample~1ticket.deleted/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.deleted/get)





     ### 1.11.1 (2022-08-23)

     #### Updated:

     * Added TimeZone field type to Create a new lead field endpoint **Link:** [#/paths/~1leads~1fields/post](https://iriscrm.com/api/#/paths/~1leads~1fields/post)

     * Added TimeZone field type to Update a lead field endpoint **Link:** [#/paths/~1leads~1fields~1{fieldId}/patch](https://iriscrm.com/api/#/paths/~1leads~1fields~1{fieldId}/patch)





     ### 1.11.0 (2022-08-23)

     #### Created:

     * Added endpoint to get merchant's equipment **Link:** [#/paths/~1merchants~1{merchantNumber}~1equipment/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1equipment/get)

     * Added TurboApp Equipment Updated event **Link:** [#/paths/~1subscriptions~1sample~1turboapp.equipment.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.equipment.updated/get)



     #### Updated:

     * Updated TurboApp Equipment Created event to include equipment list **Link:** [#/paths/~1subscriptions~1sample~1turboapp.equipment.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.equipment.created/get)

     * Updated Receive notification when a merchant is approved event to include equipment list **Link:** [#/paths/~1subscriptions~1sample~1turboapp.approved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.approved/get)





     ### 1.10.6 (2022-08-23)

     #### Updated:

     * Added `reject_description` property to the batches and transactions list response. **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/get)





     ### 1.10.5 (2022-08-23)

     #### Updated:

     * Added `assignedMergeWithDefault` option to the `create helpdesk ticket` endpoint **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `assignedMergeWithDefault` option to the `update helpdesk ticket` endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)





     ### 1.10.4 (2022-05-02)

     #### Updated:

     * Added a fields filter to a leads list endpoint **Link:** [#/paths/~1leads/get](https://iriscrm.com/api/#/paths/~1leads/get)





     ### 1.10.3 (2022-04-29)

     #### Updated:

     * Added user activity indicator to the `get residuals line items` endpoint **Link:** [#/paths/~1residuals~1lineitems~1{year}~1{month}/get](https://iriscrm.com/api/#/paths/~1residuals~1lineitems~1{year}~1{month}/get)





     ### 1.10.2 (2022-04-29)

     #### Updated:

     * Updated endpoint Create Lead, added an users_emails field. **Link:** [#/paths/~1leads/post](https://iriscrm.com/api/#/paths/~1leads/post)





     ### 1.10.1 (2022-04-29)

     #### Updated:

     * Updated endpoint Assign a user to a lead by email **Link:** [#/paths/~1leads~1{leadId}~1users/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1users/post)





     ### 1.10.0 (2022-04-06)

     #### Created:

     * Added an endpoint for merchant creation and assigning users. **Link:** [#/paths/~1merchants/post](https://iriscrm.com/api/#/paths/~1merchants/post)

     * Added an endpoint for getting assigned users to merchant **Link:** [#/paths/~1merchants~1{merchantNumber}~1users/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1users/get)

     * Added an endpoint for updating merchant details **Link:** [#/paths/~1merchants~1{merchantNumber}~1details/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1details/post)

     * Added an endpoint for transactions import **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/post)

     * Added an endpoint for adjustments import **Link:** [#/paths/~1merchants~1{merchantNumber}~1adjustments/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1adjustments/post)

     * Added an endpoint for getting a list of batches **Link:** [#/paths/~1merchants~1{merchantNumber}~1authorizations/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1authorizations/get)

     * Added an endpoint for getting a list of authorizations **Link:** [#/paths/~1merchants~1{merchantNumber}~1authorizations~1{batchId}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1authorizations~1{batchId}~1transactions/get)

     * Added an endpoint for batches and authorizations import **Link:** [#/paths/~1merchants~1{merchantNumber}~1authorizations/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1authorizations/post)

     * Added an endpoint for chargebacks import **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks/post)

     * Added an endpoint for retrievals import **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals/post)

     * Added an endpoint for merchant statements import **Link:** [#/paths/~1merchants~1{merchantNumber}~1statements/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1statements/post)

     * Added an endpoint for 1099k statements import **Link:** [#/paths/~1merchants~1{merchantNumber}~1statements~11099k/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1statements~11099k/post)

     * Added an endpoint for memos import **Link:** [#/paths/~1merchants~1{merchantNumber}~1memos/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1memos/post)

     * Added an endpoint for getting Processor and DataSource available for assigning to merchants **Link:** [#/paths/~1processors/get](https://iriscrm.com/api/#/paths/~1processors/get)





     ### 1.9.0 (2022-04-06)

     #### Created:

     * Added endpoint to get lead details from a specific tab **Link:** [#/paths/~1leads~1{leadId}~1tabs~1{tabId}~1fields/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1tabs~1{tabId}~1fields/get)





     ### 1.7.0 (2021-12-08)

     #### Updated:

     * Added TurboApp Equipment Created event **Link:** [#/paths/~1subscriptions~1sample~1turboapp.equipment.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.equipment.created/get)





     ### 1.6.10 (2021-11-24)

     #### Updated:

     * Updated pagination on get list of statements endpoint. **Link:** [#/paths/~1merchants~1{merchantNumber}~1statements/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1statements/get)





     ### 1.6.9 (2021-08-02)

     #### Updated:

     * Added `void_reject_chargeback` property to the batches and transactions list response. **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/get)





     ### 1.6.8 (2021-08-02)

     #### Created:

     * Added `Delete record from a lead record set` endpoint **Link:** [#/paths/~1leads~1{leadId}~1records~1{catId}~1{recordId}/delete](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1records~1{catId}~1{recordId}/delete)





     ### 1.6.7 (2021-07-20)

     #### Updated:

     * Added `unassigned` property to the chargebacks list response. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.6.6 (2021-07-14)

     #### Updated:

     * Added `adjustments` property to the merchants list of batches and transactions. **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/get)





     ### 1.6.5 (2021-07-02)

     #### Updated:

     * Added `type` property to the chargebacks list response. **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks/get)





     ### 1.6.4 (2021-05-06)

     #### Updated:

     * Added `terminal_number` property to the merchants list of batches and transactions. **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/get)





     ### 1.6.3 (2021-04-26)

     #### Updated:

     * Added `created_username`,`modified_username`, and `resolved_username` properties to the ticket creation endpoint response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `created_username`,`modified_username`, and `resolved_username` properties to the Helpdesk tickets list endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `created_username`,`modified_username`, and `resolved_username` properties to the Helpdesk tickets details endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `created_username`,`modified_username`, and `resolved_username` to the Helpdesk ticket update endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)





     ### 1.6.2 (2021-04-26)

     #### Created:

     * Added `end_date` filter to deposits endpoint **Link:** [#/paths/~1merchants~1{merchantNumber}~1deposits~1{year}~1{month}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1deposits~1{year}~1{month}/get)





     ### 1.6.1 (2021-04-02)

     #### Updated:

     * Increased API Rate limit to 500 request per minute **Link:** [#section/Limiting](https://iriscrm.com/api/#section/Limiting)





     ### 1.6.0 (2021-03-02)

     #### Created:

     * Added `Get pricing templates` endpoint **Link:** [#/paths/~1leads~1pricing_templates/get](https://iriscrm.com/api/#/paths/~1leads~1pricing_templates/get)





     ### 1.5.21 (2021-03-02)

     #### Updated:

     * Added new properties to the chargebacks list response **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks/get)

     * Added new properties to the retrievals list response **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals/get)





     ### 1.5.20 (2021-02-12)

     #### Updated:

     * Added `filename` property to the `lead.document.uploaded` subscription response **Link:** [#/paths/~1subscriptions~1sample~1lead.document.uploaded/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.document.uploaded/get)





     ### 1.5.19 (2021-02-12)

     #### Updated:

     * Added deposits endpoint **Link:** [#/paths/~1merchants~1{merchantNumber}~1deposits~1{year}~1{month}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1deposits~1{year}~1{month}/get)

     * Added `authorization_code` property to the chargeback response **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks/get)





     ### 1.5.18 (2021-01-14)

     #### Updated:

     * Added `id` and `invoice_number` properties to the `transactions` section of the transactions response **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/get)





     ### 1.5.17 (2021-01-14)

     #### Updated:

     * Added `id` and `invoice_number` properties to the `transactions` section of the transactions response **Link:** [#/paths/~1merchants~1{merchantNumber}~1transactions/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1transactions/get)

     * Added `id` and `reply_form` properties to the chargebacks response **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks/get)

     * Added the `id` property to the retrievals list response **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals/get)



     #### Created:

     * Added an endpoint for getting detailed chargeback information **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}/get)

     * Added an endpoint for Reply To Chargeback Case - Dispute Chargeback Case **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1dispute_reverse/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1dispute_reverse/post)

     * Added an endpoint for Reply To Chargeback Case - Credit Issued **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1credit_issued/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1credit_issued/post)

     * Added an endpoint for Reply To Chargeback Case - Accept Chargeback **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1accept/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1accept/post)

     * Added an endpoint for getting detailed chargeback information **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}/get)

     * Added an endpoint for Reply To Retrieval Case - Retrieval Response **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1response/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1response/post)

     * Added an endpoint for Reply To Retrieval Case - Retrieval Response with Signature **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1response_with_signature/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1response_with_signature/post)

     * Added an endpoint for Reply To Retrieval Case - Unable to Fulfill Retrieval Case Request **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1unable_to_fulfill_request/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1unable_to_fulfill_request/post)

     * Added an endpoint for Reply To Retrieval Case - Unable to Locate Retrieval Case **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1unable_to_locate_retrieval/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1unable_to_locate_retrieval/post)

     * Added an endpoint for Reply To Retrieval - Credit Issued **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1credit_issued/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1credit_issued/post)

     * Added an endpoint for Reply To Retrieval Case - Imprint and Signature **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1imprint_and_signature/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1imprint_and_signature/post)

     * Added an endpoint for Reply To Retrieval Case - Responding by Other Means **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1responding_by_other_means/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1responding_by_other_means/post)

     * Added an endpoint for Reply To Retrieval Case - Add User Notes/Images **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1add_notes_images/post](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1add_notes_images/post)

     * Added an endpoint for the file upload **Link:** [#/paths/~1merchants~1files/post](https://iriscrm.com/api/#/paths/~1merchants~1files/post)

     * Added an endpoint for Download chargeback case files **Link:** [#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1files~1{fileId}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1chargebacks~1{caseNumber}~1files~1{fileId}/get)

     * Added an endpoint for Download retrieval case files **Link:** [#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1files~1{fileId}/get](https://iriscrm.com/api/#/paths/~1merchants~1{merchantNumber}~1retrievals~1{caseNumber}~1files~1{fileId}/get)

     * Added new subscription for receiving a notification when a new chargeback case created **Link:** [#/paths/~1subscriptions~1sample~1chargeback.added/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1chargeback.added/get)

     * Added new subscription for receiving a notification when chargeback case status changed **Link:** [#/paths/~1subscriptions~1sample~1chargeback.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1chargeback.updated/get)

     * Added new subscription for receiving a notification in 7/3/1 days before the chargeback case due date **Link:** [#/paths/~1subscriptions~1sample~1chargeback.reminder/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1chargeback.reminder/get)

     * Added new subscription for receiving a notification when a new retrieval case created **Link:** [#/paths/~1subscriptions~1sample~1retrieval.added/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1retrieval.added/get)

     * Added new subscription for receiving a notification when retrieval case status changed **Link:** [#/paths/~1subscriptions~1sample~1retrieval.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1retrieval.updated/get)

     * Added new subscription for receiving a notification in 7/3/1 days before the retrieval case due date **Link:** [#/paths/~1subscriptions~1sample~1retrieval.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1retrieval.updated/get)





     ### 1.5.16 (2020-12-11)

     #### Updated:

     * Renamed task priority from "Low" to "Normal" **Link:** [#/paths/~1leads~1{leadId}~1tasks/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1tasks/post)





     ### 1.5.15 (2020-12-11)

     #### Updated:

     * Added `due` value for `sort_by` and `date_filter` parameters on the get a list of Tickets endpoint **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `due` parameter on the get a list of Tickets endpoint **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `due` parameter on the get detailed information of Tickets endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `only_business_days` parameter on the get a list of Tickets endpoint **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `only_business_days` parameter on the get detailed information of Tickets endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `only_business_days` property to the Ticket on the Ticket create endpoint **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `only_business_days` property to the Ticket on the Ticket update endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `only_business_days` property to the Ticket Type on the get a list of Ticket Type endpoint **Link:** [#/paths/~1helpdesk~1types/get](https://iriscrm.com/api/#/paths/~1helpdesk~1types/get)

     * Added `only_business_days` parameter on the get detailed information of Ticket Type endpoint **Link:** [#/paths/~1helpdesk~1types~1{typeId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/get)

     * Added `only_business_days` property to the Ticket Type on the Ticket Type create endpoint **Link:** [#/paths/~1helpdesk~1types/post](https://iriscrm.com/api/#/paths/~1helpdesk~1types/post)

     * Added `only_business_days` property to the Ticket Type on the Ticket Type update endpoint **Link:** [#/paths/~1helpdesk~1types~1{typeId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/patch)

     * Added `attached_files` property to the Ticket on the Ticket create endpoint **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `attached_files` property to the Ticket Checklist on the Ticket create endpoint **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `attached_files` property to the Ticket Checklist on the Ticket update endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `attached_files` property to the Ticket Comment on the Comment create endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}~1comment/post](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}~1comment/post)





     ### 1.5.14 (2020-11-26)

     #### Updated:

     * Added `template_id`, `completed_by`, and `completed_at` properties to the `checklist` section of the ticket create response **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `template_id`, `completed_by`, and `completed_at` properties to the `checklist` section of ticket details response **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `template_id`, `completed_by`, and `completed_at` properties to the `checklist` section of ticket update response **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `template_id`, `completed_by`, and `completed_at` properties to the `checklist` section of ticket's checklist updated subscription response **Link:** [#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get)





     ### 1.5.13 (2020-11-20)

     #### Updated:

     * Added `priority` property to the Ticket Type on the Ticket Type create endpoint **Link:** [#/paths/~1helpdesk~1types/post](https://iriscrm.com/api/#/paths/~1helpdesk~1types/post)

     * Added `priority` property to the Ticket Type on the Ticket Type update endpoint **Link:** [#/paths/~1helpdesk~1types~1{typeId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/patch)





     ### 1.5.12 (2020-11-02)

     #### Updated:

     * Changed `due_date` property to the datetime format on the ticket create endpoint **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Changed `due_date` property to the datetime format on the ticket update endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)





     ### 1.5.11 (2020-10-20)

     #### Updated:

     * Added `notify_assigned_users` property for ticket creation payload. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)





     ### 1.5.10 (2020-10-19)

     #### Updated:

     * Added `group_id` property for ticket creation payload. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `group_id` property for ticket update payload. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)





     ### 1.5.9 (2020-10-19)

     #### Updated:

     * Added `new_files` property for ticket update payload. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `new_files` property for ticket type update payload. **Link:** [#/paths/~1helpdesk~1types~1{typeId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/patch)





     ### 1.5.8 (2020-10-19)

     #### Updated:

     * Added `preview_images` property for ticket request and response data. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `preview_images` property for ticket comment request and response data. **Link:** [#/paths/~1helpdesk~1{ticketId}~1comment/post](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}~1comment/post)

     * Added `preview_images` property for ticket and ticket comment properties. **Link:** [#/paths/~1helpdesk~1{ticketId}~1comment/post](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}~1comment/post)

     * Added `preview_images` property for ticket request and response data. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)





     ### 1.5.7 (2020-10-05)

     #### Updated:

     * Added `notify_assigned_users` property for ticket creation payload. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)





     ### 1.5.6 (2020-10-05)

     #### Updated:

     * Added `search_by` filter for tickets list endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.5.5 (2020-07-23)

     #### Updated:

     * Added endpoint with file labels what can be used for document upload. **Link:** [#/paths/~1leads~1file_labels/get](https://iriscrm.com/api/#/paths/~1leads~1file_labels/get)





     ### 1.5.5 (2020-07-23)

     #### Updated:

     * Added endpoint with file labels what can be used for document upload. **Link:** [#/paths/~1helpdesk~1{ticketId}~1assignments/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}~1assignments/get)





     ### 1.5.4 (2020-07-13)

     #### Updated:

     * Added `files_count` property to the ticket create endpoint response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `files_count` property to the response of ticket list endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `files_count` property to the response of ticket detailed information endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `files_count` property to the ticket update endpoint response. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `files_count` property to the ticket.created subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.created/get)

     * Added `files_count` property to the ticket.updated subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.updated/get)

     * Added `files_count` property to the ticket.resolved subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.resolved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.resolved/get)

     * Added `files_count` property to the ticket.checklist.updated subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get)





     ### 1.5.3 (2020-07-06)

     #### Updated:

     * Added `search` filter to the tickets list endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.5.2 (2020-07-06)

     #### Updated:

     * Added `due_date` property to the ticket create endpoint request and response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `due_date` property to the response of ticket list endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `due_date` property to the response of ticket detailed information endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `due_date` property to the ticket update endpoint request and response. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `due_date` property to the ticket.created subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.created/get)

     * Added `due_date` property to the ticket.updated subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.updated/get)

     * Added `due_date` property to the ticket.resolved subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.resolved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.resolved/get)

     * Added `due_date` property to the ticket.checklist.updated subscription data. **Link:** [#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get)





     ### 1.5.1 (2020-07-06)

     #### Created:

     * Added a Residuals API to work with your residuals reports. **Link:** [#tag/Residuals](https://iriscrm.com/api/#tag/Residuals)





     ### 1.5.0 (2020-07-06)

     #### Updated:

     * Changed structure of checklist files. Changed `fileId` to `files` property for request and response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Removed `fileUploadedAt` and `fileUploadedBy` properties from checklist in response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Removed `fileUploadedAt` and `fileUploadedBy` properties from checklist in response. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Changed structure of checklist files. Changed `fileId` to `files` property for request and response. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Removed `fileUploadedAt` and `fileUploadedBy` properties from checklist in response. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)





     ### 1.4.9 (2020-06-26)

     #### Updated:

     * Added `hide_resolved` filter to the tickets list endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.4.8 (2020-06-12)

     #### Updated:

     * Added `set_for`, `set_at`, `set_by`, `modified`, `modified_by`, `date_end`, `confirmed_by`, `seen_by`, `rescheduled`, `rescheduled_by`, and `rescheduled_count` properties to the lead appointments endpoint response. **Link:** [#/paths/~1leads~1{leadId}~1appointments/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1appointments/get)

     * Added `set_for`, `set_by`, `modified_by`, `confirmed_by`, `seen_by`, `rescheduled_by`, `rescheduled_count`,  `date_filter`, `start_date`, `end_date`, and `done` filters to the lead appointments endpoint. **Link:** [#/paths/~1leads~1{leadId}~1appointments/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1appointments/get)

     * Added sorting to the lead appointments endpoint. **Link:** [#/paths/~1leads~1{leadId}~1appointments/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1appointments/get)

     * Marked `user` property as deprecated on the lead appointments endpoint response. **Link:** [#/paths/~1leads~1{leadId}~1appointments/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1appointments/get)





     ### 1.4.7 (2020-05-13)

     #### Updated:

     * Added `old_status_id` to lead status activity endpoint. **Link:** [#/paths/~1leads~1{leadId}~1activity~1status/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1activity~1status/get)

     * Added `new_status_id` to lead status activity endpoint. **Link:** [#/paths/~1leads~1{leadId}~1activity~1status/get](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1activity~1status/get)





     ### 1.4.6 (2020-05-01)

     #### Created:

     * Added `lead.signature.generated` subscription endpoint. **Link:** [#/paths/~1subscriptions~1sample~1lead.signature.generated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.signature.generated/get)

     * Added `lead.signature.opened` subscription endpoint **Link:** [#/paths/~1subscriptions~1sample~1lead.signature.opened/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.signature.opened/get)

     * Added `lead.signature.signed` subscription endpoint **Link:** [#/paths/~1subscriptions~1sample~1lead.signature.signed/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.signature.signed/get)



     #### Updated:

     * Added `createdAt` and `createdBy` properties to the `lead.updated` subscription endpoint **Link:** [#/paths/~1subscriptions~1sample~1lead.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.updated/get)

     * Added `email`, `contact`, `phone` and `address` properties to the `lead.deleted` subscription endpoint **Link:** [#/paths/~1subscriptions~1sample~1lead.deleted/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.deleted/get)

     * Added `email`, `contact`, `phone` and `address` properties to the `lead.restored` subscription endpoint **Link:** [#/paths/~1subscriptions~1sample~1lead.restored/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.restored/get)

     * Added `createdAt` and `createdBy` properties to the `lead.status.updated` subscription endpoint **Link:** [#/paths/~1subscriptions~1sample~1lead.status.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.status.updated/get)





     ### 1.4.5 (2020-04-21)

     #### Updated:

     * Added `files` property to the ticket creation details endpoint response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `file` property for each checklist item in the ticket creation details endpoint response. **Link:** [#/paths/~1helpdesk/post](https://iriscrm.com/api/#/paths/~1helpdesk/post)

     * Added `files` property to the Helpdesk tickets details endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `files` property for each comment in the Helpdesk tickets details endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `file` property for each checklist item in the Helpdesk tickets details endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/get)

     * Added `files` property to the Helpdesk ticket update endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `files` property for each comment in the Helpdesk ticket update endpoint. **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `file` property for each checklist item in the Helpdesk ticket update endpoint **Link:** [#/paths/~1helpdesk~1{ticketId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1{ticketId}/patch)

     * Added `file` property for each checklist item in the ticket type creation details endpoint response. **Link:** [#/paths/~1helpdesk~1types/post](https://iriscrm.com/api/#/paths/~1helpdesk~1types/post)

     * Added `file` property for each checklist item on the ticket type endpoint. **Link:** [#/paths/~1helpdesk~1types~1{typeId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/get)

     * Added `file` property for each checklist item on the ticket type update endpoint. **Link:** [#/paths/~1helpdesk~1types~1{typeId}/patch](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}/patch)

     * Added `files` property for ticket created subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.created/get)

     * Added `files` property for ticket updated subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.updated/get)

     * Added `files` property for ticket resolved subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.resolved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.resolved/get)

     * Added `files` property for ticket commented subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.commented/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.commented/get)

     * Added `files` property for ticket checklist updated subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get)

     * Added `file` property for each checklist item on checklist updated subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get)



     #### Created:

     * Added endpoint for download attachments from Ticket Type **Link:** [#/paths/~1helpdesk~1types~1{typeId}~1download~1{attachmentId}/get](https://iriscrm.com/api/#/paths/~1helpdesk~1types~1{typeId}~1download~1{attachmentId}/get)





     ### 1.4.4 (2020-04-02)

     #### Updated:

     * Added `resolver` filter to the Helpdesk tickets endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.4.3 (2020-04-01)

     #### Updated:

     * Added `status_updated` option for `date_filter` filter to the Helpdesk tickets endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.4.2 (2020-03-27)

     #### Updated:

     * Added `lid` filter to the Helpdesk tickets endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)

     * Added `mid` filter to the Helpdesk tickets endpoint. **Link:** [#/paths/~1helpdesk/get](https://iriscrm.com/api/#/paths/~1helpdesk/get)





     ### 1.4.1 (2020-03-20)

     #### Updated:

     * Added `hash` and `url` properties to the 'Send an e-signature document' endpoint. **Link:** [#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1send/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1send/post)





     ### 1.4.0 (2020-03-05)

     #### Updated:

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.created` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.created/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.updated` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.updated/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.deleted` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.deleted/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.deleted/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.restored` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.restored/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.restored/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.status.updated` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.status.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.status.updated/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.note.added` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.note.added/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.note.added/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.document.uploaded` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.document.uploaded/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.document.uploaded/get)

     * Added `assigned_users`, `lead_url` properties to the subscriptions response for the `lead.email.received` subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.email.received/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.email.received/get)

     * Added `ticket_url` and `assigned_users` properties to the subscriptions response for the `ticket.created` subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.created/get)

     * Added `ticket_url` and `assigned_users` properties to the subscriptions response for the `ticket.updated` subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.updated/get)

     * Added `ticket_url` and `assigned_users` properties to the subscriptions response for the `ticket.resolved` subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.resolved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.resolved/get)

     * Added `ticket_url` and `assigned_users` properties to the subscriptions response for the `ticket.commented` subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.commented/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.commented/get)

     * Added `ticket_url` and `assigned_users` properties to the subscriptions response for the `ticket.checklist.updated` subscription. **Link:** [#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1ticket.checklist.updated/get)

     * Added `application_url`, `identifier` and `lid` properties to the subscriptions response for the `turboapp.submitted` subscription. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.submitted/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.submitted/get)

     * Added `application_url`, `identifier` and `lid` properties to the subscriptions response for the `turboapp.updated` subscription. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.updated/get)

     * Added `application_url`, `identifier` and `lid` properties to the subscriptions response for the `turboapp.approved` subscription. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.approved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.approved/get)

     * Added `application_url`, `identifier` and `lid` properties to the subscriptions response for the `turboapp.declined` subscription. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.declined/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.declined/get)

     * Changed all subscriptions dates properties to the snake case **Link:** [#tag/Subscriptions](https://iriscrm.com/api/#tag/Subscriptions)





     ### 1.3.5 (2020-02-26)

     #### Created:

     * Added a Helpdesk API to work with your helpdesk data. **Link:** [#tag/Helpdesk](https://iriscrm.com/api/#tag/Helpdesk)





     ### 1.3.4 (2020-02-25)

     #### Updated:

     * Added a `lid` property to the "turboapp.submitted" subscription. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.submitted/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.submitted/get)





     ### 1.3.3 (2020-02-24)

     #### Updated:

     * Added a `salesRep` parameter to 'lead.status.updated' subscription. **Link:** [#/paths/~1subscriptions~1sample~1lead.status.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1lead.status.updated/get)





     ### 1.3.2 (2019-11-21)

     #### Updated:

     * Added a `expire` parameter to 'Generate an e-signature document' endpoint. **Link:** [#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1generate/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1generate/post)

     * Added the ability to add multiple signers to the document and added an `expire` parameter to 'Send an e-signature document' endpoint. **Link:** [#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1send/post](https://iriscrm.com/api/#/paths/~1leads~1{leadId}~1signatures~1{applicationId}~1send/post)





     ### 1.3.1 (2019-11-18)

     #### Updated:

     * Rename subscriptions from "application.created" to "turboapp.submitted" and "application.updated" to "turboapp.updated". **Link:** [#/paths/~1subscriptions~1sample~1turboapp.submitted/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.submitted/get)



     #### Created:

     * Added new subscriptions for "turboapp.approved" event. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.approved/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.approved/get)

     * Added new subscriptions for "turboapp.declined" event. **Link:** [#/paths/~1subscriptions~1sample~1turboapp.declined/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1turboapp.declined/get)





     ### 1.3.0 (2019-11-18)

     #### Updated:

     * Added a `group` parameter to 'lead statuses' endpoint. **Link:** [#/paths/~1leads~1statuses/get](https://iriscrm.com/api/#/paths/~1leads~1statuses/get)

     * Added a `status` parameter to 'lead groups' endpoint. **Link:** [#/paths/~1leads~1groups/get](https://iriscrm.com/api/#/paths/~1leads~1groups/get)





     ### 1.2.2 (2019-09-03)

     #### Updated:

     * Added a `per_page` property to all list endpoints.





     ### 1.2.1 (2019-08-26)

     #### Updated:

     * Added a `leads` property to merchants endpoint. **Link:** [#/paths/~1merchants/get](https://iriscrm.com/api/#/paths/~1merchants/get)





     ### 1.2.0 (2019-07-26)

     #### Updated:

     * The endpoint for creating API subscriptions has been updated. Status based options have been added to some events. **Link:** [#/paths/~1subscriptions/post](https://iriscrm.com/api/#/paths/~1subscriptions/post)

     * The endpoint for updating API subscriptions has been updated. Status based options have been added to some events. **Link:** [#/paths/~1subscriptions~1{subscriptionId}/patch](https://iriscrm.com/api/#/paths/~1subscriptions~1{subscriptionId}/patch)





     ### 1.1.0 (2019-07-24)

     #### Created:

     * Added an endpoint for getting SMS templates. **Link:** [#/paths/~1leads~1sms~1templates/get](https://iriscrm.com/api/#/paths/~1leads~1sms~1templates/get)

     * Added new subscriptions for `application.created` event **Link:** [#/paths/~1subscriptions~1sample~1application.created/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1application.created/get)

     * Added new subscriptions for `application.updated` event **Link:** [#/paths/~1subscriptions~1sample~1application.updated/get](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1application.updated/get)



     #### Updated:

     * Added a `sic_code` property to merchants endpoint **Link:** [#/paths/~1merchants/get](https://iriscrm.com/api/#/paths/~1merchants/get)





     ### 1.0.0 (2019-06-20)

     #### Created:

     * Added change log.







  version: 1.23.0

  contact:
    email: "support@iriscrm.com"
  x-logo:
    url: 

servers:
- url: /api/v1
  description: Production API

tags:

      
  - name: "Dispute responder"
    description: "Reply to retrievals and chargebacks for your merchants. Available only for TSYS FSP and Fiserv accounts that have Dispute Responder enabled."

  
  - name: "E-Signature"
    description: "Connect with the E-Signature API to create workflows that send specific documents for e-signature documents.<br/><br/>Create field mappings between Lead fields to populate their respective PDF documents.<br/><br/>Receive notifications when documents are generated, opened, and signed by recipients."
  - name: "Helpdesk"
    description: "Connect with the Helpdesk API to work with your ticket data.  Helpdesk tickets are organized by ticket types.<br/><br/>Ticket types have properties such as assigned users, expected time to completion (SLA), and visibility to help you segment tickets based on job descriptions.<br/><br/>Get detailed helpdesk ticket information, perform updates, and manage attached files with ease by using the Helpdesk API."
  - name: "Leads"
    description: "Connect with the Leads API to interact with your lead data.  Includes management of fields, user assignments, status changes, tasks, appointments, email, text messaging, and document attachments.<br/><br/>Create custom reports without limits using the data already housed within your CRM."
  - name: "Web Forms"
    description: "Connect with the WebForms API to interact with your web form data. Includes ability to list, generate & send web forms & web form sessions."

  
  - name: "Merchants"
    description:description: >
      Populate your data warehouse programmatically through this Merchants API and interact with your merchant services portfolio.  Data points include merchant demographics, deposits, transactions, retrievals, chargebacks, and statements across supported processors.


      Each merchant account is accessible by users through a set of permissions controlled on the User Class level.


      Segment your portfolio of merchants by filters such as processor, data source, and processing status.


      The user(s) whose API Key is in the Merchants POST and PATCH requests must be set as allowed to update merchant data for each of the Processors to which the merchants are linked.
      To do this configuration, go to Manage → Processors → Processor Settings, then click Edit Processor for each Processor that will have merchants updated through the API.


      The user(s) can be added under the “API Users Can Import” list in the Edit Processor popup.


      <img src='images/docs/processor-merchant-update-api-users.png'/>

  
  - name: "Users"
    description: "Create, edit, and retrieve user account info, as well as lists of user classes and groups."

  
  - name: "Residuals"
    description: "Populate your data warehouse programmatically through this Residuals API and interact with your monthly residuals income calculations, line items, and user compensation data.<br/><br/>Line items give you control with the ability to add income or expense calculations that are outside of any residual reports.<br/><br/>Receive instant notifications when new residual reports are published or when line items are added."

  
  - name: "Subscriptions"
    description: "Connect with the Subscriptions API to create, view, and manage your event notification subscriptions.  A webhook listener URL is required from you to be able to create the subscription and receive notifications.<br/><br/>Learn about API updates and new endpoints by subscribing to the [api.updated](https://iriscrm.com/api/#/paths/~1subscriptions~1sample~1api.updated/get) event.<br/><br/>Receive alerts in real-time including lead status changes, e-signature document actions, and helpdesk ticket changes.<br/><br/>Subscription API responses provide you with detailed information on a silver platter to avoid sorting through data unnecessarily."

components:
  securitySchemes:
    Token:
      type: apiKey
      in: header
      name: X-API-KEY
      description: Authentication token
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthenticated"
    ForbiddenError:
      description: Not enough permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Access denied"
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not found"
    ValidationError:
      description: Validation exception
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Validation exception"
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unexpected server error"
  schemas:

    Links:
      type: object
      properties:
        first:
          type: string
          description: "An URL to the first page of the data set"
        last:
          type: string
          description: "An URL to the last page of the data set"
        prev:
          type: string
          description: "An URL to the previous page of the data set"
        next:
          type: string
          description: "An URL to the next page of the data set"
    Meta:
      type: object
      properties:
        current_page:
          type: integer
          description: "The current page number of a data set"
        from:
          type: integer
          description: "The current position of a data set "
        last_page:
          type: string
          description: "The last page of a data set"
        path:
          type: string
          description: "API path"
        per_page:
          type: integer
          description: "A number of records per page"
        to:
          type: integer
          description: "The last position in a data set"
        total:
          type: integer
          description: "Total number of records in a data set"
    File:
      type: object
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: filename.jpg
        size:
          type: integer
          example: 480118
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'File creation date (Y-m-d\TH:i:sP)'
        created_by:
          type: integer
          example: 1
    BriefMerchantInfo:
      type: object
      properties:
        mid:
          type: string
          description: "Merchant number"
        name:
          type: string
          description: "Merchant name"
        opened:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant open date"
        closed:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant closed date"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Merchant created date"
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Merchant modified date"
        first_batch:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant first batch date"
        last_batch:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant last batch date"
        group:
          type: string
          description: "Group name"
        processor:
          type: string
          description: "Processor name"
        datasource:
          type: string
          description: "Data source name"
        sic_code:
          type: string
          description: "SIC Code"
        vim:
          type: string
          description: "Is VIM?"
        deactivated:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant deactivation date"
        status:
          type: string
          description: "Merchant status"
        active:
          type: string
          description: "Merchant active flag"
    ShortMerchantDetails:
      type: object
      properties:
        mid:
          type: string
          description: "Merchant number"
        name:
          type: string
          description: "Merchant name"
        opened:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant open date"
        closed:
          type: string
          format: date
          example: '01/21/2019'
          description: "Merchant closed date"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Merchant created date"
        status:
          type: string
          description: "Merchant status"
        active:
          type: string
          enum: [ "Yes", "No" ]
          description: "Merchant active flag"
        residual_split:
          type: object
          properties:
            type:
              type: string
              enum: [ "Gross", "Net" ]
              default: "Gross"
            value:
              type: number
              example: 50
              description: "Split value in percents"
            group_split:
              type: number
              example: 82.0
              description: Group split value
            has_expiration_date:
              type: string
              enum: [ "Yes", "No" ]
              description: "Is split has expiration date"
            split_after_expire:
              type: object
              properties:
                expires_at:
                  type: string
                  format: date-time
                  example: '2021-01-01T12:04:40+05:00'
                  description: "Split expire date"
                type:
                  type: string
                  enum: [ "Gross", "Net" ]
                  description: User split type after expiration
                value:
                  type: number
                  example: 52.0
                  description: User split value after expiration
                group_split:
                  type: number
                  example: 82.0
                  description: Group split value after expiration
    GetAssignedUsersToMerchantMessages:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
            example: "error"
          ignorable:
            type: boolean
            example: true
          text:
            type: string
            example: "Merchant permissions were successfully created, but failed to send email alert to user due to error."
          user_id:
            type: string
            example: "2"
    AssignedUsersToMerchant:
      type: array
      items:
        type: object
        required:
        - uid
        properties:
          uid:
            type: string
            example: 1
            description: "User ID"
          split:
            type: object
            description: "User split"
            required:
            - type
            - value
            properties:
              type:
                type: string
                enum: ["Gross", "Net"]
                default: "Gross"
              value:
                type: number
                example: 50
                description: "Split value in percents"
              group_split:
                type: number
                example: 60
                description: "Group split value in percents, required if type is 'Net'"
              has_expiration_date:
                type: string
                enum: ["Yes", "No"]
                default: "No"
              expiration:
                type: object
                description: "User split"
                required:
                - type
                - value
                properties:
                  type:
                    type: string
                    enum: ["Gross", "Net"]
                    default: "Gross"
                  value:
                    type: number
                    example: 50
                    description: "Split value in percents after expiration"
                  group_split:
                    type: number
                    example: 75
                    description: "Group split value in percents, required if type is 'Net'"
                  date:
                    type: string
                    format: date
                    example: '12/2021'
                    description: "In format `MM/YYYY`"
    AssignUsersToMerchantRequest:
      type: object
      properties:
        user_splits:
          $ref: "#/components/schemas/AssignedUsersToMerchant"
    CreateMerchantRequest:
      type: object
      required:
        - mid
        - opened
        - status
        - group
        - processor
      properties:
        mid:
          type: integer
          description: Merchant Number
        name:
          type: string
          description: Merchant DBA
        opened:
          type: string
          format: date
          example: '2021-12-22'
        closed:
          type: string
          format: date
          example: '2021-12-30'
        status:
          type: string
          enum: ["Open", "Closed"]
        active:
          type: string
          enum: ["Yes", "No"]
        vim:
          type: string
          enum: ["Yes", "No"]
        sic:
          type: string
          example: 1731
          description: Valid SIC code
        group:
          type: string
          description: Assign merchant to group name
        processor:
          type: string
          description: "Assign merchant to processor by name"
        datasource:
          type: string
          description: "Assign merchant to dataSource by name"
        create_lead:
          type: string
          enum: ["Yes", "No"]
        link_to_lead:
          type: integer
          example: 1
          description: "Assign merchant to Lead by ID"
        user_splits:
          $ref: "#/components/schemas/AssignedUsersToMerchant"
    GetAssignedUsersToMerchant:
      type: array
      description: "Assigned users"
      items:
        type: object
        properties:
          user_id:
            type: string
            example: 22
            description: User ID
          name:
            type: string
            example: "User Name"
            description: User Name
          is_merchant:
            type: string
            enum: ["Yes", "No"]
            description: Is user an merchant
          is_system_admin:
            type: string
            enum: ["Yes", "No"]
            description: Is user a system administrator
          has_access:
            type: string
            enum: ["Yes", "No"]
            description: Is user has access
          is_primary:
            type: string
            enum: ["Yes", "No"]
            description: Is user a primary
          class_title:
            type: string
            description: User class title
          expire_date:
            type: string
            format: date-time
            description: When assignage expires
          split:
            type: number
            description: User split value
          group_split:
            type: number
            description: Group split value
          type:
            type: string
            enum: ["Gross", "Net"]
            description: User split type
          reports_to:
            type: array
            items:
              type: object
              properties:
                user_id:
                  type: string
                  example: 21
                  description: Reports to User ID
                name:
                  type: string
                  example: "User Name"
                  description: Reports to User Name
    CardNumberObject:
      type: object
      required:
        - last4
      description: "Card number parts"
      properties:
        last4:
          type: string
          example: '0022'
          description: "Last 4 numbers of card number"
        first6:
          type: string
          example: '414400'
          description: "First 6 numbers of card number"
    CreateAdjustmentsRequest:
      type: object
      description: Adjustments fields
      required:
        - adjustments
      properties:
        adjustments:
          type: array
          items:
            type: object
            required:
              - date
              - amount
            properties:
              date:
                type: string
                format: date
                example: '2021-12-22'
                description: "Adjustment date"
              amount:
                type: number
                example: 202.22
                description: "Adjustment amount"
              reference_number:
                type: string
                description: "Deposit reference number"
              description:
                type: string
                description: "Adjustment description. Generic supported values: `amex`, `auth`, `data_capture`, `fees`, `fees_debit`, `interchange`, `interchange_charges`, `interchange_charges_debit`, `assessment`, `service_charges`, `account_management_fees`, `equipment`, `debit_service_charge`, `prepaid_discount`, `daily_discount`, `chargebacks`, `reserve`, `reserve_release`, `reserve_released_credit`, `reserve_released_debit`, `reserve_funding_credit`, `reserve_funding_debit`, `other`."
    CreateBatchesAndTransactionRequest:
      type: object
      description: Deposit fields
      required:
        - deposits
      properties:
        deposits:
          type: array
          items:
            type: object
            required:
              - date
              - reference_number
              - amount
              - transactions
            properties:
              date:
                type: string
                format: date
                example: '2021-12-22'
                description: "Deposit date"
              reference_number:
                type: string
                description: "Reference number"
              terminal_number:
                type: string
                description: "Terminal number"
              amount:
                type: number
                example: 202.22
                description: "Deposit amount. Required only if no transactions are provided"
              count:
                type: number
                example: 2
                description: "Deposit count. Required only if no transactions are provided"
              transactions:
                type: array
                items:
                  type: object
                  required:
                    - amount
                    - date
                    - card_number
                  properties:
                    amount:
                      type: number
                      example: 20.22
                      description: "Transaction Amount"
                    date:
                      type: string
                      format: date
                      example: '2021-12-20'
                      description: "Transaction date"
                    card_type:
                      type: string
                      example: 'MC'
                      description: "Transaction card type: `VI`, `MC`, `AX`, `DC`, `PD`, etc."
                    auth_code:
                      type: string
                      example: "133123770"
                      description: "Transaction authorization code"
                    pos_entry_mode:
                      type: string
                      example: "SWIPED"
                      description: "Transaction POS Entry Mode"
                    invoice_number:
                      type: string
                      example: "123"
                      description: "Transaction Invoice Number"
                    reference_number:
                      type: string
                      example: "221779c4-e43a-4a93-aa21-55424e"
                      description: "Transaction Reference Number"
                    type:
                      type: string
                      example: "Sale"
                      description: "Transaction Type"
                    is_voided:
                      type: string
                      enum: ["Yes", "Not"]
                      description: "Is Transaction Voided?"
                    card_number:
                      $ref: "#/components/schemas/CardNumberObject"
    MonetaryBatch:
      type: object
      properties:
        date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date"
        reference_number:
          type: string
          description: "Reference number"
        amount:
          type: string
          description: "Amount"
        count:
          type: string
          description: "A number of transactions"
        terminal_number:
          type: string
          description: "Terminal number"
        transactions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 123
                description: "Transaction ID"
              date:
                type: string
                format: date
                example: '01/21/2019'
                description: "Transaction date"
              type:
                type: string
                example: 'SALE'
                description: "Transaction type"
              amount:
                type: string
                example: "91.57"
                description: "Transaction amount"
              cardholder:
                type: string
                example: "3712*******1234"
                description: "Cardholder number"
              auth_code:
                type: string
                example: 550123
                description: "Transaction auth code"
              pos_entry_mode:
                type: string
                example: SWIPED
                description: "POS entry mode"
              invoice_number:
                type: string
                example: "11"
                description: "Invoice number"
              void_reject_chargeback:
                type: boolean
                example: true
                description: "Is a transaction rejected?"
              reject_description:
                type: string
                example: "INVALID SEC CODE"
                description: "Description of the reject code"
    CreateAuthorizationBatchesAndTransactionRequest:
      type: object
      description: Batch fields
      required:
        - batches
      properties:
        batches:
          type: array
          items:
            type: object
            required:
              - date
              - reference_number
            properties:
              date:
                type: string
                format: date
                example: '2021-12-22'
                description: "Batch date"
              reference_number:
                type: string
                description: "Batch reference number"
              currency:
                type: string
                description: "Batch currency: `USD`, `EUR`, `GBP` etc."
                example: "USD"
              transactions:
                type: array
                items:
                  type: object
                  required:
                    - amount
                    - date
                    - card_number
                  properties:
                    amount:
                      type: number
                      example: 20.22
                      description: "Transaction Amount"
                    date:
                      type: string
                      format: date
                      example: '2021-12-20'
                      description: "Transaction Date"
                    return_code:
                      type: string
                      example: "133123770"
                      description: "Transaction return code"
                    payment_method:
                      type: string
                      example: "SWIPED"
                      description: "Transaction payment method"
                    payment_type:
                      type: string
                      example: 'Authorization requests / balance inquiries'
                      description: "Transaction payment type"
                    reference_number:
                      type: string
                      example: "221779c4-e43a-4a93-aa21-55424e"
                      description: "Transaction Reference Number"
                    is_voided:
                      type: string
                      enum: ["Yes", "Not"]
                      description: "Is Transaction Voided?"
                    card_number:
                      $ref: "#/components/schemas/CardNumberObject"
    AuthorizationBatch:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Authorization Batch date"
        reference_number:
          type: string
          description: "Authorization Batch reference number"
        amount:
          type: string
          description: "Authorization Batch amount"
        count:
          type: string
          description: "A number of transactions"
        currency:
          type: string
          example: "USD"
          description: "Batch currency"
    AuthorizationBatchTransactions:
      type: object
      properties:
        id:
          type: integer
          example: 123
          description: "Transaction ID"
        date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Transaction date"
        payment_type:
          type: string
          example: 'Authorization requests / balance inquiries'
          description: "Transaction payment type"
        payment_method:
          type: string
          example: "SWIPED"
          description: "Transaction payment method"
        amount:
          type: string
          example: "91.57"
          description: "Transaction amount"
        cardholder:
          type: string
          example: "3712*******1234"
          description: "Cardholder number"
        return_code:
          type: string
          example: "550123"
          description: "Transaction return code"
        reference_number:
          type: string
          example: "230880620"
          description: "Reference number"
        is_voided:
          type: boolean
          example: false
          description: "Is a transaction rejected?"
    Adjustments:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
            example: '01/21/2019'
            description: "Adjustment date"
          type:
            type: string
            example: "Deposit adjustments"
            description: "Adjustment type"
          amount:
            type: string
            example: "-570.00"
            description: "Adjustment amount"
    Deposits:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
            example: '01/21/2019'
            description: "Deposit date"
          amount:
            type: string
            example: "1570.00"
            description: "Deposit amount"
          transactions:
            type: integer
            example: 3
            description: "Transactions count"
          batch:
            type: string
            example: "202101025856"
            description: "Reference number"
    CreateChargebacksRequest:
      type: object
      description: Chargeback fields
      required:
        - chargebacks
      properties:
        chargebacks:
          type: array
          items:
            type: object
            required:
              - chargeback_date
              - transaction_date
              - amount
              - card_number
              - reference_number
            properties:
              chargeback_date:
                type: string
                format: date
                example: '2021-12-22'
                description: "Chargeback date"
              transaction_date:
                type: string
                format: date
                example: '2021-12-13'
                description: "Chargeback Transaction date"
              respond_due_date:
                type: string
                format: date
                example: '2021-12-30'
                description: "Chargeback Respond due date"
              amount:
                type: number
                example: 20.22
                description: "Chargeback Amount"
              original_amount:
                type: number
                example: 10.11
                description: "Chargeback Original Amount"
              reason_code:
                type: string
                description: "Chargeback reason code"
              reason:
                type: string
                description: "Chargeback reason description"
              type:
                type: string
                description: "Chargeback type"
              case_status:
                type: string
                description: "Chargeback case status"
              case_type:
                type: string
                description: "Chargeback case type"
              case_number:
                type: string
                description: "Chargeback case number"
              item_type:
                type: string
                description: "Chargeback item type"
              document_status:
                type: string
                description: "Chargeback document status"
              family_id:
                type: string
                description: "Chargeback family id"
              reference_number:
                type: string
                example: "221779c4-e43a-4a93-aa21-55424e"
                description: "Chargeback Reference Number"
              is_credit:
                type: string
                enum: ["Yes", "Not"]
                description: "Is Credit?"
              card_number:
                $ref: "#/components/schemas/CardNumberObject"
    Chargeback:
      type: object
      properties:
        id:
          type: integer
          example: 123
          description: "Chargeback internal ID"
        merchant_id:
          type: string
          example: "48236605840"
          description: "Merchant ID"
        dba:
          type: string
          example: "Dummy Merchant DBA"
          description: "Merchant DBA"
        case_number:
          type: string
          example: "230880620"
          description: "Case number"
        chargeback_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Chargeback date"
        transaction_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Transaction date"
        respond_due:
          type: string
          format: date
          example: '01/21/2019'
          description: "Respond due date"
        amount:
          type: string
          example: "1570.00"
          description: "Amount"
        original_amount:
          type: string
          example: "10.00"
          description: "Original amount of transaction"
        currency:
          type: string
          description: "Transaction currency"
        reason:
          type: string
          description: "Chargeback reason"
        reason_code:
          type: string
          description: "Chargeback reason code"
        card_number:
          type: string
          description: "Cardholder number"
        reply_form:
          type: string
          description: "Reply form type. Affects reply options."
        cycle_indicator:
          type: string
          description: "Chargeback cycle indicator"
        transaction_id:
          type: string
          description: "Transaction ID"
        reference_number:
          type: string
          description: "Transaction ID"
        case_status:
          type: string
          description: "Case status"
        case_status_description:
          type: string
          description: "Status description"
        mcc:
          type: string
          description: "MCC code"
        dispute_jurisdiction:
          type: string
          description: "Dispute jurisdiction"
        card_product_type:
          type: string
          description: "Card product"
        process_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Process date"
        transaction_method:
          type: string
          description: "Transaction method"
        invoice_number:
          type: string
          description: "Invoice number"
        microfilm_number:
          type: string
          description: "Microfilm number"
        airline_ticket_number:
          type: string
          description: "Airline ticket number"
        order_number:
          type: string
          description: "Order number"
        tracking_number:
          type: string
          description: "Tracking number"
        last_status_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the last status update"
        updated_at:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the most recent update"
        case_action:
          type: string
          description: "Case action"
        action:
          type: string
          description: "Can the case be viewed of replied"
        foreign_amount:
          type: string
          example: "10.00"
          description: "Foreign amount of transaction"
        transaction_locator:
          type: string
          description: Transaction locator
        authorization_code:
          type: string
          example: "08572B"
          description: "Authorization code"
        type:
          type: string
          example: "First Chargeback"
          description: "Chargeback type"
    CreateRetrievalsRequest:
      type: object
      description: Retrieval fields
      required:
        - retrievals
      properties:
        retrievals:
          type: array
          items:
            type: object
            required:
              - retrieval_date
              - transaction_date
              - amount
              - card_number
              - reference_number
            properties:
              retrieval_date:
                type: string
                format: date
                example: '2021-12-22'
                description: "Retrieval date"
              transaction_date:
                type: string
                format: date
                example: '2021-12-13'
                description: "Retrieval Transaction date"
              respond_due_date:
                type: string
                format: date
                example: '2021-12-30'
                description: "Retrieval Respond due date"
              amount:
                type: number
                example: 20.22
                description: "Retrieval Amount"
              original_amount:
                type: number
                example: 10.11
                description: "Retrieval Original Amount"
              reason_code:
                type: string
                description: "Retrieval reason code"
              reason:
                type: string
                description: "Retrieval reason description"
              case_status:
                type: string
                description: "Retrieval case status"
              case_type:
                type: string
                description: "Retrieval case type"
              case_number:
                type: string
                description: "Retrieval case number"
              item_type:
                type: string
                description: "Retrieval item type"
              family_id:
                type: string
                description: "Retrieval family id"
              reference_number:
                type: string
                example: "221779c4-e43a-4a93-aa21-55424e"
                description: "Retrieval Reference Number"
              card_number:
                $ref: "#/components/schemas/CardNumberObject"
    Retrieval:
      type: object
      properties:
        id:
          type: integer
          example: 123
          description: "Chargeback internal ID"
        merchant_id:
          type: string
          example: "48236605840"
          description: "Merchant ID"
        dba:
          type: string
          example: "Dummy Merchant DBA"
          description: "Merchant DBA"
        case_number:
          type: string
          example: "230880620"
          description: "Case number"
        retrieval_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Request date"
        transaction_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Transaction date"
        amount:
          type: string
          example: "10.00"
          description: "Amount"
        respond_due:
          type: string
          format: date
          example: '01/21/2019'
          description: "Respond due date"
        original_amount:
          type: string
          example: "10.00"
          description: "Original amount of transaction"
        currency:
          type: string
          description: "Transaction currency"
        reason:
          type: string
          description: "Retrieval case reason"
        reason_code:
          type: string
          description: "Retrieval case reason code"
        card_number:
          type: string
          description: "Cardholder number"
        transaction_id:
          type: string
          description: "Transaction ID"
        reference_number:
          type: string
          description: "Transaction ID"
        case_status:
          type: string
          description: "Case status"
        case_status_description:
          type: string
          description: "Status description"
        mcc:
          type: string
          description: "MCC code"
        dispute_jurisdiction:
          type: string
          description: "Dispute jurisdiction"
        card_product_type:
          type: string
          description: "Card product"
        transaction_method:
          type: string
          description: "Transaction method"
        invoice_number:
          type: string
          description: "Invoice number"
        microfilm_number:
          type: string
          description: "Microfilm number"
        airline_ticket_number:
          type: string
          description: "Airline ticket number"
        order_number:
          type: string
          description: "Order number"
        tracking_number:
          type: string
          description: "Tracking number"
        last_status_date:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the last status update"
        updated_at:
          type: string
          format: date
          example: '01/21/2019'
          description: "Date of the most recent update"
        case_action:
          type: string
          description: "Case action"
        action:
          type: string
          description: "Can the case be viewed of replied"
        foreign_amount:
          type: string
          example: "10.00"
          description: "Foreign amount of transaction"
        transaction_locator:
          type: string
          description: Transaction locator
    ChargebackReplyDisputeRequest:
      type: object
      required:
        - selected_doc_types
        - user_note
        - file
      properties:
        selected_doc_types:
          type: string
          enum: [
              'sales_slip',
              'cancellation_policy',
              'order_form',
              'proof_of_delivery',
              'rental_agreement',
              'recurring_billing_agreement',
              'loyalty_transactions',
              'subsequent_purchases',
              'ticket_proof',
              'flight_manifest_proof',
              'cvv2_proof',
              'authorization_proof',
              'secure_code_proof',
              'other',
          ]
          description: Selected documents
        other_description:
          type: string
          description: Other document description
        compelling_doc:
          type: string
          description: Compelling document
          enum: [
              A,V,C
          ]
        selected_compelling:
          type: string
          description: Selected compelling
          enum: [
              'ch_in_possession'       ,
              'signed_delivery_form'   ,
              'address_verification'   ,
              'digital_goods_download' ,
              'delivery_to_ch'         ,
              'loyalty_transactions'   ,
              'subsequent_purchases'   ,
              'transport_proof'        ,
              'non_dispute_payments'   ,
              'auth_signer_by_ch'      ,
              'signed_order_form'      ,
              'legitimate_spend'       ,
              'recurring_transaction'  ,
              'member_of_ch_household' ,
              'flight_manifest'
          ]
        selected_digital_goods_04:
          type: string
          description: Digital goods compelling documents
          enum: [
            'purchaser_ip_and_location',
            'device_id_and_name',
            'purchaser_name_and_email',
            'same_device_and_card',
            'proof_of_profile_setup',
            'proof_of_app_access'
          ]
        download_date:
          type: string
          description: Download date
        download_time:
          type: string
          description: Download time
        purchaser_ip_addr:
          type: string
          description: Purchaser IP address
        geographical_location:
          type: string
          description: Physical location
        device_id:
          type: string
          description: PhDevice ID
        device_name:
          type: string
          description: Device ID
        purchaser_name:
          type: string
          description: Purchaser name
        purchaser_email:
          type: string
          description: Purchaser email
        arn_04:
          type: string
          description: ARN
        tran_date_04:
          type: string
          description: Transaction date
        arn_09:
          type: string
          description: ARN
        tran_date_09:
          type: string
          description: Transaction date
        arn_13:
          type: string
          description: ARN
        tran_date_13:
          type: string
          description: Transaction date
        ip_address:
          type: string
          description: IP address
        email_address:
          type: string
          description: Email address
        phone_number:
          type: string
          description: Phone number
        physical_address:
          type: string
          description: Physical address
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    ChargebackReplyCreditIssuedRequest:
      type: object
      required:
        - credit_date
        - credit_amount
        - user_note
        - file
      properties:
        credit_date:
          type: string
          description: Credit transaction date
        credit_amount:
          type: string
          description: Credit transaction amount
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    RetrievalReplyResponseRequest:
      type: object
      required:
        - user_note
        - file
      properties:
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    RetrievalReplyUnableRequest:
      type: object
      required:
        - user_note
        - file
      properties:
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    RetrievalReplyCreditIssuedRequest:
      type: object
      required:
        - credit_date
        - credit_amount
        - user_note
        - file
      properties:
        credit_date:
          type: string
          description: Credit transaction date
        credit_amount:
          type: string
          description: Credit transaction amount
        user_note:
          type: string
          description: User note
        file:
          type: array
          description: Files to attach
          items:
            type: string
    ChargebackReplyResponse:
      allOf:
        - type: object
          properties:
            chargeback:
              type: object
              properties:
                id:
                  type: string
                  example: 1
                merchant_id:
                  type: string
                  example: "123456789"
                dba:
                  type: string
                  example: "Wild Coyote Hotel"
                cycle_indicator:
                  type: string
                  example: 'First chargeback'
                date:
                  type: string
                  example: "11/14/2020"
                transaction_date:
                  type: string
                  example: "11/14/2020"
                amount:
                  type: string
                  example: "1000.00"
                reason_code:
                  type: string
                reason:
                  type: string
                card_number:
                  type: string
                case_number:
                  type: string
                case_action:
                  type: string
                action:
                  type: string
                reply_form:
                  type: string
                case_status:
                  type: string
                case_status_description:
                  type: string
                last_status_date:
                  type: string
                respond_due:
                  type: string
                original_amount:
                  type: string
                updated_at:
                  type: string
                mcc:
                  type: string
                dispute_jurisdiction:
                  type: string
                card_product_type:
                  type: string
                process_date:
                  type: string
                transaction_method:
                  type: string
                invoice_number:
                  type: string
                microfilm_number:
                  type: string
                airline_ticket_number:
                  type: string
                order_number:
                  type: string
                tracking_number:
                  type: string
            items:
              type: object
              properties:
                reason:
                  type: string
                message_from_bank:
                  type: string
                merchant_due_date:
                  type: string
                financial_disposition_date:
                  type: string
                type:
                  type: string
        - $ref: "#/components/schemas/DisputeDetailsResponse"
    RetrievalsReplyResponse:
      allOf:
        - type: object
          properties:
            retrieval:
              type: object
              properties:
                id:
                  type: string
                merchant_id:
                  type: string
                  example: "123456789"
                dba:
                  type: string
                  example: "Wild Coyote Hotel"
                date:
                  type: string
                transaction_date:
                  type: string
                amount:
                  type: string
                reason_code:
                  type: string
                reason:
                  type: string
                card_number:
                  type: string
                case_number:
                  type: string
                case_action:
                  type: string
                action:
                  type: string
                case_status:
                  type: string
                case_status_description:
                  type: string
                last_status_date:
                  type: string
                respond_due:
                  type: string
                original_amount:
                  type: string
                updated_at:
                  type: string
                mcc:
                  type: string
                dispute_jurisdiction:
                  type: string
                card_product_type:
                  type: string
                foreign_amount:
                  type: string
                transaction_method:
                  type: string
                transaction_locator:
                  type: string
                invoice_number:
                  type: string
                microfilm_number:
                  type: string
                airline_ticket_number:
                  type: string
                order_number:
                  type: string
                tracking_number:
                  type: string
        - $ref: "#/components/schemas/DisputeDetailsResponse"
    DisputeDetailsResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            type: object
            properties:
              reference:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        auth_records:
          type: array
          items:
            type: object
            properties:
              reference:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
        notes:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              added_at:
                type: string
        messages:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              description:
                type: string
              added_at:
                type: string
              viewed_on:
                type: string
        directories:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
              title:
                type: string
              files:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                    title:
                      type: string
                    url:
                      type: string
                      description: site url
                      example: "https://dev.iriscrm.com/retrievals/download-file/94900"
                    api_url:
                      type: string
                      description: api url
                      example: "https://dev.iriscrm.com/api/v1/merchants/333333333/retrievals/903729142148/files/94900"
    DisputeFile:
      type: object
      properties:
        name:
          type: string
          description: File name
          example: "Merchant Output Package_4/4/20.tif"
        directory:
          type: string
          description: Folder name
          example: Incoming Chargeback Documents
        content:
          type: string
          format: binary
          description: base64 encoded content
    CreateMemosRequest:
      type: object
      description: Memo fields
      required:
        - memos
      properties:
        memos:
          type: array
          items:
            type: object
            required:
              - text
            properties:
              text:
                type: string
                example: "Memo text"
                description: "Memo text"
              is_visible:
                type: string
                enum: ["Yes", "No"]
                description: "Is memo visible to merchant"
    UpdateDetailsRequest:
      type: object
      description: Details fields
      required:
        - details
      properties:
        details:
          type: object
          example:
            "DBA City": "New York"
            "Table Field":
              0:
                "Column1": "Value1"
                "Column2": "Value2"
                "Column3": "Value3"
              1:
                "Column1": "Value4"
                "Column2": "Value5"
                "Column3": "Value6"
          properties:
            "{account_field_key_string}":
              type: string
              description: "Value for given account status field key"
            "{account_field_key_table}":
              type: array
              description: "Rows for table"
              items:
                type: object
                properties:
                  "{table_header_title}":
                    type: string
                    description: "Value for given table title (column/cell)"
        status_map:
          type: object
          description: "Define custom map of string representation for 'Status' field to map to Open/Closed merchant status"
          properties:
            1:
              type: array
              example: ["Approved", "Active"]
              description: "String representations of open status"
              items:
                type: string
                description: "String value representation of open status"
            2:
              type: array
              example: ["Canceled", "Inactive"]
              description: "String representations of closed status"
              items:
                type: string
                description: "String value representation of closed status"
    EquipmentResponse:
      allOf:
        - type: object
          properties:
            data:
              type: array
              description: "Equipment list"
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: ID
                  vnumber:
                    type: string
                    description: V Number
                  date:
                    type: string
                    description: File Update Date
                  bin:
                    type: string
                    description: BIN
                  mcc:
                    type: string
                    description: MCC
                  agent:
                    type: string
                    description: Agent
                  chain:
                    type: string
                    description: Chain
                  store:
                    type: string
                    description: Store Number
                  terminal:
                    type: string
                    description: Terminal Number
                  hc_pos_id:
                    type: string
                    description: POS Identifier
                  auth_code:
                    type: string
                    description: Authentication Code
                  pos_mid:
                    type: string
                    description: POS Merchant ID
                  name:
                    type: string
                    description: Merchant Name
                  address:
                    type: string
                    description: Merchant Address
                  city:
                    type: string
                    description: City
                  state:
                    type: string
                    description: State
                  zip_code:
                    type: string
                    description: ZIP Code
                  country:
                    type: string
                    description: Country
                  phone:
                    type: string
                    description: Phone
                  contact:
                    type: string
                    description: Contact Name
                  timezone:
                    type: string
                    description: Timezone
                  manufacturer:
                    type: string
                    description: Manufacturer
                  model:
                    type: string
                    description: Model
                  software:
                    type: string
                    description: Software
                  comments_txt:
                    type: string
                    description: Profile Comments
                  close_profile:
                    type: string
                    description: Close Profile
                  close_profile_date:
                    type: string
                    description: Close Profile Date
                  location_num:
                    type: string
                    description: Location Number
                  entitlements:
                    type: string
                    description: Entitlements
                  ebt_fcs_id:
                    type: string
                    description: EBT FCS ID
                  ebt_trans_type:
                    type: string
                    description: EBT Trans Type
                  comments1:
                    type: string
                    description: Support Comments 1
                  comments2:
                    type: string
                    description: Support Comments 2
                  comments3:
                    type: string
                    description: Support Comments 3
                  pin_pad_available:
                    type: string
                    description: Is PIN Pad available
                    enum: ["Yes", "No"]
                  pin_pad_type:
                    type: string
                    description: PIN Pad Type
                  pin_pad_idle_prompt:
                    type: string
                    description: PIN Pad Idle Prompt
                  corp_hq_name:
                    type: string
                    description: Corporate HQ Name
                  alt_build_type:
                    type: string
                    description: Alt Build Type
                  alt_build_type_desc:
                    type: string
                    description: Alt Build Type Description
                  auth_comm_type:
                    type: string
                    description: Auth Comm Type
                  settle_comm_type:
                    type: string
                    description: Settle Comm Type
                  tip_option:
                    type: string
                    description: Tip Option
                  tip_at_time_of_sale:
                    type: string
                    description: Tip At Time Of Sale
                  clerk_server:
                    type: string
                    description: Clerk/Server Option
                  auto_close:
                    type: string
                    description: Auto Close
                  auto_close_time1:
                    type: string
                    description: Auto Close Time 1
                  auto_close_reports:
                    type: string
                    description: Auto Close Reports
                  merchant_aba_number:
                    type: string
                    description: Merchant ABA
                  merchant_settlement_agent:
                    type: string
                    description: Settlement Agent
                  reimbursement_attribute:
                    type: string
                    description: Reimbursement Attribute
                  status:
                    type: string
                    description: Status

    ##### RESERVE FUNDING

    ####### DATA
    
    RF_Data_Reserve_Base:
      type: object
      required:
        - ach_indicator
        - statement_indicator
        - carry_over_indicator
      properties:
        reserve_amount:
          type: string
          example: "30.12"
          description: "Fixed amount of a merchant's gross volume to withhold per day. Must be blank when either of 
            these are populated: Reserve ID, ACH Deposit Cap"
        reserve_percent:
          type: string
          example: "13.12"
          description: "Percentage of a merchant's gross volume to withhold per ACH process. Must be blank when either of these are populated:
              Reserve ID, ACH Deposit Cap"
        ach_deposit_cap:
          type: string
          example: "13.12"
          description: "The amount of the merchant's gross volume withheld over the amount specified as the ACH Deposit Cap
              Must be blank when any of these are populated: Reserve ID, Reserve Amount and Reserve Percent, Rolling Reserve Days,
              Carry-Over Indicator"
        reserve_ceiling:
          type: string
          example: "13.12"
          description: "Maximum dollar amount which can be withheld and placed in the reserve fund account.
            Must be blank when Reserve ID is populated"
        ach_indicator:
          type: string
          example: "N"
          enum: ["N", "S"]
          description: "Specifies how to treat the Reserve amount when debiting the merchant. N = Net, S = Separate.
              Must be blank when Reserve ID is populated"
        statement_indicator:
          type: string
          example: "N"
          enum: ["D", "N", "S"]
          description: "Specifies how to display Reserve Funding activity on the merchant statement. Must be blank when Reserve ID is populated.
              Possible values when populated: D = Detail, N = None, S = Summary"
        carry_over_indicator:
          type: string
          example: "N"
          enum: [ "N", "Y" ]
          description: "Indicates whether to carry over funds that can't be collected for any given ACH 
            (and attempt to collect those funds in a future ACH process). Must be blank when any of these are populated:
            Reserve ID, ACH Deposit Cap, Rolling Reserve Days. Possible values when populated: N = No, Y = Yes"
        note:
          type: string
          example: "Some note"
          description: Note

    RF_Data_OneTime_Reserve_Base:
      type: object
      properties:
        reserve_amount:
          type: string
          example: "30.12"
          description: "Fixed amount of a merchant's gross volume to withhold. Must be blank when Function Type = D. 
            Required when Function Type = I or U"
        reserve_date:
          type: string
          example: "2022-12-01"
          description: "The date the One Time Reserve should be applied. Date in YYYY-MM-DD format, or left blank. 
            Must be blank when Function Type = D. Required when Function Type = I or U"
        reserve_dda_indicator:
          type: string
          example: "C"
          enum: [ "C", "S", "G" ]
          description: "The type for the DDA/Account to which the withheld funds will be deposited. Must be blank when Function Type = D. 
            If the Merchant Reserve Settings have already been set up, this can either be blank or must match the 
            Reserve Settings. Required if the Merchant Reserve Settings have not been set up"
        note:
          type: string
          example: "Some note"
          description: Note

    RF_Data_Release_Base:
      type: object
      required:
        - forgive_carry_over_balance
        - release_frequency
      properties:
        reserve_amount:
          type: string
          example: "30.12"
          description: "Fixed amount of a merchant's Reserve Balance to release per day. Must be blank when `release_percent` is populated"
        release_percent:
          type: string
          example: "13.12"
          description: "Percentage of a merchant's Reserve Balance to release per day. Must be blank when `reserve_amount` is populated"
        reserve_floor:
          type: string
          example: "13.12"
          description: "The minimum amount of withheld funds that must remain in the Reserve Balance when releasing funds"
        release_frequency:
          type: string
          example: "D"
          enum: ["D", "M"]
          description: "Frequency to release funds:
            Daily and 1 ACH per day: funds are released during the ACH run.
            Daily and multiple ACH jobs per day: funds released during the ACH job as defined during client implementation.
            Monthly: funds are released on the last business day of the month during ACH"
        forgive_carry_over_balance:
          type: string
          example: "N"
          enum: [ "N", "Y" ]
          description: "Any balance that exists in Carry-Over will be cleared out as part of the release process"
        release_remaining_balance:
          type: string
          example: "13.12"
          description: "Primarily used when the Release Settings are defined based on the percentage to release. 
            Once the Reserve Balance drops below the Release Remaining Balance, then the remaining Reserve Balance amount is released at one time"
        note:
          type: string
          example: "Some note"
          description: Note

    RF_Data_OneTime_Release_Base:
      type: object
      properties:
        release_amount:
          type: string
          example: "30.12"
          description: "Fixed amount of a merchant's Reserve Balance to release. Must be blank when `release_percent` is populated"
        release_percent:
          type: string
          example: "30.12"
          description: "Percentage of a merchant's Reserve Balance to release. Must be blank when `release_amount` is populated"
        release_date:
          type: string
          example: "2022-12-01"
          description: "The date the Merchant Release settings will apply. Date in YYYY-MM-DD format, or left blank. 
            Must be blank when Function Type = D."
        note:
          type: string
          example: "Some note"
          description: Note

    RF_Data_TransferFunds_Base:
      type: object
      properties:
        transfer_amount:
          type: string
          example: "30.12"
          description: "Fixed amount of a merchant's Reserve Balance to transfer to specified DDA. 
            Must be blank when `transfer_percent` is populated"
        transfer_percent:
          type: string
          example: "30.12"
          description: "Percentage of a merchant's Reserve Balance to transfer to specified DDA. 
            Must be blank when `transfer_amount` is populated"
        to_dda_indicator:
          type: string
          example: "C"
          enum: [ "C", "S", "G" ]
          description: "Type of Account (DDA) for the account to which funds are being transferred"
        note:
          type: string
          example: "Some note"
          description: Note

    RF_Data_Maintenance_File:
      type: object
      properties:
        datasource_id:
          type: integer
          example: 1
          description: "DataSource ID"
        file_name:
          type: string
          example: "1234_RFBMF_10062022_060943.TSYSI"
          description: "Generated file name"
        status:
          type: string
          enum: [ 'new','in_progress','success','error','duplicate' ]
          description: "File state"
        report_type:
          type: string
          enum: [ rf_batch_request ]
          description: "Report type"
        created_at:
          type: string
          example: "2022-10-06T06:09:43-04:00"
          description: File creation date
        updated_at:
          type: string
          example: "2022-10-06T06:09:43-04:00"
          description: File update date

    # REQUESTS
    
    RF_Create_Common:
      type: object
      required:
        - merchant_id
        - bank
        - department
        - function
      properties:
        function:
          type: string
          example: "I"
          enum: [ "I", "U" ]
          description: "Function Type, I = Insert, U = Update"
        merchant_id:
          type: integer
          example: 467128346458912
          description: Merchant ID
        bank:
          type: integer
          example: 2345
          description: Bank number
        department:
          type: string
          example: "Some department name"
          description: Department name

    RF_Create_Reserve:
      type: object
      allOf:
        - $ref: '#/components/schemas/RF_Create_Common'
        - $ref: '#/components/schemas/RF_Data_Reserve_Base'
        - type: object
          properties:
            dates:
              type: object
              properties:
                start:
                  type: string
                  example: "2019-10-01"
                  description: "The date the Merchant Reserve settings apply. Date in YYYY-MM-DD format, or left blank.
                    If blank, the Current Day is applied. Date must: Be valid, Not occur before the current date, 
                    Occur on or before the Stop Date (if the Stop Date is populated)"
                stop:
                  type: string
                  example: "2019-10-01"
                  description: "The last day the Merchant Reserve settings apply. Date in YYYY-MM-DD format, or left blank.
                    If blank, the Merchant Reserve occurs indefinitely (until a Stop Date or Reserve Ceiling is provided).
                    Date must: Be valid, Occur on or after the the current date or the Start Date (whichever is later)"

    RF_Create_OneTime_Reserve:
      type: object
      allOf:
        # override the function type to add the D option
        - type: object
          allOf:
            - type: object
              properties:
                function:
                  type: string
                  example: "I"
                  enum: [ "I", "U", "D" ]
                  description: "Function Type, I = Insert, U = Update, D = Delete"
            - $ref: '#/components/schemas/RF_Create_Common'
        - $ref: '#/components/schemas/RF_Data_OneTime_Reserve_Base'

    RF_Create_OneTime_Release:
      type: object
      allOf:
        # override the function type to add the D option
        - type: object
          allOf:
            - type: object
              properties:
                function:
                  type: string
                  example: "I"
                  enum: [ "I", "U", "D" ]
                  description: "Function Type, I = Insert, U = Update, D = Delete"
            - $ref: '#/components/schemas/RF_Create_Common'
        - $ref: '#/components/schemas/RF_Data_OneTime_Release_Base'

    RF_Create_Release:
      type: object
      allOf:
        - $ref: '#/components/schemas/RF_Create_Common'
        - $ref: '#/components/schemas/RF_Data_Release_Base'
        - type: object
          properties:
            dates:
              type: object
              properties:
                start:
                  type: string
                  example: "2019-10-01"
                  description: "The date the Merchant Release settings apply."
                stop:
                  type: string
                  example: "2019-10-01"
                  description: "The last day the Merchant Release settings apply"

    RF_Create_TransferFunds:
      type: object
      allOf:
        - $ref: '#/components/schemas/RF_Create_Common'
        - $ref: '#/components/schemas/RF_Data_TransferFunds_Base'

    # RESPONSES

    RF_Fetch_Data_Common:
      type: object
      title: Reserve funding record data
      properties:
        function_type:
          type: string
          example: "I"
          enum: [ "I", "U" ]
          description: "Function Type, I = Insert, U = Update"
        bank_number:
          type: integer
          example: 2345
          description: Bank number
        department_name:
          type: string
          example: "Some department name"
          description: Department name

    RF_Fetch_Common:
      type: object
      properties:
        uuid:
          type: string
          example: 337110fd-3b49-4af8-bc0b-0b48e079c417
          description: Unique identifier for the reserve funding
        merchant_id:
          type: integer
          example: 467128346458912
          description: Merchant ID
        activity_type:
          type: string
          example: manage_merchant_reserve
          enum: [
            "manage_merchant_reserve",
            "manage_merchant_release",
            "transfer_funds_on_reserve",
            "one_time_reserve",
            "one_time_release",
            "record_adjustment_reserve",
            "record_adjustment_release",
            "manage_rolling_reserve_activity",
            "merchant_settings"
          ]
          description: Record type
        status:
          type: string
          example: pending
          enum: [
            "pending",
            "in_progress",
            "sent",
            "approved",
            "declined",
          ]
          description: Status of the reserve funding
        created_by:
          type: integer
          example: 12
          description: User ID of the user who created the reserve funding
        created_at:
          type: string
          example: "2019-10-01T00:00:00-04:00"
          description: Date and time when the reserve funding was created
        updated_by:
          type: integer
          example: 12
          description: User ID of the user who updated the reserve funding
        updated_at:
          type: string
          example: "2019-10-01T00:00:00-04:00"
          description: Date and time when the reserve funding was updated

    RF_Fetch_Reserve:
      type: object
      title: manage_merchant_reserve
      allOf:
        - $ref: '#/components/schemas/RF_Fetch_Common'
        - type: object
          properties:
            data:
              type: object
              title: manage_merchant_reserve
              allOf:
                - $ref: '#/components/schemas/RF_Fetch_Data_Common'
                - $ref: '#/components/schemas/RF_Data_Reserve_Base'
                - type: object
                  properties:
                    start_date:
                      type: string
                      example: "2019-01-01"
                      description: The date the Merchant Reserve settings apply
                    stop_date:
                      type: string
                      example: "2019-01-01"
                      description: The last day the Merchant Reserve settings apply
                    reserve_id:
                      type: string
                      example: "123456789"
                      description: Bank-level Merchant Reserve settings
                    reserve_dda:
                      type: string
                      example: "A234"
                      description: "DDA to which the withheld funds are deposited. If Reserve Settings have not been set up, 
                        this field can be populated or left blank. If blank, it will first default from the Department Level Defaults, 
                        and then from the Bank Defaults if the Department Level Defaults are not populated. 
                        If the department has a Reserve Balance for this merchant, 
                        the DDA Indicator must either match the Reserve Settings or be blank"
                    rolling_reserve_days:
                      type: string
                      example: "40"
                      description: "Number of days to withhold funds. Available when a Bank is set up for the Rolling Reserve option.
                        Blank if not used. Must be blank when any of these are populated: Reserve ID, ACH Deposit Cap, Carry-Over Indicator.
                        When populated, value must be 0-180. When changing existing Merchant Reserve settings to Rolling Reserve:
                        The Reserve Balance and Carry-Over Balance must both be zero, There can be no pending One Time Activities,
                        The Release Amount/Percent must be zero, The Release ID must not be populated. When changing existing Merchant 
                        Reserve settings from Rolling Reserve, the Reserve Balance must be zero"
                    reserve_dda_indicator:
                      type: string
                      example: "C"
                      enum: [ "C", "G", "S" ]
                      description: "DDA type to which the withheld funds are deposited. If Reserve Settings have not been set up, 
                        this field can be populated or left blank. If blank, it will first default from the Department Level Defaults, 
                        and then from the Bank Defaults if the Department Level Defaults are not populated. 
                        If the department has a Reserve Balance for this merchant, 
                        the DDA Indicator must either match the Reserve Settings or be blank. Possible values when populated:
                        C = Checking, G = General Ledger, S = Savings"
                    reserve_transit_routing_number:
                      type: string
                      example: "123456"
                      description: "Transit Routing Number (aka ABA) to which the withheld funds are deposited. 
                        If Reserve Settings have not been set up, this field can be populated or left blank. 
                        If blank, it will first default from the Department Level Defaults, 
                        and then from the Bank Defaults if the Department Level Defaults are not populated. 
                        If the department has a Reserve Balance for this merchant, 
                        the Transit Routing Number must either match the Reserve Settings or be blank"

    RF_Fetch_OneTime_Reserve:
      type: object
      title: one_time_reserve
      allOf:
        - $ref: '#/components/schemas/RF_Fetch_Common'
        - type: object
          properties:
            data:
              type: object
              title: one_time_reserve
              allOf:
                # override the function type to add the D option
                - type: object
                  allOf:
                    - type: object
                      properties:
                        function_type:
                          type: string
                          example: "I"
                          enum: [ "I", "U", "D" ]
                          description: "Function Type, I = Insert, U = Update, D = Delete"
                    - $ref: '#/components/schemas/RF_Fetch_Data_Common'
                - $ref: '#/components/schemas/RF_Data_OneTime_Reserve_Base'
                - type: object
                  properties:
                    reserve_dda:
                      type: string
                      example: null
                      description: "DDA/Account to which the withheld funds will be deposited"
                    reserve_transit_routing_number:
                      type: string
                      example: null
                      description: "Transit Routing Number (ABA) to which the withheld funds will be deposited"

    RF_Fetch_Release:
      type: object
      title: manage_merchant_release
      allOf:
        - $ref: '#/components/schemas/RF_Fetch_Common'
        - type: object
          properties:
            data:
              type: object
              title: manage_merchant_release
              allOf:
                - $ref: '#/components/schemas/RF_Fetch_Data_Common'
                - $ref: '#/components/schemas/RF_Data_Release_Base'
                - type: object
                  properties:
                    start_date:
                      type: string
                      example: "2019-01-01"
                      description: The date the Merchant Reserve settings apply
                    stop_date:
                      type: string
                      example: "2019-01-01"
                      description: The last day the Merchant Reserve settings apply

    RF_Fetch_OneTime_Release:
      type: object
      title: one_time_release
      allOf:
        - $ref: '#/components/schemas/RF_Fetch_Common'
        - type: object
          properties:
            data:
              type: object
              title: one_time_release
              allOf:
                # override the function type to add the D option
                - type: object
                  allOf:
                    - type: object
                      properties:
                        function_type:
                          type: string
                          example: "I"
                          enum: [ "I", "U", "D" ]
                          description: "Function Type, I = Insert, U = Update, D = Delete"
                    - $ref: '#/components/schemas/RF_Fetch_Data_Common'
                - $ref: '#/components/schemas/RF_Data_OneTime_Release_Base'

    RF_Fetch_TransferFunds:
      type: object
      title: transfer_funds_on_reserve
      allOf:
        - $ref: '#/components/schemas/RF_Fetch_Common'
        - type: object
          properties:
            data:
              type: object
              title: transfer_funds_on_reserve
              allOf:
                # override the function type to add the D option
                - type: object
                  allOf:
                    - type: object
                      properties:
                        function_type:
                          type: string
                          example: "I"
                          enum: [ "I", "U", "D" ]
                          description: "Function Type, I = Insert, U = Update, D = Delete"
                    - $ref: '#/components/schemas/RF_Fetch_Data_Common'
                - $ref: '#/components/schemas/RF_Data_TransferFunds_Base'

    RF_Fetch_All:
      oneOf:
        - $ref: '#/components/schemas/RF_Fetch_Reserve'
        - $ref: '#/components/schemas/RF_Fetch_Release'
        - $ref: '#/components/schemas/RF_Fetch_OneTime_Reserve'
        - $ref: '#/components/schemas/RF_Fetch_OneTime_Release'
        - $ref: '#/components/schemas/RF_Fetch_TransferFunds'

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - first_name
        - last_name
        - password
        - is_send_new_password
        - mobile_number
        - class
        - user_groups
        - timezone
      properties:
        username:
          type: string
          description: Username
        email:
          type: string
          description: User Email
        first_name:
          type: string
          description: User First Name
        last_name:
          type: string
          description: User Last Name
        password:
          type: string
          description: "User Password. Note: required if `is_send_new_password` isn't set or `No`"
        is_send_new_password:
          type: string
          enum: ["Yes", "No"]
          description: "Generate and sent password to user. Note: required if `password` isn't set"
        fax_number:
          type: string
          description: User Fax Number
        office_number:
          type: string
          description: User Office Number
        mobile_number:
          type: string
          example: 111-222-3333
          description: User Mobile Number
        country_code:
          type: string
          example: 1
          description: User Mobile Number Country Code
        is_two_step:
          type: string
          enum: ["Yes", "No"]
          description: Enable Two-Factor Authentication For User Login.
        is_mobile_internal_only:
          type: string
          enum: ["Yes", "No"]
          description: Should Mobile Number Be hidden in the Contact Customer Service section under merchants' Profile tab.
        is_forwarding_enabled:
          type: string
          enum: ["Yes", "No"]
          description: Should Receive And Respond To SMS Messages From Mobile Number.
        position:
          type: string
          description: User Position
        class:
          type: integer
          example: 1
          description: "User Class. Note: required if `copy_from_user` isn't set"
        user_groups:
          type: array
          description: "User Groups. Note: required if `copy_from_user` isn't set"
          items:
            type: integer
            example: 22
            description: Group ID
        primary_group:
          type: integer
          example: 22
          description: Primary Group ID
        page_size:
          type: integer
          enum: [10, 25, 50, 100, 500, 1000]
          description: User Default Page Size
        timezone:
          type: string
          enum: ["Eastern", "Central", "Mountain", "Pacific", "Hawaii", "Alaska", "Puerto Rico", "Atlantic", "Newfoundland"]
          example: 'Eastern'
          description: "User Time Zone. Note: required if `copy_from_user` isn't set"
        is_active:
          type: string
          enum: ["Yes", "No"]
          description: Is User active
        restrict_local:
          type: array
          description: Restrict User Access By Location Restriction Rule Keys
          items:
            type: integer
            example: 22
            description: Restriction Rule Key
        restrict_time:
          type: string
          enum: ["Yes", "No"]
          description: Restrict User Access By Time Period
        notes:
          type: string
          description: User's notes
        residual_split:
          type: number
          example: 72.0
          description: User split value
        group_split:
          type: number
          example: 82.0
          description: Group split value
        split_type:
          type: string
          enum: ["Gross", "Net"]
          description: User split type
        split_expiration_date:
          type: integer
          enum: [0, 1, 2, 3]
          description: "Split expiration date. Where: `0` - Split Does Not Expire; `[1, 2, 3]` -  Split Expire in `[1, 2, 3]` years."
        split_after_expiration:
          type: number
          example: 52.0
          description: User split value after expiration
        split_after_expiration_group_split:
          type: number
          example: 82.0
          description: Group split value after expiration
        split_after_expiration_type:
          type: string
          enum: ["Gross", "Net"]
          description: User split type after expiration
        copy_from_user:
          type: object
          description: Copy values from another user
          properties:
            user_id:
              type: string
              example: 21
              description: User ID to copy from
            copy_only:
              type: array
              description: Copy only certain set of values. Leave empty to copy everything
              items:
                type: string
                enum: ["user_info","group_settings","managed_users","managed_by_users","set_appointments_for_users","assigned_merchants","merchant_split_history","residual_templates"]
        reports_to:
          $ref: "#/components/schemas/AssignAndUnassign"
        manages:
          $ref: "#/components/schemas/AssignAndUnassign"
        set_events_for:
          $ref: "#/components/schemas/AssignAndUnassign"
        merchants:
          $ref: "#/components/schemas/AssignMerchants"
        residual_templates:
          $ref: "#/components/schemas/AssignResidualTemplates"
    EditUserRequest:
      type: object
      properties:
        username:
          type: string
          description: Username
        email:
          type: string
          description: User Email
        first_name:
          type: string
          description: User First Name
        last_name:
          type: string
          description: User Last Name
        fax_number:
          type: string
          description: User Fax Number
        office_number:
          type: string
          description: User Office Number
        mobile_number:
          type: string
          example: 111-222-3333
          description: User Mobile Number
        country_code:
          type: string
          example: 1
          description: User Mobile Number Country Code
        is_two_step:
          type: string
          enum: ["Yes", "No"]
          description: Enable Two-Factor Authentication For User Login.
        is_mobile_internal_only:
          type: string
          enum: ["Yes", "No"]
          description: Should Mobile Number Be hidden in the Contact Customer Service section under merchants' Profile tab.
        is_forwarding_enabled:
          type: string
          enum: ["Yes", "No"]
          description: Should Receive And Respond To SMS Messages From Mobile Number.
        position:
          type: string
          description: User Position
        class:
          type: integer
          example: 1
          description: User Class
        user_groups:
          type: array
          description: User Groups
          items:
            type: integer
            example: 22
            description: Group ID
        primary_group:
          type: integer
          example: 22
          description: Primary Group ID
        timezone:
          type: string
          enum: ["Eastern", "Central", "Mountain", "Pacific", "Hawaii", "Alaska", "Puerto Rico", "Atlantic", "Newfoundland"]
          example: 'Eastern'
          description: User Time Zone
        is_active:
          type: string
          enum: ["Yes", "No"]
          description: Is User active
        restrict_local:
          type: array
          description: Restrict User Access By Location Restriction Rule Keys
          items:
            type: integer
            example: 22
            description: Restriction Rule Key
        restrict_time:
          type: string
          enum: ["Yes", "No"]
          description: Restrict User Access By Time Period
        notes:
          type: string
          description: User's notes
        residual_split:
          type: number
          example: 72.0
          description: User split value
        group_split:
          type: number
          example: 82.0
          description: Group split value
        split_type:
          type: string
          enum: ["Gross", "Net"]
          description: User split type
        split_expiration_date:
          type: integer
          enum: [0, 1, 2, 3]
          description: "Split expiration date. Where: `0` - Split Does Not Expire; `[1, 2, 3]` -  Split Expire in `[1, 2, 3]` years."
        split_after_expiration:
          type: number
          example: 52.0
          description: User split value after expiration
        split_after_expiration_group_split:
          type: number
          example: 82.0
          description: Group split value after expiration
        split_after_expiration_type:
          type: string
          enum: ["Gross", "Net"]
          description: User split type after expiration
        reports_to:
          $ref: "#/components/schemas/AssignAndUnassign"
        manages:
          $ref: "#/components/schemas/AssignAndUnassign"
        set_events_for:
          $ref: "#/components/schemas/AssignAndUnassign"
        merchants:
          $ref: "#/components/schemas/AssignMerchants"
        residual_templates:
          $ref: "#/components/schemas/AssignResidualTemplates"
    AssignAndUnassign:
      type: object
      properties:
        assign:
          type: array
          description: User IDs to assign
          items:
            type: number
            example: 22
        unassign:
          type: array
          description: User IDs to unassign
          items:
            type: number
            example: 33
    AssignMerchants:
      type: object
      description: Set per merchant residual split
      properties:
        set:
          type: array
          items:
            type: object
            required:
              - mid
              - year
              - month
              - residual_split
            properties:
              mid:
                type: string
                example: 5431980820204040
                description: Merchant Number to set residual split for
              year:
                type: integer
                example: 2020
                description: Split year
              month:
                type: integer
                example: 8
                description: Split month
              residual_split:
                type: number
                example: 72.0
                description: User split value
              split_type:
                type: string
                enum: [ "Gross", "Net" ]
                description: User split type
              group_split:
                type: number
                example: 82.0
                description: Group split value
              apply_for_future:
                type: string
                enum: [ "Yes", "No" ]
                description: "Apply given residual split for future months. Default: `Yes`"
              note:
                type: string
                description: Changes note
              split_should_expire:
                type: string
                enum: [ "Yes", "No" ]
                description: Should split expire
              split_expire_year:
                type: integer
                example: 2023
                description: Split expire year
              split_expire_month:
                type: integer
                example: 11
                description: Split expire month
              split_after_expiration:
                type: number
                example: 52.0
                description: User split value after expiration
              split_after_expiration_type:
                type: string
                enum: [ "Gross", "Net" ]
                description: User split type after expiration
              split_after_expiration_group_split:
                type: number
                example: 82.0
                description: Group split value after expiration
        unset:
          type: array
          description: Merchant Number to unset
          items:
            type: string
            example: 5431980820204040
            description: Merchant Numbers to unset
    AssignResidualTemplates:
      type: object
      description: Assign residual templates to user
      properties:
        assign:
          type: array
          items:
            type: object
            required:
              - template_id
              - processor_id
              - year
              - month
            properties:
              template_id:
                type: integer
                example: 252
                description: Template ID to assign to
              processor_id:
                type: integer
                example: 193
                description: Processor ID to assign to
              year:
                type: integer
                example: 2020
                description: Assign template for year
              month:
                type: integer
                example: 8
                description: Assign template for month
              is_persistent:
                type: string
                enum: [ "Yes", "No" ]
                description: "Apply template for future months. Default: `No`"
              is_alternative:
                type: string
                enum: [ "Yes", "No" ]
                description: "Add as alternative template for the processor. Default: `No`"
              merchants:
                type: array
                description: Merchant Numbers to apply for in alternative template
                items:
                  type: string
                  example: 5431980820204040
                  description: Merchant Numbers to set
    GroupsList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 22
            description: Group ID
          name:
            type: string
            example: ISO
            description: Group Name
          is_primary:
            type: string
            enum: [ Yes, No ]
            example: Yes
            description: Is Group Primary
    UserClass:
      type: object
      properties:
        id:
          type: integer
          example: 3
          description: Class ID
        name:
          type: string
          example: Sales Rep
          description: Class Name
    ShortUserDetails:
      type: object
      properties:
        user_id:
          type: string
          example: 21
          description: User ID
        username:
          type: string
          example: "User Name"
          description: Username
        full_name:
          type: string
          example: "User Name"
          description: User Full Name
        class:
          $ref: "#/components/schemas/UserClass"
    ListOfUsers:
      type: object
      properties:
        id:
          type: integer
          example: 33
          description: User ID
        username:
          type: string
          description: Username
        full_name:
          type: string
          description: User Full Name
        email:
          type: string
          description: User Email
        fax_number:
          type: string
          description: User Fax Number
        office_number:
          type: string
          description: User Office Number
        mobile_number:
          type: string
          example: 111-222-3333
          description: User Mobile Number
        country_code:
          type: string
          example: 1
          description: User Mobile Number Country Code
        is_two_step:
          type: string
          enum: [ "Yes", "No" ]
          description: Is Two-Factor Authentication For User Login Enabled.
        is_active:
          type: string
          enum: [ "Yes", "No" ]
          description: Is User active
        position:
          type: string
          description: User Position
        timezone:
          type: string
          example: 'Eastern'
          description: User Time Zone
        notes:
          type: string
          description: User's notes
        page_size:
          type: string
          description: User Default Page Size
        class:
          $ref: "#/components/schemas/UserClass"
        groups:
          $ref: "#/components/schemas/GroupsList"
        residual_split:
          type: object
          description: Default Residual Split
          properties:
            default_value:
              type: number
              example: 72.0
              description: User split value
            type:
              type: string
              enum: [ "Gross", "Net" ]
              description: User split type
            expiration_date:
              type: integer
              enum: [ 0, 1, 2, 3 ]
              description: "Split expiration date. Where: `0` - Split Does Not Expire; `[1, 2, 3]` -  Split Expire in `[1, 2, 3]` years."
        reports_to:
          type: array
          items:
            $ref: "#/components/schemas/ShortUserDetails"
        manages:
          type: array
          items:
            $ref: "#/components/schemas/ShortUserDetails"
        set_events_for:
          type: array
          items:
            $ref: "#/components/schemas/ShortUserDetails"

        
        merchants:
          type: object
          description: Merchant Access Permissions
          properties:
            systemwide_access:
              type: string
              enum: [ "Yes", "No" ]
              description: Is User has Systemwide access to merchants
            groupwide_access:
              type: string
              enum: [ "Yes", "No" ]
              description: Is User has Groupwide access to merchants
            list:
              type: array
              items:
                $ref: "#/components/schemas/ShortMerchantDetails"

        
        created_by:
          $ref: "#/components/schemas/ShortUserDetails"
        updated_by:
          $ref: "#/components/schemas/ShortUserDetails"
        created_at:
          type: string
          format: date
          example: '2019-01-01T12:01:10+05:00'
          description: Creation Date
        updated_at:
          type: string
          format: date
          example: '2020-02-02T12:02:20+05:00'
          description: Modified Date
        last_login_at:
          type: string
          format: date
          example: '2021-03-03T12:03:30+05:00'
          description: Last Login

    SummaryResponse:
      type: object
      properties:
        processor_id:
          type: integer
          example: 1
        name:
          type: string
          example: Test Processor
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        created_by:
          type: integer
          example: 1
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        modified_by:
          type: integer
          example: 1
        merchants_count:
          type: integer
          example: 11
        sum_transactions:
          type: integer
          example: 1664667
        sum_sales_amount:
          type: number
          example: 0
        sum_income:
          type: number
          example: 0
        sum_expense:
          type: number
          example: 0
        sum_net:
          type: number
          example: 0
        sum_bps:
          type: number
          example: 0
        sum_agent_net:
          type: integer
          example: 0
    MerchantRow:
      type: object
      properties:
        merchant:
          type: string
          example: Merchant name
        transactions:
          type: integer
          example: 151182
        sales_amount:
          type: integer
          example: 15637576
        income:
          type: integer
          example: 499400
        expense:
          type: integer
          example: 454000
        net:
          type: integer
          example: 45400
        bps:
          type: integer
          example: 0.29
        users:
          type: boolean
          example: true
        percentage:
          type: integer
          example: 0
        agent_net:
          type: integer
          example: 0
        mid:
          type: integer
          example: 12312312312

    ResidualsDetails:
      type: object
      properties:
        MID:
          type: string
          example: "12312312312"
        DBA:
          type: string
          example: "Test Merchant"
      "patternProperties":
        "*":
          "type": "string"
      "additionalProperties":
        "type": "string"

    LineItems:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          enum: [
            agent,
            merchant
          ]
          example: "agent"
        item_id:
          type: integer
          example: 10100101
        user:
          type: object
          properties:
            user_id:
              type: integer
              example: 1
            username:
              type: string
              example: john79
            full_name:
              type: string
              example: John Doe
            class:
              type: string
              example: Sales Manager
            is_active:
              type: integer
              example: 1
        merchant:
          type: object
          properties:
            mid:
              type: string
              example: 1231323
            dba:
              type: string
              example: Test Company
        related_mid:
          type: integer
          example: 10100101
        related_dba:
          type: string
          example: 'Merchant DBA'
        description:
          type: string
        income:
          type: integer
          example: 499400
        expense:
          type: integer
          example: 454000
        percentage:
          type: integer
          example: 0
        agent_net:
          type: integer
          example: 45400
        is_recurring:
          type: boolean
          example: true
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Created date of line item"
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Last update date of line item"
        agents:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
              username:
                type: string
                example: john79
              full_name:
                type: string
                example: John Doe
              agent_net:
                type: integer
                example: 45400
              percentage:
                type: integer
                example: 0
        recurring_start_date:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Date of start recurring line item"
        recurring_payment_count:
          type: integer
          example: 100
          description: "Count of payments what was already done"
        recurring_max_payment_count:
          type: integer
          example: 100
          description: "Count of payments which will be done (this will be null if there is no limit)"
        recurring_period:
          type: string
          enum:
          - weekly
          - monthly
          - quarterly
          - yearly
          example: weekly
    ResidualTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 21
        name:
          type: string
          example: Test template
        creator_id:
          type: integer
          example: 1
        creator_name:
          type: string
          example: Jane Doe
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T12:04:40+05:00'
          description: "Created date of template"
        revision:
          type: integer
          example: 2
        rules:
          type: array
          items:
            - $ref: "#/components/schemas/TemplateRules"

    ResidualTemplateAssigned:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: janedoe
        full_name:
          type: string
          example: Jane Doe
        templates:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: test template
              version:
                type: integer
                example: 2
              processor_id:
                type: integer
                example: 12
              rules:
                type: array
                items:
                  - $ref: "#/components/schemas/TemplateRules"

    TemplateRules:
      type: object
      properties:
        column:
          type: string
          example: Agent Net
        rule:
          type: string
          example: decrease
        value:
          type: integer
          example: 100
        field:
          type: string
          example: "Income 3"

    BriefLeadInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Lead Id"

        
        mid:
          type: integer
          description: "Lead merchant Id"
        
        name:
          type: string
          description: "Lead name"
        group:
          $ref: "#/components/schemas/BriefGroupInfo"
        category:
          $ref: "#/components/schemas/BriefCategoryInfo"
        status:
          $ref: "#/components/schemas/BriefStatusInfo"
        campaign:
          $ref: "#/components/schemas/BriefCampaignInfo"
        source:
          $ref: "#/components/schemas/BriefSourceInfo"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Lead creation date (Y-m-d\TH:i:sP)'
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Lead modification date (Y-m-d\TH:i:sP)'
    BriefApplicationInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Application Id"
        name:
          type: string
          description: "Application name"
        e-sign:
          type: string
          description: "Is E-Sign available?"
    BriefCampaignInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Campaign Id"
        name:
          type: string
          description: "Campaign name"
    BriefSourceInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Source Id"
        name:
          type: string
          description: "Source name"
    BriefGroupInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Group Id"
        name:
          type: string
          description: "Group name"
    BriefCategoryInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Status category Id"
        name:
          type: string
          description: "Status category name"
    BriefStatusInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Status Id"
        name:
          type: string
          description: "Status name"
    CategoryWithStatuses:
      type: object
      properties:
        id:
          type: integer
          description: "Status category Id"
        name:
          type: string
          description: "Status category name"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/BriefStatusInfo"
    BriefTabInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Tab Id"
        name:
          type: string
          description: "Tab name"
    BriefUserInfo:
      type: object
      properties:
        id:
          type: integer
          description: "User Id"
          example: 123
        name:
          type: string
          description: "User name"
          example: "John Doe"
    BriefUserInfoWithClass:
      type: object
      properties:
        id:
          type: integer
          description: "User Id"
          example: 1
        username:
          type: string
          description: "User username"
          example: "manager1"
        full_name:
          type: string
          description: "User name"
          example: "John Doe"
        email:
          type: string
          description: "User email"
          example: example@iriscrm.com
        status:
          type: string
          description: "User status"
          example: "active"
        class:
          type: string
          description: "User class"
          example: "Manager"
    LeadFieldValue:
      type: object
      properties:
        uid:
          type: integer
          description: Field unique Id
          example: 4567
        id:
          type: string
          description: Field Id
        field:
          type: string
          description: Field name
        value:
          type: string
          description: Field value
    LeadField:
      type: object
      required:
        - tab
        - label
        - type
        - value
      properties:
        id:
          type: integer
          description: "Field Id"
          example: 1
          readOnly: true
        tab:
          type: integer
          description: "Field tab Id"
          example: 1
        label:
          type: string
          description: "Field label"
          example: "New Field"
        type:
          type: string
          description: "Field type"
          example: "Select"
          enum: [
            'DateCreate',
            'GoogleMaps',
            'jQDate',
            'Number',
            'Txt',
            'TxtArea',
            'TxtDollar',
            'TxtBalance',
            'TxtSIC',
            'TxtPercent',
            'TxtRouting',
            'TxtSecure',
            'TxtMasked',
            'Checkbox',
            'Select',
            'SelectRed',
            'Label',
            'Packages',
            'PhoneMask',
            'PrFormats',
            'QuickEmail',
            'QuickFax',
            'TimeZone'
          ]
        length:
          type: integer
          description: "Field size"
          example: 10
        default:
          type: string
          description: "Field default value"
          example: "Some Value"
        alignment:
          type: string
          description: "Field alignment"
          enum: [
            "",
            'left',
            'middle',
            'right',
            'left_column',
            'right_column',
            'float_left_whole_row',
            'float_left',
            'float_middle'
          ]
          example: "left"
        searchable:
          type: integer
          description: "Searchable field"
          enum: [
            0,
            1
          ]
          example: 1
        special:
          type: string
          description: "Field special value"
          example: "dba"
          enum: [
            "",
                        "mid",
                        "dba",
            "sales_number",
            "busaddress",
            "buscity",
            "busstate",
            "buszipcode",
            "bustype",
            "busproducts",
            "busmarkettype",
            "busstartdate",
            "sic",
            "taxid",
            "processor",
            "owner_fname",
            "owner_lname",
            "owner_title",
            "owner_ssn",
            "phone",
            "cellphone",
            "email",
            "contact",
            "contact_1",
            "contact_2",
            "avgtckt",
            "volume",
            "bank_name_on_account",
            "bank_account_type",
            "bank_account_owner_type",
            "aba_code",
            "account_number",
            "bank_name",
            "bank_city",
            "bank_state",
            "bank_zip",
            "LMS_FScore",
            "LMS_RefNum",
            "LR_MONTHLY_PAYMENT",
            "LR_EQUIPMENT",
            "LR_WIRE_TRANFER",
            "LR_PACK_FEE",
            "LR_CANCELLATION",
            "leadID"
          ]
        options:
          type: object
          properties:
            dropdown:
              type: object
              description: Add new list item
              properties:
                key:
                  type: string
                  example: 'key'
                value:
                  type: string
                  example: 'Option Value'
            dupecheck:
              type: boolean
              description: Enable dupecheck
              example: true
            contactid:
              type: string
              description: Id of contact field
              example: 1
            mask:
              type: string
              description: Field mask
              enum: [
                'validateSSN',
                'validateDate',
                'validateDate2',
                'validateZip5',
                'validateZip9'
              ]
            copy:
              type: object
              description: Copy button properties
              properties:
                title:
                  type: string
                  description: Button label
                  example:
                from:
                  type: object
                  description: Copy from
                  example:
                    1: 1
                    2: 2
                to:
                  type: object
                  description: Copy to
                  example:
                    1: 1
                    2: 2
            hyperlink:
              type: boolean
              description: Enable hyperlink
              example: true
            sms:
              type: boolean
              description: Enable SMS
              example: true
            dialer:
              type: boolean
              description: Enable dialer
              example: true
            googlemaps:
              type: object
              description: Google Maps search properties
              example:
                1: 1
                2: 2
            zip_code_field:
              type: integer
              description: Zip code field ID for TimeZone field only
              example: 1
            zipcode_autocomplete:
              type: object
              description: ZIP Code autofill properties
              properties:
                city:
                  type: object
                  description: City fields
                  example:
                    1: 1
                    2: 2
                state:
                  type: object
                  description: State fields
                  example:
                    1: 1
                    2: 2
                zipcode:
                  type: object
                  description: Zipcode fields
                  example:
                    1: 1
                    2: 2
        order:
          type: integer
          example: 1
          readOnly: true
        readOnly:
          type: boolean
          description: Whether the field is read only
          example: false
          readOnly: true
        required:
          type: boolean
          description: Whether the field is required
          example: true
          readOnly: true
    LeadFieldOrder:
      type: object
      required:
        - value
      properties:
        value:
          type: integer
          description: "New order position of lead field"
          example: 1
        type:
          type: string
          enum: [
            "increment",
            "decrement"
          ]
          description: "Type of changing order position"
          example: "increment"
          default: null
    LeadFieldTab:
      type: object
      required:
      - position
      - class
      - name
      - order
      properties:
        id:
          type: integer
          description: "Tab Id"
          example: 1
          readOnly: true
        active:
          type: integer
          description: "Active tab"
          enum: [
            0,
            1
          ]
          example: 1
        position:
          type: integer
          description: "Tab position"
          example: 1
          enum: [1 = left, 2 = bottom right, 3 = middle right, 4 = top right]
        class:
          type: string
          description: "Tab class"
          example: "documents"
          enum: [''' - empty string for TAB', 'set', 'documents', 'altdocs', 'notes']
        name:
          type: string
          description: "Tab class"
          example: "New tab"
        order:
          type: integer
          description: "Tab order"
          example: 1
    ApplicationField:
      type: object
      required:
      - from
      properties:
        id:
          type: integer
          description: "Application field Id"
          example: 1
          readOnly: true
        from:
          type: integer
          description: "Application field from field Id"
          example: 1
        record:
          type: integer
          description: "Application field record"
          example: 1
        to:
          type: string
          description: "Name of mapped field"
          example: "Test"
        toAlt:
          type: string
          description: "Alt of mapped field"
          example: "Alt test"
        toType:
          type: string
          description: "Type of mapped field"
          example: "Text"
        special:
          type: string
          description: "Special type of mapped field"
          example: "chk"
          default: null
          enum: [
            null,
            'chk',
            'd2t',
            'salesrep',
            'salesrep_position',
            'salesrep_email',
            'salesrep_phone',
            'salesrep_mobile',
            'salesrep_fax',
            'salesrep_ext',
            'leading_comma',
            'date_mdY',
            'date_mdy',
          ]
        info:
          readOnly: true
          type: array
          items:
            type: object
            properties:
              field_name:
                type: string
                description: "Field name"
                example: "Business Address"
              field_type:
                type: string
                description: "Field type"
                enum: [
                  Text,
                  Checkbox
                ]
                example: Text
              left:
                type: integer
                description: "Padding from left"
                example: 19.962399999999999
              right:
                type: integer
                description: "Padding from right"
                example: 303.43799999999999
              top:
                type: integer
                description: "Padding from top"
                example: 686.60500000000002
              bottom:
                type: integer
                description: "Padding from bottom"
                example: 673.24699999999996
              field_height:
                type: integer
                description: "Height of field"
                example: 13.35797
              field_width:
                type: integer
                description: "Width of field"
                example: 283.47559999999999
              page_number:
                type: integer
                description: "Page number"
                example: 1
              page_height:
                type: integer
                description: "Page height"
                example: 792
              page_width:
                type: integer
                description: "Page width"
                example: 612
              page_rotation:
                type: integer
                description: "Page rotation"
                example: 0
              export_value:
                type: string
                description: "Export value"
                example: Yes
              tooltip:
                type: string
                description: "Field tooltip"
                example: Test
              duplicates:
                type: array
                items:
                  type: object
                  properties:
                    instance:
                      type: integer
                      description: "Activity Id"
                      example: 2
                    left:
                      type: integer
                      description: "Padding from left"
                      example: 542.962399999999999
                    right:
                      type: integer
                      description: "Padding from right"
                      example: 596.43799999999999
                    top:
                      type: integer
                      description: "Padding from top"
                      example: 107.60500000000002
                    bottom:
                      type: integer
                      description: "Padding from bottom"
                      example: 95.24699999999996
                    height:
                      type: integer
                      description: "Height of field"
                      example: 11.35797
                    width:
                      type: integer
                      description: "Width of field"
                      example: 53.47559999999999
                    page_number:
                      type: integer
                      description: "Page number"
                      example: 4
    StatusActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        changedBy:
          type: integer
          description: "User Id"
          example: 1
        changedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Deleted date (Y-m-d\TH:i:sP)'
        oldStatus:
          type: string
          example: 'Old'
          description: 'Old status'
        old_status_id:
          type: integer
          description: "Old Status Id"
          example: 1
        newStatus:
          type: string
          example: 'New'
          description: 'New status'
        new_status_id:
          type: integer
          description: "New Status Id"
          example: 2
    FieldRevisionActivity:
      type: object
      properties:
        field:
          type: object
          properties:
            id:
              type: integer
              description: "Field Id"
              example: 11
            label:
              type: string
              description: "Field Label"
              example: Default Field
        tab:
          type: object
          properties:
            id:
              type: integer
              description: "Tab Id"
              example: 11
            name:
              type: string
              description: "Tab Name"
              example: Default Tab
        changed_from:
          type: string
          description: "Field Value Before"
          example: Empty
        changed_to:
          type: string
          description: "Field Value After"
          example: New Field Value
        source:
          type: string
          description: "Source of change"
        changed_by:
          type: object
          properties:
            id:
              type: integer
              description: "User Id"
              example: 11
            name:
              type: string
              description: "User Name"
              example: Default Field
    CampaignActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        newValue:
          type: string
          description: "New value of activity"
          example: "Test"
        assignedBy:
          type: integer
          description: "User Id"
          example: 1
        assignedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Assigned date (Y-m-d\TH:i:sP)'
    SourceActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        newValue:
          type: string
          description: "New value of activity"
          example: "Test"
        assignedBy:
          type: integer
          description: "User Id"
          example: 1
        assignedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Assigned date (Y-m-d\TH:i:sP)'
    LinksActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        status:
          type: string
          enum: [
            'Linked',
            'Unlinked'
          ]
          description: "Status of link"
          example: "Linked"
        lead:
          type: string
          description: "Lead Id"
          example: "123"

        
        merchant:
          type: string
          description: "Merchant Id"
          example: "123"
        
        linkedBy:
          type: integer
          description: "User Id"
          example: 1
        linkedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Linking date (Y-m-d\TH:i:sP)'
    DeletionActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        deletedId:
          type: integer
          description: "User Id"
          example: 1
        deletedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Date of deletion (Y-m-d\TH:i:sP)'
        undeletedId:
          type: integer
          description: "User Id"
          example: 1
        undeletedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Date of undeletion (Y-m-d\TH:i:sP)'
    DuplicateActivity:
      type: object
      properties:
        id:
          type: integer
          description: "Activity Id"
          example: 1
        oldLeadId:
          type: integer
          description: "Old lead Id"
          example: 1
        newLeadId:
          type: integer
          description: "New lead Id"
          example: 1
        duplicatedBy:
          type: integer
          description: "User Id"
          example: "1"
        duplicatedAt:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Date of duplication (Y-m-d\TH:i:sP)'
    BriefEmailTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Email template title"
    BriefSmsTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "SMS template title"
    LeadAppointment:
      type: object
      properties:
        id:
          type: integer
          description: Appointment Id
        user:
          deprecated: true
          $ref: "#/components/schemas/BriefUserInfo"
        set_for:
          deprecated: true
          $ref: "#/components/schemas/BriefUserInfo"
        set_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment creation date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        set_by:
          $ref: "#/components/schemas/BriefUserInfo"
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment modification date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        modified_by:
          $ref: "#/components/schemas/BriefUserInfo"
        text:
          type: string
          description: Appointment description
        date:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        date_end:
          type: string
          format: date-time
          example: '2019-01-02T12:04:40+05:00'
          description: Appointment end date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        done:
          type: string
          description: Is appointment done?
          enum: [Yes, No]
          example: No
        confirmed:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment confirmed date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        confirmed_by:
          $ref: "#/components/schemas/BriefUserInfo"
        seen:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment seen date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        seen_by:
          $ref: "#/components/schemas/BriefUserInfo"
        rescheduled:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: Appointment rescheduled date and time in format ISO 8601 (Y-m-d\TH:i:sP)
        rescheduled_by:
          $ref: "#/components/schemas/BriefUserInfo"
        rescheduled_count:
          type: integer
          example: 0
    FileLabel:
      type: object
      properties:
        id:
          type: integer
          description: Label Id
          example: 1
        order:
          type: integer
          description: Label display order
          example: 1
        name:
          type: string
          description: "Label name"
          example: Default
    WebFormSession:
      type: object
      properties:
        id:
          type: integer
          description: "Session Id"
          example: 1
        hash:
          type: string
          description: "Hash"
          example: "oplcfsgi"
        web_form:
          type: object
          properties:
            id:
              type: integer
              description: "Web form Id"
              example: 2
            name:
              type: string
              description: "Web form name"
            email_template_id:
              type: integer
              description: "Web form email template id"
              example: 3
        web_form_default_id:
          type: integer
          description: "Web form default id"
          example: 4
        lead:
          type: object
          properties:
            id:
              type: integer
              description: "Lead Id"
              example: 5
            dba:
              type: string
              description: "Lead dba"
        status:
          type: string
          description: "Status"
        archived:
          type: boolean
          description: "Is archived"
        created_by:
          type: object
          properties:
            id:
              type: integer
              description: "User Id"
              example: 6
            name:
              type: string
              description: "User name"
        created_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Session creation date (Y-m-d\TH:i:sP)'
        updated_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Session update date (Y-m-d\TH:i:sP)'
        deleted_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Session deletion date (Y-m-d\TH:i:sP)'


    Ticket:
      type: object
      properties:
        id:
          type: integer
          description: "Ticket id"
          readOnly: true
          example: 1
        subject:
            type: string
            description: "Ticket subject"
            example: "Ticket subject"
        description:
          type: string
          description: "Ticket description"
          example: "Ticket description"
        status:
          type: object
          properties:
            id:
              type: integer
              description: "Status id"
              example: 1
            name:
              type: string
              description: "Status name"
              example: "New"
        type:
          type: object
          properties:
            id:
              type: integer
              description: "Type id"
              example: 1
            name:
              type: string
              description: "Ticket type"
              example: "Test ticket type"
        group:
          type: object
          properties:
            id:
              type: integer
              description: "Group id"
              example: 1
            name:
              type: string
              description: "Group name"
              example: "Test group"
        priority:
          type: object
          properties:
            id:
              type: integer
              description: "Priority id"
              example: 1
            name:
              type: string
              description: "Priority name"
              example: "Medium"
        lead_id:
          type: integer
          description: "Assigned Lead ID"
          example: 3421
        
        mid:
          type: integer
          description: "Assigned Merchant ID"
          example: 10204324
        merchantVisible:
          type: boolean
          description: "Indicates if the ticket is visible to Merchant users"
          example: true

        
    TicketCreatedBlock:
      type: object
      properties:
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket created date"
        created_by:
          type: integer
          description: "Ticket creator id"
          example: 1

    BriefTicketInfo:
      allOf:
        - $ref: "#/components/schemas/Ticket"
        - $ref: "#/components/schemas/TicketCreatedBlock"
        - type: object
          properties:
            modified:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket modified date"
            modified_by:
              type: integer
              description: "Id of user who made last change"
              example: 1
            resolved:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket resolved date"
            resolved_by:
              type: integer
              description: "Id of user who made last change"
              example: 1
            due_date:
              type: string
              format: date
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket due date"
            due:
              type: string
              example: '7 days'
              description: "Ticket SLA"
            only_business_days:
              type: boolean
              example: true
              description: "Calculate only business days"
            last_comment:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Ticket last comment date"
            files_count:
              type: integer
              description: "Count of ticket files"
              example: 12
    BriefTicketTypeInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Ticket type id"
          example: 1
        name:
          type: string
          description: "Ticket type name"
          example: "Ticket type name"
        description:
          type: string
          description: "Ticket type description"
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
        daysToResolve:
          type: integer
          description: "Days to Resolve"
          example: 10
        only_business_days:
          type: boolean
          description: "Calculate only business days"
          example: true
        status:
          type: object
          properties:
            id:
              type: integer
              description: "Status id"
              example: 1
            name:
              type: string
              description: "Status name"
              example: "New"
        priority:
          type: object
          properties:
            id:
              type: integer
              description: "Priority id"
              example: 1
            name:
              type: string
              description: "Priority name"
              example: "Medium"
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket type created date"
        createdBy:
          type: integer
          description: "Ticket type creator id"
          example: 1
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket type modified date"
        modifiedBy:
          type: integer
          description: "Id of user who made last change"
          example: 1
        order:
          type: integer
          description: "Ticket type order"
          example: 1111
        permissions:
          type: array
          items:
            type: integer
            example: 1
        due_date:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket due date"
        assignees:
          type: object
          properties:
            everyTime:
              type: array
              items:
                type: integer
                example: 2
            roundRobin:
              type: array
              items:
                type: integer
                example: 3
            classEveryTime:
              type: array
              items:
                type: integer
                example: 2
            classRoundRobin:
              type: array
              items:
                type: integer
                example: 3
    TicketTypeRequest:
      type: object
      properties:
        name:
          type: string
          description: "Ticket type name"
          example: "Ticket type name"
        description:
          type: string
          description: "Ticket type description"
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
        daysToResolve:
          type: integer
          description: "Days to Resolve"
          example: 10
        only_business_days:
          type: boolean
          description: "Calculate only business days"
          example: true
        status:
          type: string
          description: "Status"
          enum: [active, inactive]
          example: active
        priority:
          type: integer
          description: "Priority (0 - Normal, 1 - Medium, 2 - Rush)"
          enum: [0, 1, 2]
          example: 1
        permissions:
          type: array
          items:
            type: integer
            example: 1
        assignees:
          type: object
          properties:
            everyTime:
              type: array
              items:
                type: integer
                example: 2
            roundRobin:
              type: array
              items:
                type: integer
                example: 3
            classEveryTime:
              description: Classes that will be assigned to a ticket every time
              type: array
              items:
                type: integer
                example: 2
            classRoundRobin:
              description: Classes that will be assigned to a ticket by round robin algorithm
              type: array
              items:
                type: integer
                example: 3
    BriefTicketComments:
      type: object
      properties:
        id:
          type: integer
          description: "Comment id"
          example: 1
        ticketId:
          type: integer
          description: "Ticket id"
          example: 2
        comment:
          type: string
          description: "Comment text"
          example: 'Comment text'
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Comment created date"
        createdBy:
          type: integer
          description: "Comment creator id"
          example: 1
        modified:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Comment modified date"
        modifiedBy:
          type: integer
          description: "Id of user who left comment"
          example: 1
        files:
          type: array
          items:
          - $ref: "#/components/schemas/File"
        preview_images:
          type: array
          items:
          - $ref: "#/components/schemas/File"
        
        merchantVisible:
          type: boolean
          description: "Indicates if the comment is visible to Merchant users"
          example: true

        
    BriefTicketUsersInfo:
      type: object
      properties:
        id:
          type: integer
          description: "User id"
          example: 1
        name:
          type: string
          description: "User name"
          example: 1
        class:
          type: string
          description: "User class"
          example: 'Support'
    BriefTicketChecklistInfo:
      type: object
      properties:
        id:
          type: integer
          description: "Checklist item Id"
          readOnly: true
          example: 1
        template_id:
          type: integer
          description: "Checklist template Id"
          readOnly: true
          example: 12
        name:
          type: string
          description: "Checklist item name"
          example: Test
        index:
          type: integer
          description: "Index in list"
          example: 0
        required:
          type: boolean
          description: "Flag is checklist are required"
          example: true
        fileRequired:
          type: boolean
          description: "Flag is checklist file are required"
          example: true
        commentRequiredToDoneTicket:
          type: boolean
          description: "Flag is comment are required to resolve ticket"
          example: true
        commentRequiredToDoneItem:
          type: boolean
          description: "Flag is checklist are required to resolve checklist item"
          example: true
        commentedAt:
          format: date-time
          readOnly: true
          example: '2019-01-01T12:04:40+05:00'
          description: "Datetime when user have commented checklist item"
        commentedBy:
          type: integer
          readOnly: true
          description: "User Id of user who have commented checklist item"
          example: 123
    ChecklistFullInfo:
      allOf:
        - $ref: "#/components/schemas/BriefTicketChecklistInfo"
        - type: object
          properties:
            completed:
              type: boolean
              description: "Flag is checklist are done"
              example: true
            completed_by:
              type: integer
              readOnly: true
              description: "User ID who compleated the checklist"
              example: 123
            completed_at:
              format: date-time
              readOnly: true
              example: '2019-01-01T12:04:40+05:00'
              description: "Datetime when user have completed the checklist item"
            files:
              type: array
              items:
                $ref: "#/components/schemas/File"
    CheckListRequest:
      type: object
      properties:
        index:
          type: integer
          description: "Checklist item index"
          example: 1
        files:
          type: array
          description: "Checklist files (Deprecated, use 'extended_files' instead)"
          items:
            type: string
            example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
        extended_files:
          type: array
          description: "Files data"
          items:
            type: object
            properties:
              tmp_name:
                type: string
                description: "Name of the temporary file"
                example: "15dfd5e51a10145.87303877_ticket_file.png"
              title:
                type: string
                description: "Name of the file"
                example: "file_name"
              label:
                type: int
                description: "File Label Id"
                example: 1
        attached_files:
          type: array
          items:
            type: integer
            description: "IDs of existing files"
            example: 123
        completed:
          type: boolean
          description: "Flag checklist are item completed"
          example: true
        comment:
          type: string
          description: "Comment for checklist item"
          example: 'Test comment'

    TicketSubscriptionData:
      type: object
      properties:
        ticket_url:
          type: string
          example: "http://iris/v2/helpdesk/ticket/1"
        assignedUsers:
          $ref: "#/components/schemas/UserListStructure"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        preview_images:
          type: array
          items:
            - $ref: "#/components/schemas/File"
        due_date:
          type: string
          format: date
          example: '2019-01-01T12:04:40+05:00'
          description: "Ticket due date"
        due:
          type: string
          example: '7 days'
          description: "Ticket SLA"
        only_business_days:
          type: boolean
          example: true
          description: "Calculate only business days"

    TicketDetail:
      type: object
      properties:
        general:
          allOf:
            - $ref: "#/components/schemas/BriefTicketInfo"
            - type: object
              properties:
                created_username:
                  type: string
                  example: John Doe
                modified_username:
                  type: string
                  example: Jane Doe
                resolved_username:
                  type: string
                  example: Jack Doe
          items:
            - $ref: "#/components/schemas/File"
        checklist:
          type: array
          items:
            $ref: "#/components/schemas/ChecklistFullInfo"
    TypeDetail:
      type: object
      properties:
        general:
          $ref: "#/components/schemas/BriefTicketTypeInfo"
        checklist:
          type: array
          items:
            $ref: "#/components/schemas/ChecklistFullInfo"
    CommentSubscriptionData:
      type: object
      properties:
        ticket_url:
          type: string
          example: "http://iris/v2/helpdesk/ticket/1"
        assignedUsers:
          $ref: "#/components/schemas/UserListStructure"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        merchantVisible:
          type: boolean
          description: "Indicates if the comment is visible for Merchant users"
          example: true

    BriefSubscriptionInfo:
      type: object
      required:
        - url
        - events
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
          description: "Subscription Id"
        url:
          type: string
          description: Subscription URL
          example: https://example.com/hook
        events:
          type: array
          description: Subscription Events
          items:
            type: string
            enum: [
              'subscription.test',
              'api.updated',
              'lead.created',
              'lead.updated',
              'lead.deleted',
              'lead.restored',
              'lead.status.updated',
              'lead.note.added',
              'lead.user.assigned',
              'lead.user.unassigned',
              'lead.document.uploaded',
              'lead.email.received',
              'lead.signature.generated',
              'lead.signature.opened',
              'lead.signature.signed',

                            'turboapp.submitted',
              'turboapp.updated',
              'turboapp.approved',
              'turboapp.declined',
              'turboapp.equipment.created',
              'turboapp.equipment.updated',
              'residuals.report.published',
              'residuals.lineitem.added',
              'chargeback.added',
              'chargeback.updated',
              'chargeback.reminder',
              'retrieval.added',
              'retrieval.updated',
              'retrieval.reminder',
              
              'ticket.created',
              'ticket.updated',
              'ticket.resolved',
              'ticket.commented',
              'ticket.comment.edited',
              'ticket.checklist.updated',
            ]
        options:
          type: object
          description: "Options for each event"
          properties:
            lead.status.updated:
              type: object
              properties:
                sourceStatuses:
                  type: array
                  description: "Statuses from which a lead should be updated to report the update (any if not specified)"
                  items:
                    type: integer
                    example: 1
                targetStatuses:
                  type: array
                  description: "Statuses to which a lead should be updated to report the update (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.created:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses with which a created lead should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.note.added:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses of leads whose added notes should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.document.uploaded:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses of leads whose uploaded documents should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
            lead.email.received:
              type: object
              properties:
                statuses:
                  type: array
                  description: "Statuses of leads whose received emails should be reported (any if not specified)"
                  items:
                    type: integer
                    example: 1
        multiple_at_once:
          type: boolean
          description: "Report multiple items in one request"
        status:
          type: boolean
          description: "Enable/Disable subscription"
        deactivation_reason:
          type: string
          description: "Deactivation reason. Required if `status` is `False`"

    Hook:
      type: object
      properties:
        requestId:
          type: integer
          example: 1
          description: "Request ID"
        event:
          type: string
          example: ''
          description: "Event ID"

    TestSubscription:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'subscription.test'
              description: "Event ID"
        data:
          type: object
          properties:
            message:
              type: string
              example: "Test event data from https://iriscrm.com"

    ApiUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'api.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            version:
              type: string
              example: 1.0.0
              description: "Version number"
            update:
              type: string
              example: 'required'
              enum: [
                'required',
                'optional'
              ]
              description: "Should users do an update of their API clients functional"
            details:
              type: array
              items:
                type: object
                properties:
                  description:
                    type: string
                    example: "Improving a change log."
                    description: "Description of update"
                  link:
                    type: string
                    example: "https://iriscrm.com/api#/paths/~1subscriptions~1sample~1api.updated/get"
                    description: "Link to endpoint documentation"
                  type:
                    type: string
                    example: "create"
                    enum: [
                      'create',
                      'update'
                    ]
                    description: "Type of API update"
            createdAt:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Date and time of creation (ISO 8601)"

    LeadCreatedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.created'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              $ref: "#/components/schemas/FullLeadSubscription"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                $ref: "#/components/schemas/FullLeadSubscription"

    LeadUpdatedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/FullLeadSubscription"
                - type: object
                  properties:
                    updated_at:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of creation (ISO 8601)"
                    updated_by:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/FullLeadSubscription"
                  - type: object
                    properties:
                      updated_at:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of creation (ISO 8601)"
                      updated_by:
                        $ref: "#/components/schemas/UserStructure"

    LeadDeletedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.deleted'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    deletedBy:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      deletedBy:
                        $ref: "#/components/schemas/UserStructure"

    LeadRestoredEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.restored'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    restoredAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of creation (ISO 8601)"
                    restoredBy:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      restoredAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of creation (ISO 8601)"
                      restoredBy:
                        $ref: "#/components/schemas/UserStructure"

    LeadStatusUpdatedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.status.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/FullLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    previousStatus:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: "Status ID"
                        name:
                          type: string
                          example: "Status One"
                          description: "Status Name"
                    newStatus:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                          description: "Status ID"
                        name:
                          type: string
                          example: "Status Two"
                          description: "Status Name"
                    statusUpdatedAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of creation (ISO 8601)"
                    statusUpdatedBy:
                      $ref: "#/components/schemas/UserStructure"
                    salesRep:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/FullLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      previousStatus:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: "Status ID"
                          name:
                            type: string
                            example: "Status One"
                            description: "Status Name"
                      newStatus:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                            description: "Status ID"
                          name:
                            type: string
                            example: "Status Two"
                            description: "Status Name"
                      statusUpdatedAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of creation (ISO 8601)"
                      statusUpdatedBy:
                        $ref: "#/components/schemas/UserStructure"
                      salesRep:
                        $ref: "#/components/schemas/UserStructure"

    LeadNoteAddedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.note.added'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    note:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: "Note ID"
                        name:
                          type: string
                          example: "Note text"
                          description: "Note text"
                        pinned:
                          type: boolean
                          example: true
                          description: "Whether The Note Is Pinned"
                        images:
                          type: array
                          items:
                            type: string
                            example: "http://dummy.url/fake.jpeg"
                        createdAt:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: "Date and time of creation (ISO 8601)"
                        createdBy:
                          $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    properties:
                      note:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: "Note ID"
                          name:
                            type: string
                            example: "Note text"
                            description: "Note text"
                          pinned:
                            type: boolean
                            example: true
                            description: "Whether The Note Is Pinned"
                          images:
                            type: array
                            items:
                              type: string
                              example: "http://dummy.url/fake.jpeg"
                          createdAt:
                            type: string
                            format: date-time
                            example: '2019-01-01T12:04:40+05:00'
                            description: "Date and time of creation (ISO 8601)"
                          createdBy:
                            $ref: "#/components/schemas/UserStructure"

    LeadUserAssignedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.user.assigned'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    assignedAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "User assigned date"
                    user:
                      $ref: "#/components/schemas/UserStructure"
                    assignedBy:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    properties:
                      assignedAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "User assigned date"
                      user:
                        $ref: "#/components/schemas/UserStructure"
                      assignedBy:
                        $ref: "#/components/schemas/UserStructure"

    LeadUserUnassignedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.user.unassigned'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    unassignedAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "User unassigned date"
                    user:
                      $ref: "#/components/schemas/UserStructure"
                    unassignedBy:
                      $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                    properties:
                      unassignedAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "User unassigned date"
                      user:
                        $ref: "#/components/schemas/UserStructure"
                      unassignedBy:
                        $ref: "#/components/schemas/UserStructure"

    LeadDocumentUploadedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.document.uploaded'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              allOf:
                - $ref: "#/components/schemas/ShortLeadSubscription"
                - type: object
                  description: "'lead' property is passed when 'Multiple at once' feature is disabled"
                  properties:
                    document:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: "Document ID"
                        label:
                          type: string
                          example: "Label"
                          description: "Document label"
                        filename:
                          type: string
                          example: "file.zip"
                          description: "Filename"
                        file:
                          type: string
                          example: "http://dummy.url/file.zip"
                          description: "File url"
                        uploadedAt:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: "Date and time of uploading (ISO 8601)"
                        uploadedBy:
                          $ref: "#/components/schemas/UserStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                allOf:
                  - $ref: "#/components/schemas/ShortLeadSubscription"
                  - type: object
                    properties:
                      document:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                            description: "Document ID"
                          label:
                            type: string
                            example: "Label"
                            description: "Document label"
                          filename:
                            type: string
                            example: "file.zip"
                            description: "Filename"
                          file:
                            type: string
                            example: "http://dummy.url/file.zip"
                            description: "File url"
                          uploaded_at:
                            type: string
                            format: date-time
                            example: '2019-01-01T12:04:40+05:00'
                            description: "Date and time of uploading (ISO 8601)"
                          uploaded_by:
                            $ref: "#/components/schemas/UserStructure"

    LeadEmailReceivedEventInfo:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.email.received'
              description: "Event ID"
        data:
          type: object
          properties:
            lead:
              type: object
              description: "'lead' property is passed when 'Multiple at once' feature is disabled"
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Lead ID"
                lead_url:
                  type: string
                  example: "http://iris/v2/lead/view/1"
                  description: "Lead URL"
                name:
                  type: string
                  example: "Super Lead"
                  description: "Lead Name"
                emailAddress:
                  type: string
                  example: "lead@email.com"
                  description: "Lead Default Email"
                contact:
                  type: string
                  example: "John Doe"
                  description: "Lead Default Contact Name"
                phone:
                  type: string
                  example: "555-555-5555"
                  description: "Lead Default Contact Phone Number"
                address:
                  type: object
                  properties:
                    address:
                      type: string
                      example: "86th street, apt. 1"
                      description: "Lead Default Address"
                    city:
                      type: string
                      example: "Brooklyn"
                      description: "Lead Default City"
                    state:
                      type: string
                      example: "NY"
                      description: "Lead Default State"
                    zip:
                      type: string
                      example: "10001"
                      description: "Lead Default ZIP"
                email:
                  type: object
                  properties:
                    from:
                      type: string
                      example: "John Doe <john@doe.com>"
                      description: "Sent from (name and email)"
                    to:
                      type: string
                      example: "jack@sparrow.com"
                      description: "Sent to(email)"
                    subject:
                      type: string
                      example: "Subject"
                      description: "Email subject"
                    bodyText:
                      type: string
                      example: "Pure text"
                      description: "Email message without html"
                    bodyHtml:
                      type: string
                      example: "<html>Html content</html>"
                      description: "Email message including html"
                    sentAt:
                      type: string
                      format: date-time
                      example: '2019-01-01T12:04:40+05:00'
                      description: "Date and time of receiving the email (ISO 8601)"
                assignedUsers:
                  $ref: "#/components/schemas/UserListStructure"
            leads:
              type: array
              description: "'leads' property is passed when 'Multiple at once' feature is enabled"
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Lead ID"
                  lead_url:
                    type: string
                    example: "http://iris/v2/lead/view/1"
                    description: "Lead URL"
                  name:
                    type: string
                    example: "Super Lead"
                    description: "Lead Name"
                  emailAddress:
                    type: string
                    example: "lead@email.com"
                    description: "Lead Default Email"
                  contact:
                    type: string
                    example: "John Doe"
                    description: "Lead Default Contact Name"
                  phone:
                    type: string
                    example: "555-555-5555"
                    description: "Lead Default Contact Phone Number"
                  address:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "86th street, apt. 1"
                        description: "Lead Default Address"
                      city:
                        type: string
                        example: "Brooklyn"
                        description: "Lead Default City"
                      state:
                        type: string
                        example: "NY"
                        description: "Lead Default State"
                      zip:
                        type: string
                        example: "10001"
                        description: "Lead Default ZIP"
                  email:
                    type: object
                    properties:
                      from:
                        type: string
                        example: "John Doe <john@doe.com>"
                        description: "Sent from (name and email)"
                      to:
                        type: string
                        example: "jack@sparrow.com"
                        description: "Sent to(email)"
                      subject:
                        type: string
                        example: "Subject"
                        description: "Email subject"
                      bodyText:
                        type: string
                        example: "Pure text"
                        description: "Email message without html"
                      bodyHtml:
                        type: string
                        example: "<html>Html content</html>"
                        description: "Email message including html"
                      sentAt:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of receiving the email (ISO 8601)"
                  assignedUsers:
                    $ref: "#/components/schemas/UserListStructure"

    
    TurboAppSubmitted:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.submitted'
              description: "Event ID"
        data:
          type: object
          properties:
            applications:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Application ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  submission_id:
                    type: string
                    example: "sajjcjasdhrccer"
                    description: "Application submission identifier"
                  dba:
                    type: string
                    example: "Company name"
                    description: "Merchant name"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  createdAt:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of creation (ISO 8601)"
                  createdBy:
                    $ref: "#/components/schemas/UserStructure"
                  finishedAt:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of submission (ISO 8601)"
                  finishedBy:
                    $ref: "#/components/schemas/UserStructure"
    TurboAppUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            accounts:
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Account ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  dba:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  mid:
                    type: integer
                    example: 123456789
                    description: "Merchant ID"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  comments:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of comment (ISO 8601)"
                      co:
                        type: string
                        example: "SHD"
                      text:
                        type: string
                        example: "Approved"
                  activation_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  application_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  contact_name:
                    type: string
                    example: 'Jon Doe'
                  salesman:
                    type: string
                    example: 'Jon Doe'
                  updatedAt:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account update (ISO 8601)"
    TurboAppApproved:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.approved'
              description: "Event ID"
        data:
          type: object
          properties:
            accounts:
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Account ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  processor:
                    type: string
                    example: "Processor Name"
                    description: "Processor name"
                  dba:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  mid:
                    type: integer
                    example: 123456789
                    description: "Merchant ID"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  activation_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  application_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Approved"
                  contact_name:
                    type: string
                    example: 'Jon Doe'
                  contact_address:
                    type: string
                    example: '47 W 13th St, New York, NY 10011, USA'
                  contact_phone:
                    type: string
                    example: '111-111-1111'
                  salesman:
                    type: string
                    example: 'Jon Doe'
                  co_name:
                    type: string
                    example: 'Jon Doe'
                  approved_at:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account approve (ISO 8601)"
                  legal_name:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  comments:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of comment (ISO 8601)"
                      co:
                        type: string
                        example: "SHD"
                      text:
                        type: string
                        example: "Approved"
                  entitlements:
                    type: object
                    properties:
                      card_type:
                        type: string
                        example: 'Card type'
                      srv:
                        type: string
                        example: 'SRV'
                      proc_flag:
                        type: string
                        example: 'Flag'
                  equipment_list:
                    description: "Equipment list"
                    type: array
                    items:
                      $ref: "#/components/schemas/EquipmentItem"
                  users:
                    type: array
                    items:
                      type: string
                      example: 'John Doe (Sales Reps)'
                  date_submitted:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account submit (ISO 8601)"
                  date_decision:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of decision (ISO 8601)"
                  mcc_code:
                    type: string
                    example: '5441'
                    description: "MCC code"
                  annual_sales:
                    type: string
                    example: '$100000'
                    description: "Annual sales"
                  average_ticket:
                    type: string
                    example: '$100000'
                    description: "Average ticket"
                  tier:
                    type: string
                    example: 'Tier 1'
                  tier_status:
                    type: string
                    example: 'N/A'
    TurboAppDeclined:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.declined'
              description: "Event ID"
        data:
          type: object
          properties:
            accounts:
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "Account ID"
                  application_url:
                    type: string
                    example: "http://iris/office/getApp/acxcxsdalskdjak"
                    description: "Application URL"
                  identifier:
                    type: string
                    example: "acxcxsdalskdjak"
                    description: "Application identifier"
                  processor:
                    type: string
                    example: "Processor Name"
                    description: "Processor name"
                  dba:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  mid:
                    type: integer
                    example: 123456789
                    description: "Merchant ID"
                  lid:
                    type: integer
                    example: 11
                    description: "Lead ID related to the application"
                  activation_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Declined"
                  application_status:
                    type: object
                    properties:
                      old:
                        type: string
                        example: "In Process"
                      new:
                        type: string
                        example: "Declined"
                  contact_name:
                    type: string
                    example: 'Jon Doe'
                  contact_address:
                    type: string
                    example: '47 W 13th St, New York, NY 10011, USA'
                  contact_phone:
                    type: string
                    example: '111-111-1111'
                  salesman:
                    type: string
                    example: 'Jon Doe'
                  co_name:
                    type: string
                    example: 'Jon Doe'
                  declined_at:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account was declined (ISO 8601)"
                  legal_name:
                    type: string
                    example: "Company Name"
                    description: "Merchant name"
                  comments:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Date and time of comment (ISO 8601)"
                      co:
                        type: string
                        example: "SHD"
                      text:
                        type: string
                        example: "Declined"
                  entitlements:
                    type: object
                    properties:
                      card_type:
                        type: string
                        example: 'Card type'
                      srv:
                        type: string
                        example: 'SRV'
                      proc_flag:
                        type: string
                        example: 'Flag'
                  users:
                    type: array
                    items:
                      type: string
                      example: 'John Doe (Sales Reps)'
                  date_submitted:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of account submit (ISO 8601)"
                  date_decision:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Date and time of decision (ISO 8601)"
                  mcc_code:
                    type: string
                    example: '5441'
                    description: "MCC code"
                  annual_sales:
                    type: string
                    example: '$100000'
                    description: "Annual sales"
                  average_ticket:
                    type: string
                    example: '$100000'
                    description: "Average ticket"
                  tier:
                    type: string
                    example: 'Tier 1'
                  tier_status:
                    type: string
                    example: 'N/A'
    TurboAppEquipmentCreated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.equipment.created'
              description: "Event ID"
        data:
          type: object
          properties:
            account:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Account ID"
                dba:
                  type: string
                  example: "Company Name"
                  description: "Merchant name"
                mid:
                  type: integer
                  example: 123456789
                  description: "Merchant ID"
                mcc_code:
                  type: string
                  example: '5441'
                  description: "MCC code"
            equipment_list:
              description: "Equipment list"
              type: array
              items:
                $ref: "#/components/schemas/EquipmentItem"
    TurboAppEquipmentUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'turboapp.equipment.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            account:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Account ID"
                dba:
                  type: string
                  example: "Company Name"
                  description: "Merchant name"
                mid:
                  type: integer
                  example: 123456789
                  description: "Merchant ID"
                mcc_code:
                  type: string
                  example: '5441'
                  description: "MCC code"
            equipment_list:
              description: "Equipment list"
              type: array
              items:
                $ref: "#/components/schemas/EquipmentItem"
    EquipmentItem:
      type: object
      properties:
        tid:
          type: string
          example: '123'
          description: 'Terminal ID. Note: available only for: `Fiserv North`'
        description:
          type: string
          example: 'Some long description'
          description: 'Terminal Description. Note: available only for: `Fiserv North`'
        id:
          type: string
          description: "Terminal ID. Note: available only for: `TSYS`"
        vnumber:
          type: string
          description: "V Number. Note: available only for: `TSYS`"
        date:
          type: string
          description: "File Update Date. Note: available only for: `TSYS`"
        bin:
          type: string
          description: "BIN. Note: available only for: `TSYS`"
        mcc:
          type: string
          description: "MCC. Note: available only for: `TSYS`"
        agent:
          type: string
          description: "Agent. Note: available only for: `TSYS`"
        chain:
          type: string
          description: "Chain. Note: available only for: `TSYS`"
        store:
          type: string
          description: "Store Number. Note: available only for: `TSYS`"
        terminal:
          type: string
          description: "Terminal Number. Note: available only for: `TSYS`"
        hc_pos_id:
          type: string
          description: "POS Identifier. Note: available only for: `TSYS`"
        auth_code:
          type: string
          description: "Authentication Code. Note: available only for: `TSYS`"
        pos_mid:
          type: string
          description: "POS Merchant ID. Note: available only for: `TSYS`"
        name:
          type: string
          description: "Merchant Name. Note: available only for: `TSYS`"
        address:
          type: string
          description: "Merchant Address. Note: available only for: `TSYS`"
        city:
          type: string
          description: "City. Note: available only for: `TSYS`"
        state:
          type: string
          description: "State. Note: available only for: `TSYS`"
        zip_code:
          type: string
          description: "ZIP Code. Note: available only for: `TSYS`"
        country:
          type: string
          description: "Country. Note: available only for: `TSYS`"
        phone:
          type: string
          description: "Phone. Note: available only for: `TSYS`"
        contact:
          type: string
          description: "Contact Name. Note: available only for: `TSYS`"
        timezone:
          type: string
          description: "Timezone. Note: available only for: `TSYS`"
        manufacturer:
          type: string
          description: "Manufacturer. Note: available only for: `TSYS`"
        model:
          type: string
          description: "Model. Note: available only for: `TSYS`"
        software:
          type: string
          description: "Software. Note: available only for: `TSYS`"
        comments_txt:
          type: string
          description: "Profile Comments. Note: available only for: `TSYS`"
        profile_completed:
          type: string
          description: "Profile Completed. Note: available only for: `TSYS`"
        profile_completed_date:
          type: string
          description: "Profile Completed Date, format: `mmddYYYY`. Note: available only for: `TSYS`"
          example: '01192022'
        close_profile:
          type: string
          description: "Close Profile. Note: available only for: `TSYS`"
        close_profile_date:
          type: string
          description: "Close Profile Date, format: `mmddYYYY`. Note: available only for: `TSYS`"
          example: '02212022'
        location_num:
          type: string
          description: "Location Number. Note: available only for: `TSYS`"
        entitlements:
          type: string
          description: "Entitlements. Note: available only for: `TSYS`"
        ebt_fcs_id:
          type: string
          description: "EBT FCS ID. Note: available only for: `TSYS`"
        ebt_trans_type:
          type: string
          description: "EBT Trans Type. Note: available only for: `TSYS`"
        comments1:
          type: string
          description: "Support Comments 1. Note: available only for: `TSYS`"
        comments2:
          type: string
          description: "Support Comments 2. Note: available only for: `TSYS`"
        comments3:
          type: string
          description: "Support Comments 3. Note: available only for: `TSYS`"
        pin_pad_available:
          type: string
          description: "Is PIN Pad available. Note: available only for: `TSYS`"
          enum: [ "Yes", "No" ]
        pin_pad_type:
          type: string
          description: "PIN Pad Type. Note: available only for: `TSYS`"
        pin_pad_idle_prompt:
          type: string
          description: "PIN Pad Idle Prompt. Note: available only for: `TSYS`"
        corp_hq_name:
          type: string
          description: "Corporate HQ Name. Note: available only for: `TSYS`"
        alt_build_type:
          type: string
          description: "Alt Build Type. Note: available only for: `TSYS`"
        alt_build_type_desc:
          type: string
          description: "Alt Build Type Description. Note: available only for: `TSYS`"
        auth_comm_type:
          type: string
          description: "Auth Comm Type. Note: available only for: `TSYS`"
        settle_comm_type:
          type: string
          description: "Settle Comm Type. Note: available only for: `TSYS`"
        tip_option:
          type: string
          description: "Tip Option. Note: available only for: `TSYS`"
        tip_at_time_of_sale:
          type: string
          description: "Tip At Time Of Sale. Note: available only for: `TSYS`"
        clerk_server:
          type: string
          description: "Clerk/Server Option. Note: available only for: `TSYS`"
        auto_close:
          type: string
          description: "Auto Close. Note: available only for: `TSYS`"
        auto_close_time1:
          type: string
          description: "Auto Close Time 1. Note: available only for: `TSYS`"
        auto_close_reports:
          type: string
          description: "Auto Close Reports. Note: available only for: `TSYS`"
        merchant_aba_number:
          type: string
          description: "Merchant ABA. Note: available only for: `TSYS`"
        merchant_settlement_agent:
          type: string
          description: "Settlement Agent. Note: available only for: `TSYS`"
        reimbursement_attribute:
          type: string
          description: "Reimbursement Attribute. Note: available only for: `TSYS`"
        status:
          type: string
          description: "Status. Note: available only for: `TSYS`"
    ReportPublished:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'residuals.report.published'
              description: "Event ID"
        data:
          type: object
          properties:
            reports:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  month:
                    type: integer
                    example: 3
                  year:
                    type: integer
                    example: 2019
                  sys_prin:
                    type: integer
                    example: 34212312312
                  created:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Ticket created date"
                  created_by:
                    $ref: "#/components/schemas/UserStructure"
                  added_merchants_count:
                    type: integer
                    example: 34212312312
                  rows_count:
                    type: integer
                    example: 123
                  revision:
                    type: integer
                    example: 2
                  deactivated_merchants_count:
                    type: integer
                    example: 1
                  processor_id:
                    type: integer
                    example: 1
                  processor_name:
                    type: string
                    example: Test Processor
                  sum_transactions:
                    type: integer
                    example: 1664667
                  sum_volume:
                    type: number
                    example: 0
                  sum_net:
                    type: number
                    example: 0
                  sum_agent_net:
                    type: integer
                    example: 0
    LineItemAdded:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'residuals.lineitem.added'
              description: "Event ID"
        data:
          type: object
          properties:
            line_items:
              type: array
              items:
                - $ref: "#/components/schemas/LineItems"
    

    TicketCreated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.created'
              description: "Event ID"
        data:
          type: object
          properties:
            tickets:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Ticket"
                  - type: object
                    properties:
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket created date"
                      created_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/TicketSubscriptionData"
    TicketDetails:
      type: object
      properties:
        tickets:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Ticket"
              - $ref: "#/components/schemas/TicketCreatedBlock"
              - $ref: "#/components/schemas/TicketSubscriptionData"
              - type: object
                properties:
                  modified:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Ticket modified date"
                  modified_by:
                    $ref: "#/components/schemas/UserStructure"
                  last_comment:
                    type: string
                    format: date-time
                    example: '2019-01-01T12:04:40+05:00'
                    description: "Ticket last comment date"
    TicketUpdated:
      type: object
      properties:
        hook:
          allOf:
            - $ref: "#/components/schemas/Hook"
            - type: object
              properties:
                event:
                  example: 'ticket.updated'
        data:
          $ref: "#/components/schemas/TicketDetails"

    TicketDeleted:
      type: object
      properties:
        hook:
          allOf:
            - $ref: "#/components/schemas/Hook"
            - type: object
              properties:
                event:
                  example: 'ticket.deleted'
        data:
          $ref: "#/components/schemas/TicketDetails"

    TicketResolved:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.resolved'
              description: "Event ID"
        data:
          type: object
          properties:
            tickets:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket created date"
                      created_by:
                        $ref: "#/components/schemas/UserStructure"
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                      last_comment:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket last comment date"
                      resolved:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Ticket resolved date"
                      resolved_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/Ticket"
                  - $ref: "#/components/schemas/TicketSubscriptionData"
    TicketCommented:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.commented'
              description: "Event ID"
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        description: "Comment id"
                        example: 1
                      ticketId:
                        type: integer
                        description: "Ticket id"
                        example: 2
                      comment:
                        type: string
                        description: "Comment text"
                        example: 'Comment text'
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment created date"
                      createdBy:
                        $ref: "#/components/schemas/UserStructure"
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/CommentSubscriptionData"
    SubscriptionCommentEdited:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.comment.edited'
              description: "Event ID"
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        description: "Comment id"
                        example: 1
                      ticketId:
                        type: integer
                        description: "Ticket id"
                        example: 2
                      comment:
                        type: string
                        description: "Comment text"
                        example: 'Comment text'
                      created:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment created date"
                      createdBy:
                        $ref: "#/components/schemas/UserStructure"
                      modified:
                        type: string
                        format: date-time
                        example: '2019-01-01T12:04:40+05:00'
                        description: "Comment modified date"
                      modified_by:
                        $ref: "#/components/schemas/UserStructure"
                  - $ref: "#/components/schemas/CommentSubscriptionData"
    ChecklistUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'ticket.checklist.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            tickets:
              type: object
              properties:
                ticket:
                  allOf:
                    - $ref: "#/components/schemas/BriefTicketInfo"
                    - $ref: "#/components/schemas/TicketSubscriptionData"
                    - type: object
                      properties:
                        files:
                          type: array
                          items:
                            $ref: "#/components/schemas/File"
                checklist:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/BriefTicketChecklistInfo"
                      - type: object
                        properties:
                          fileId:
                            type: integer
                            description: "Checklist file Id"
                            readOnly: true
                            example: 123
                          completed:
                            type: boolean
                            description: "Flag is checklist are done"
                            example: true
                          completed_by:
                            type: integer
                            readOnly: true
                            description: "User ID who completed the checklist"
                            example: 123
                          completed_at:
                            format: date-time
                            readOnly: true
                            example: '2019-01-01T12:04:40+05:00'
                            description: "Datetime when user have completed the checklist item"
                          comment:
                            type: string
                            description: "Comment text"
                            example: 'Test comment'
                          file:
                            $ref: "#/components/schemas/File"
    UserStructure:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "User ID"
        name:
          type: string
          example: "John Doe"
          description: "User Name"
        userClass:
          type: string
          example: "Super Admin"
          description: "User Class"

    UserListStructure:
      type: array
      items:
        $ref: "#/components/schemas/UserStructure"

    SignatureGenerated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.signature.generated'
              description: "Event ID"
        data:
          type: object
          properties:
            signatures:
              type: array
              items:
                type: object
                properties:
                  signature:
                    $ref: "#/components/schemas/SignatureSubscription"
                  application:
                    $ref: "#/components/schemas/ApplicationSubscription"
                  lead:
                    $ref: "#/components/schemas/FullLeadSubscription"
    SignatureOpened:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.signature.opened'
              description: "Event ID"
        data:
          type: object
          properties:
            signatures:
              type: array
              items:
                type: object
                properties:
                  signature:
                    $ref: "#/components/schemas/SignatureSubscription"
                  application:
                    $ref: "#/components/schemas/ApplicationSubscription"
                  lead:
                    $ref: "#/components/schemas/FullLeadSubscription"
    SignatureSigned:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'lead.signature.signed'
              description: "Event ID"
        data:
          type: object
          properties:
            signatures:
              type: array
              items:
                type: object
                properties:
                  signature:
                    $ref: "#/components/schemas/SignatureSubscription"
                  application:
                    $ref: "#/components/schemas/ApplicationSubscription"
                  lead:
                    $ref: "#/components/schemas/FullLeadSubscription"

    ShortLeadSubscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "Lead ID"
        lead_url:
          type: string
          example: "http://iris/v2/lead/view/1"
          description: "Lead URL"
        name:
          type: string
          example: "Super Lead"
          description: "Lead Name"
        email:
          type: string
          example: "lead@email.com"
          description: "Lead Default Email"
        contact:
          type: string
          example: "John Doe"
          description: "Lead Default Contact Name"
        phone:
          type: string
          example: "555-555-5555"
          description: "Lead Default Contact Phone Number"
        address:
          type: object
          properties:
            address:
              type: string
              example: "86th street, apt. 1"
              description: "Lead Default Address"
            city:
              type: string
              example: "Brooklyn"
              description: "Lead Default City"
            state:
              type: string
              example: "NY"
              description: "Lead Default State"
            zip:
              type: string
              example: "10001"
              description: "Lead Default ZIP"
        assignedUsers:
          $ref: "#/components/schemas/UserListStructure"

    FullLeadSubscription:
      allOf:
        - $ref: "#/components/schemas/ShortLeadSubscription"
        - type: object
          properties:
            id:
              type: integer
              example: 1
              description: "Lead ID"
            lead_url:
              type: string
              example: "http://iris/v2/lead/view/1"
              description: "Lead URL"
            name:
              type: string
              example: "Super Lead"
              description: "Lead Name"
            email:
              type: string
              example: "lead@email.com"
              description: "Lead Default Email"
            contact:
              type: string
              example: "John Doe"
              description: "Lead Default Contact Name"
            phone:
              type: string
              example: "555-555-5555"
              description: "Lead Default Contact Phone Number"
            address:
              type: object
              properties:
                address:
                  type: string
                  example: "86th street, apt. 1"
                  description: "Lead Default Address"
                city:
                  type: string
                  example: "Brooklyn"
                  description: "Lead Default City"
                state:
                  type: string
                  example: "NY"
                  description: "Lead Default State"
                zip:
                  type: string
                  example: "10001"
                  description: "Lead Default ZIP"
            group:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Group ID"
                name:
                  type: string
                  example: "Group"
                  description: "Group Name"
            category:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Status category ID"
                name:
                  type: string
                  example: "Status category"
                  description: "Status category Name"
            status:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: "Status ID"
                name:
                  type: string
                  example: "Status"
                  description: "Status Name"
            campaign:
              type: object
              properties:
                id:
                  type: integer
                  nullable: true
                  example: 1
                  description: "Campaign ID"
                name:
                  type: string
                  nullable: true
                  example: "Campaign"
                  description: "Campaign Name"
            source:
              type: object
              properties:
                id:
                  type: integer
                  nullable: true
                  example: 1
                  description: "Source ID"
                name:
                  type: string
                  nullable: true
                  example: "Source"
                  description: "Source Name"
            createdAt:
              type: string
              format: date-time
              example: '2019-01-01T12:04:40+05:00'
              description: "Date and time of creation (ISO 8601)"
            createdBy:
              $ref: "#/components/schemas/UserStructure"

    SignatureSubscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
        hash:
          type: string
          example: f432f013
        url:
          type: string
          example: "https://iriscrm.com/sign/f432f013"
        status:
          type: string
          example: Generated
        created:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: "Signature created date"
        created_by:
          $ref: "#/components/schemas/UserStructure"
        multi_signer:
          type: boolean
          example: false
        completed:
          type: boolean
          example: false
        signers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Tom Sawyer
              email:
                type: string
                example: tomsawyer@example.com
    ApplicationSubscription:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: App name
        group_id:
          type: integer
          example: 1
        group_name:
          type: string
          example: Group name

    
    ChargebackAdded:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'chargeback.added'
              description: "Event ID"
        data:
          type: object
          properties:
            chargebacks:
              type: array
              items:
                type: array
                $ref: '#/components/schemas/ChargebackReplyResponse'
    ChargebackUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'chargeback.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            chargebacks:
              type: array
              items:
                type: array
                $ref: '#/components/schemas/ChargebackReplyResponse'
    ChargebackReminder:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'chargeback.reminder'
              description: "Event ID"
        data:
          type: object
          properties:
            chargebacks:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ChargebackReplyResponse'
                  - type: object
                    properties:
                      due_in:
                        type: integer
                        example: 7
                        description: "Case due in days"
    RetrievalAdded:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'retrieval.added'
              description: "Event ID"
        data:
          type: object
          properties:
            retrievals:
              type: array
              items:
                type: array
                $ref: '#/components/schemas/RetrievalsReplyResponse'
    RetrievalUpdated:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'retrieval.updated'
              description: "Event ID"
        data:
          type: object
          properties:
            retrievals:
              type: array
              items:
                type: array
                $ref: '#/components/schemas/RetrievalsReplyResponse'
    RetrievalReminder:
      type: object
      properties:
        hook:
          type: object
          properties:
            requestId:
              type: integer
              example: 1
              description: "Request ID"
            event:
              type: string
              example: 'retrieval.reminder'
              description: "Event ID"
        data:
          type: object
          properties:
            retrievals:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/RetrievalsReplyResponse'
                  - type: object
                    properties:
                      due_in:
                        type: integer
                        example: 7
                        description: "Case due in days"
    
    WebForm:
      type: object
      properties:
        id:
          type: integer
          description: "Web Form Id"
          example: 1
        name:
          type: string
          description: "Web Form Name"
          example: "Web Form Application"
        type:
          type: string
          enum: [
            'default',
            'landing',
          ]
          example: "default"
        type_label:
          type: string
          example: "Fillable Web Form"
        active:
          type: boolean
          description: "Web Form Active"
          example: true
        group:
          type: object
          properties:
            id:
              type: integer
              description: "Web Form Group Id"
              example: 2
            name:
              type: string
              description: "Web Form Group Name"
        defaults:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: "Default Id"
                example: 3
              name:
                type: string
                description: "Default Name"
        created_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Session creation date (Y-m-d\TH:i:sP)'
        updated_at:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
          description: 'Session update date (Y-m-d\TH:i:sP)'

security:
  - Token: []

paths:
  /merchants:
    get:
      tags:
        - 'Merchants'
      summary: Get a list of merchants
      description: Return a list of merchants
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [mid, name, closed, opened, created, modified, first_batch, last_batch, processor, group, datasource, deactivated, vim, status, active]
          description: Sorting of merchants by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direction of sorting
        - in: query
          name: group
          schema:
            type: string
          description: Filter merchants by a group name
        - in: query
          name: processor
          schema:
            type: string
          description: Filter merchants by a processor name
        - in: query
          name: datasource
          schema:
            type: string
          description: Filter merchants by a data source name
        - in: query
          name: mid
          schema:
            type: string
          description: Filter merchants by a partial merchant number
        - in: query
          name: name
          schema:
            type: string
          description: Filter merchants by a partial merchant name
        - in: query
          name: vim
          schema:
            type: string
            enum: [Yes, No]
          description: Filter merchants by a merchant vim field
        - in: query
          name: active
          schema:
            type: string
            enum: [Yes, No]
          description: Filter merchants by a merchant active field
        - in: query
          name: status
          schema:
            type: string
            enum: [Open, Closed]
          description: Filter merchants by a merchant status field
        - in: query
          name: date_filter
          schema:
            type: string
            enum: [opened, closed, created, modified, first_batch, last_batch, deactivated]
          description: Filter merchants by a merchant specific date field
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'Start date for date_filter filter in format ISO 8601 for created and modified properties (**Please note that `+` sign should be encoded to `%2B`**), for others properties you should use simple date format (Y-m-d).'
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'End date for date_filter filter in format ISO 8601 for created and modified properties (**Please note that `+` sign should be encoded to `%2B`**), for others properties you should use simple date format (Y-m-d)'
      responses:
        200:
          description: A JSON array of merchants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/BriefMerchantInfo"
                        - type: object
                          properties:
                            leads:
                              type: array
                              description: "List of Lead IDs"
                              items:
                                type: integer
                                example: 1
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $page = 56; // int | Page number
            $sort_by = "mid"; // string | Sorting of merchants by the field value
            $sort_dir = "asc"; // string | Direction of sorting
            $group = "group name"; // string | Filter merchants by a group name
            $processor = "processor name"; // string | Filter merchants by a processor name
            $datasource = "datasource name"; // string | Filter merchants by a data source name
            $mid = "1234"; // string | Filter merchants by a partial merchant number
            $name = "test"; // string | Filter merchants by a partial merchant name
            $vim = "yes"; // string | Filter merchants by a merchant vim field
            $active = "yes"; // string | Filter merchants by a merchant active field
            $status = "open"; // string | Filter merchants by a merchant status field
            $date_filter = "opened"; // string | Filter merchants by a merchant specific date field
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Start date for date_filter filter in format ISO 8601(Y-m-d\\TH:i:sP) for created and modified properties, for others properties you should use simple date format (Y-m-d).
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | End date for date_filter filter in format ISO 8601(Y-m-d\\TH:i:sP) for created and modified properties, for others properties you should use simple date format (Y-m-d)

            try {
                $result = $apiInstance->merchantsGet($page, $sort_by, $sort_dir, $group, $processor, $datasource, $mid, $name, $vim, $active, $status, $date_filter, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsGet: ' . $e->getMessage() . PHP_EOL;
            }
    post:
      tags:
        - "Merchants"
      summary: Create merchants
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMerchantRequest"
      responses:
        200:
          description: The merchant has been created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The merchant has been created successfully"
                  assigned_users_messages:
                    $ref: "#/components/schemas/GetAssignedUsersToMerchantMessages"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}:
    get:
      tags:
        - "Merchants"
      summary: Get detailed merchant information
      description: Finds a merchant by its number and returns merchant and account demographics from the processor
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      responses:
        200:
          description: Detailed merchant account information
          content:
            application/json:
              schema:
                type: object
                properties:
                  general:
                    $ref: '#/components/schemas/BriefMerchantInfo'
                  account_information:
                    type: object
                  leads:
                    type: array
                    description: A list of linked lead Id's. First from this list is always used as a primary lead.
                    items:
                      type: integer
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->merchantsMerchantNumberGet($merchant_number);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberGet: ' . $e->getMessage() . PHP_EOL;
            }
    patch:
      tags:
        - "Merchants"
      summary: "Update an existing merchant"
      description: "Update an existing merchant"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        description: Merchant changes (send only fields you want to change)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Merchant name
                  example: Test Name
                opened:
                  type: string
                  format: date
                  description: Merchant open date (YYYY-MM-DD)
                  example: "2015-10-23"
                closed:
                  type: string
                  format: date
                  description: Merchant closed date (YYYY-MM-DD)
                  example: "2018-05-03"
                processor:
                  type: string
                  description: Processor name
                  example: Test
                datasource:
                  type: string
                  description: Data source name
                  example: Test
                group:
                  type: string
                  description: Group name
                  example: Test
                vim:
                  type: string
                  description: Is VIM?
                  enum: [Yes, No]
                  example: Yes
                status:
                  type: string
                  description: Merchant status
                  enum: [Closed, Open]
                  example: Closed
                active:
                  type: string
                  description: Merchant active flag
                  enum: [Yes, No]
                  example: Yes
      responses:
        200:
          description: Merchant has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Merchant has been updated successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'name' => 'Test Name',
                  'opened' => '2015-10-23',
                  'closed' => '2018-05-03',
                  'processor' => 'Test',
                  'datasource' => 'Test',
                  'group' => 'Test',
                  'vim' => 'Yes',
                  'status' => 'Closed',
                  'active' => 'Yes',
                ];
                $result = $apiInstance->merchantsMerchantNumberPatch($body, $merchant_number);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberPatch: ' . $e->getMessage() . PHP_EOL;
            }
  /merchants/{merchantNumber}/users:
    get:
      tags:
        - "Merchants"
      summary: "Get assigned users to merchant"
      description: "Get assigned users to merchants and splits for period"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: year
          schema:
            type: integer
          required: true
        - in: query
          name: month
          schema:
            type: integer
          required: true
      responses:
        200:
          description: A JSON with array with assigned users to merchant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAssignedUsersToMerchant"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    post:
      tags:
        - "Merchants"
      summary: "Assign users to merchant"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignUsersToMerchantRequest"
      responses:
        200:
          description: Users was successfully assigend to merchant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAssignedUsersToMerchantMessages"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/details:
    post:
      tags:
        - "Merchants"
      summary: Update merchant details
      description: Update merchant details (account status)
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDetailsRequest"
      responses:
        200:
          description: Merchant details was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/equipment:
    get:
      tags:
        - "Merchants"
      summary: Get merchant equipment
      description: Get list of available equipment
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      responses:
        200:
          description: Equipment List
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EquipmentResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/ServerError"
  /merchants/{merchantNumber}/deposits/{year}/{month}/{day}:
    get:
      tags:
        - "Merchants"
      summary: Get a list of deposits
      description: Find all deposit records using a month and year - or a date range.
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: year
          schema:
            type: integer
          description: Start deposits year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Start deposits month
          required: true
        - in: path
          name: day
          schema:
            type: integer
            default: 1
          description: Start deposits day.
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: '2019-01-01'
          description: Filter deposits by a date in format Y-m-d. Should be no more than 90 days from the start date.
      responses:
        200:
          description: A list of deposits
          content:
            application/json:
              schema:
                type: object
                properties:
                  deposits:
                    $ref: "#/components/schemas/Deposits"
                  adjustments:
                    $ref: "#/components/schemas/Adjustments"
                  totals:
                    type: object
                    properties:
                      total_paid_by_us:
                        type: string
                        example: "100.00"
                      monthly_total:
                        type: string
                        example: "1100.00"
                      adjustments:
                        type: array
                        items:
                          - type: object
                            properties:
                              type:
                                type: string
                                example: "Paid by Amex"
                              amount:
                                type: string
                                example: "1100.00"
                      deposits:
                        type: array
                        items:
                          - type: object
                            properties:
                              date:
                                type: string
                                example: "01/01/2021"
                              amount:
                                type: string
                                example: "1100.00"
                      per_card_type:
                        type: array
                        items:
                          - type: object
                            properties:
                              type:
                                type: string
                                example: "MC"
                              amount:
                                type: string
                                example: "41761.32"
                              count:
                                type: integer
                                example: 21
                      transactions_count:
                        type: integer
                        example: 21
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/transactions:
    get:
      tags:
        - "Merchants"
      summary: Get a list of transactions
      description: Find all transactions by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MonetaryBatch"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
                  adjustments:
                    $ref: "#/components/schemas/Adjustments"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)

            try {
                $result = $apiInstance->merchantsMerchantNumberTransactionsGet($merchant_number, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberTransactionsGet: ' . $e->getMessage() . PHP_EOL;
            }
    post:
      tags:
        - "Merchants"
      summary: "Import transactions"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBatchesAndTransactionRequest"
      responses:
        200:
          description: Transactions was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/adjustments:
    post:
      tags:
        - "Merchants"
      summary: "Import adjustments"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdjustmentsRequest"
      responses:
        200:
          description: Adjustments was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/authorizations:
    get:
      tags:
        - "Merchants"
      summary: Get a list of authorization batches
      description: Find all batches with authorizations by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2021-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2021-12-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of batches
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuthorizationBatch"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - "Merchants"
      summary: "Import batches and authorizations"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuthorizationBatchesAndTransactionRequest"
      responses:
        200:
          description: Batches and authorizations was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/authorizations/{batchId}/transactions:
    get:
      tags:
        - "Merchants"
      summary: Get a list of authorizations
      description: Find all authorizations by merchant number and batch id
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: batchId
          schema:
            type: integer
          description: Batch id
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of authorizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuthorizationBatchTransactions"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks:
    get:
      tags:
        - "Merchants"
      summary: Get a list of chargeback cases
      description: Find all chargeback cases by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of chargeback cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Chargeback"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)

            try {
                $result = $apiInstance->merchantsMerchantNumberChargebacksGet($merchant_number, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberChargebacksGet: ' . $e->getMessage() . PHP_EOL;
            }
    post:
      tags:
        - "Merchants"
      summary: "Import chargebacks"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChargebacksRequest"
      responses:
        200:
          description: Chargebacks was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}:
    get:
      tags:
        - "Merchants"
      summary: Get detailed chargeback case information
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      responses:
        200:
          description: Chargeback detail information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargebackReplyResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/dispute_reverse:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Chargeback Case - Dispute Chargeback Case
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case ID
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChargebackReplyDisputeRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/credit_issued:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Chargeback Case - Credit Issued
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChargebackReplyCreditIssuedRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/accept:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Chargeback Case - Accept Chargeback
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals:
    get:
      tags:
        - "Merchants"
      summary: Get a list of retrieval cases
      description: Find all retrieval cases by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01'
          description: Filter batches by a date (Y-m-d)
      responses:
        200:
          description: A list of retrieval cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Retrieval"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $start_date = new \DateTime("2019-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)
            $end_date = new \DateTime("2021-10-20T19:20:30+01:00"); // \DateTime | Filter batches by a date (Y-m-d)

            try {
                $result = $apiInstance->merchantsMerchantNumberRetrievalsGet($merchant_number, $start_date, $end_date);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberRetrievalsGet: ' . $e->getMessage() . PHP_EOL;
            }
    post:
      tags:
        - "Merchants"
      summary: "Import retrievals"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRetrievalsRequest"
      responses:
        200:
          description: Retrievals was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}:
    get:
      tags:
        - "Merchants"
      summary: Get detailed retrieval case information
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: A list of retrieval cases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrievalsReplyResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/response:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Retrieval Response
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Merchant has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/response_with_signature:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Retrieval Response with Signature
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/unable_to_fulfill_request:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Unable to Fulfill Retrieval Case Request
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: chargebackId
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/unable_to_locate_retrieval:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Unable to Locate Retrieval Case
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/credit_issued:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval - Credit Issued
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyCreditIssuedRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/imprint_and_signature:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Imprint and Signature
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Chargeback case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/responding_by_other_means:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Responding by Other Means
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: string
          description: Retrieval case number
          required: true
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/add_notes_images:
    post:
      tags:
        - "Dispute responder"
      summary: Reply To Retrieval Case - Add User Notes/Images
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: caseNumber
          schema:
            type: integer
          description: Retrieval case number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrievalReplyResponseRequest"
      responses:
        200:
          description: Reply was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/statements:
    get:
      tags:
        - "Merchants"
      summary: Get a list of statements
      description: Return all statements by merchant number
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of statements
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "Statement Id"
                        date:
                          type: string
                          example: 'March 2019'
                          description: "Statement date"
                        links:
                          $ref: "#/components/schemas/Links"
                        meta:
                          $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->merchantsMerchantNumberStatementsGet($merchant_number);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberStatementsGet: ' . $e->getMessage() . PHP_EOL;
            }
    post:
      tags:
        - "Merchants"
      summary: "Import merchant statements"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: year
          schema:
            type: integer
          required: true
        - in: query
          name: month
          schema:
            type: integer
          required: true
        - in: query
          name: overwrite
          schema:
            type: string
            enum: [Yes, No]
          description: Should overwrite existing statement for this date
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: "Statement PDF file"
      responses:
        200:
          description: Statement file was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/statements/1099k:
    post:
      tags:
        - "Merchants"
      summary: "Import 1099k statements"
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: query
          name: year
          schema:
            type: integer
          required: true
        - in: query
          name: overwrite
          schema:
            type: string
            enum: [Yes, No]
          description: Should overwrite existing statement for this date
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: "Statement PDF file"
      responses:
        200:
          description: Statement file was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/statements/{statementId}:
    get:
      tags:
        - "Merchants"
      summary: Download statements
      description: Download statements
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
        - in: path
          name: statementId
          schema:
            type: integer
          description: Statement Id
          required: true
      responses:
        200:
          description: Statement file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Statement file"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->merchantsMerchantNumberStatementsStatementIdGet($merchant_number, $statement_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling MerchantsApi->merchantsMerchantNumberStatementsStatementIdGet: ' . $e->getMessage() . PHP_EOL;
            }
  /merchants/files:
    post:
      tags:
        - "Merchants"
      summary: Upload an attachment to a chargeback or retrieval dispute case
      description: Upload an attachment to a chargeback or retrieval dispute case
      parameters:
        - in: query
          name: filename
          schema:
            type: string
            example: 'test_name.pdf'
          description: File name for validation
          required: true
      responses:
        200:
          description: Document
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  file_id:
                    type: string
                    example: "15dfd5e51a10145.dispute_file.pdf"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /merchants/{merchantNumber}/chargebacks/{caseNumber}/files/{fileId}:
    get:
      tags:
        - "Merchants"
      summary: Download chargeback case files
      description: Download a file(s) attached to the chargeback case
      parameters:
        - in: path
          name: caseNumber
          schema:
            type: integer
          description: Chargeback case number
          required: true
        - in: path
          name: fileId
          schema:
            type: integer
          description: File Id (leave empty to get all case files)
          required: false
      responses:
        200:
          description: Files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DisputeFile"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/retrievals/{caseNumber}/files/{fileId}:
    get:
      tags:
        - "Merchants"
      summary: Download retrieval case files
      description: Download a file(s) attached to the retrieval case
      parameters:
        - in: path
          name: caseNumber
          schema:
            type: integer
          description: Retrieval case number
          required: true
        - in: path
          name: fileId
          schema:
            type: integer
          description: File Id (leave empty to get all case files)
          required: false
      responses:
        200:
          description: Files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DisputeFile"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /merchants/{merchantNumber}/memos:
    post:
      tags:
        - "Merchants"
      summary: Create memos
      parameters:
        - in: path
          name: merchantNumber
          schema:
            type: integer
          description: Merchant number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMemosRequest"
      responses:
        200:
          description: Memos was successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: "The operation is successfully completed."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /processors:
    get:
      tags:
        - "Merchants"
      summary: Get processors
      description: Get Processor and DataSource available for assigning to merchants
      responses:
        200:
          description: A JSON array with processors and linked datasources
          content:
            application/json:
              schema:
                type: object
                properties:
                  processors:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: "Processor Name"
                        datasources:
                          type: array
                          description: "Linked DataSources"
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                description: "DataSource ID"
                              name:
                                type: string
                                description: "DataSource Name"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"

  /merchants/tsys/reserve-funding-requests:
    get:
      tags:
        - "Merchants"
      summary: Get reserve funding requests of any type
      description: Get reserve funding requests for TSYS merchants
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                merchant_id:
                  type: integer
                  description: Merchant number
                  example: 467128346458912
                uuid:
                  type: string
                  description: Reserve funding UUID
                  example: "337110fd-3b49-4af8-bc0b-0b48e079c417"
                activity_type:
                  type: string
                  example: manage_merchant_reserve
                  enum: [
                    "manage_merchant_reserve",
                    "manage_merchant_release",
                    "transfer_funds_on_reserve",
                    "one_time_reserve",
                    "one_time_release",
                    "record_adjustment_reserve",
                    "record_adjustment_release",
                    "manage_rolling_reserve_activity",
                    "merchant_settings"
                  ]
                  description: Record type
                status:
                  type: string
                  example: "pending"
                  enum: [
                    'pending',
                    'in_progress',
                    'sent',
                    'approved',
                    'declined',
                    'error'
                  ]
                  description: Record status
      responses:
        200:
          description: A JSON array with reserve funding
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/RF_Fetch_All"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /merchants/tsys/reserve-funding:
    post:
      tags:
        - "Merchants"
      summary: Create reserve funding
      description: Create reserve funding for the TSYS merchants
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RF_Create_Reserve"
      responses:
        200:
          description: A JSON array with reserve funding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RF_Fetch_Reserve"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /merchants/tsys/onetime-reserve-funding:
    post:
      tags:
        - "Merchants"
      summary: Create one-time reserve funding
      description: Create one-time reserve funding for the TSYS merchants
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RF_Create_OneTime_Reserve"
      responses:
        200:
          description: A JSON array with reserve funding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RF_Fetch_OneTime_Reserve"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /merchants/tsys/release-funding:
    post:
      tags:
        - "Merchants"
      summary: Create release funding
      description: Create release funding for the TSYS merchants
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RF_Create_Release"
      responses:
        200:
          description: A JSON array with reserve funding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RF_Fetch_Release"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /merchants/tsys/onetime-release-funding:
    post:
      tags:
        - "Merchants"
      summary: Create one-time release funding
      description: Create one-time release funding for the TSYS merchants
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RF_Create_OneTime_Release"
      responses:
        200:
          description: A JSON array with reserve funding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RF_Fetch_OneTime_Release"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /merchants/tsys/transfer-funding:
    post:
      tags:
        - "Merchants"
      summary: Create transfer funds request
      description: Create transfer funds request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RF_Create_TransferFunds"
      responses:
        200:
          description: A JSON array with reserve funding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RF_Fetch_TransferFunds"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /merchants/tsys/reserve-funding/batch-maintenance-files:
    post:
      tags:
        - "Merchants"
      summary: Create reserve funding maintenance file
      description: Create reserve funding maintenance file and schedule it for uploading on TSYS SFTP server
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - datasource_id
              properties:
                datasource_id:
                  type: integer
                  description: DataSource ID
                  example: 1
      responses:
        200:
          description: A JSON object with generated file name and record UUID's included in the file
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_name:
                    type: string
                    description: "Generated file name"
                  records:
                    type: array
                    description: "Record UUID's included in the file"
                    items:
                      type: string
                      example: "337110fd-3b49-4af8-bc0b-0b48e079c417"
                  skipped_records:
                    type: array
                    description: "The list of skipped records"
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                          description: "Record UUID"
                          example: "337110fd-3b49-4af8-bc0b-0b48e079c417"
                        error:
                          type: string
                          description: "Error message"
                          example: "Record is already in the file"
                  failed_records:
                    type: array
                    description: "The list of records that have some errors"
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                          description: "Record UUID"
                          example: "337110fd-3b49-4af8-bc0b-0b48e079c417"
                        error:
                          type: string
                          description: "Error message"
                          example: "Date must not occur before the current date, \"20221021\" given"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
    get:
      tags:
        - "Merchants"
      summary: Get a list of reserve funding maintenance files
      description: Get a list of reserve funding maintenance files
      parameters:
        - in: query
          name: report_type
          schema:
            type: string
            enum: [rf_batch_request]
          description: Report type
          required: true
        - in: query
          name: datasource_id
          schema:
            type: integer
          description: Filter by data source ID
        - in: query
          name: status
          schema:
            type: string
            enum: ['new','in_progress','success','error','duplicate']
          description: Filter by file state
        - in: query
          name: file_name
          schema:
            type: string
          description: "Filter by file name. The search is based on substring matching. E.g. `RFBMF_10062022`
            will return all files with names containing `RFBMF_10062022`: `1234_RFBMF_10062022_060943.TSYSI`, 
            `1234_RFBMF_10062022_023425.TSYSI`, etc."
      responses:
        200:
          description: A JSON array with reserve funding maintenance files
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/RF_Data_Maintenance_File"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /users:
    post:
      tags:
        - "Users"
      summary: Create a user
      description: Create a user and add their info, with the option to set their password or have a temporary password emailed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        200:
          description: The user has been created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: int
                    enum: [0, 1]
                    example: 1
                    description: Code of operation. `1` - successful
                  user_id:
                    type: int
                    example: 22
                    description: ID of new user. `0` - User is not created
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: ["affirm", "error"]
                          example: affirm
                          description: Type of message
                        text:
                          type: string
                          example: User successfully added.
                          description: Text of the message
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
  /users/{userId}:
    patch:
      tags:
        - "Users"
      summary: Update a User
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          description: User ID
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUserRequest"
      responses:
        200:
          description: The user has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: int
                    enum: [0, 1]
                    example: 1
                    description: Code of operation. `1` - successful
                  user_id:
                    type: int
                    example: 22
                    description: ID of updated user.
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: ["affirm", "error"]
                          example: affirm
                          description: Type of message
                        text:
                          type: string
                          example: User successfully added.
                          description: Text of the message
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
  /users/list:
    get:
      tags:
        - "Users"
      summary: Get list of users
      description: Retrieve the list of Users.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [
              default,
              username,
              name,
              email,
              mobile,
              last_login,
              classname,
              active,
              groups
            ]
          default: default
          description: Sorting of users by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
          description: Direction of sorting
        - in: query
          name: class
          schema:
            type: integer
          description: Filter users by class ID
        - in: query
          name: active
          schema:
            type: string
            enum: [Yes, No]
          description: "Filter users by a active status. If not specified, `Active` and `Deactivated` are shown by default"
      responses:
        200:
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ListOfUsers"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
  /users/classes:
    get:
      tags:
        - "Users"
      summary: Get user classes
      description: Retrieve the list of User Classes to use when creating or updating a user.
      responses:
        200:
          description: A JSON array of user classes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                          description: Class ID
                        name:
                          type: string
                          example: Manager
                          description: Class Name
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
  /users/groups:
    get:
      tags:
        - "Users"
      summary: Get groups
      description: Retrieve the list of Groups to use when creating or updating a user.
      responses:
        200:
          description: A JSON array of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 22
                          description: Group ID
                        name:
                          type: string
                          example: ISO
                          description: Group Name
                        is_default:
                          type: string
                          enum: [Yes, No]
                          example: Yes
                          description: Is Group Default
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"

  /residuals/reports/summary/{year}/{month}:
    get:
      tags:
        - 'Residuals'
      summary: Get residuals summary data
      description: Get residuals summary data by year and month
      parameters:
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: processor
          schema:
            type: integer
            example: 12
          description: Get residuals summary only for specific processor
        - in: query
          name: group
          schema:
            type: integer
            example: 2
          description: Get residuals summary only for specific group
        - in: query
          name: agent
          schema:
            type: integer
            example: 123
          description: Get residuals summary only for specific user agent
        - in: query
          name: search
          schema:
            type: string
            example: search text
          description: Search query
        - in: query
          name: hide_null_merchants
          schema:
            type: boolean
            example: false
          description: Flag for hiding inactive merchants (true by default)
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of totals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SummaryResponse"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/reports/summary/rows/{processor_id}/{year}/{month}:
    get:
      tags:
        - 'Residuals'
      summary: Get residuals summary with merchant rows
      description: Get residuals reports summary data with merchant rows for the processor by year and month
      parameters:
        - in: path
          name: processor_id
          schema:
            type: integer
          description: Processor ID
          required: true
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: group
          schema:
            type: integer
            example: 2
          description: Get residuals summary only for specific group
        - in: query
          name: agent
          schema:
            type: integer
            example: 123
          description: Get residuals summary only for specific user agent
        - in: query
          name: search
          schema:
            type: string
            example: search text
          description: Search query
        - in: query
          name: hide_null_merchants
          schema:
            type: boolean
            example: false
          description: Flag for hiding inactive merchants (true by default)
        - in: query
          name: template
          schema:
            type: boolean
            example: false
          description: Flag for applying user templates (true by default)
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page

      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MerchantRow"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/reports/details/{processor_id}/{year}/{month}:
    get:
      tags:
        - 'Residuals'
      summary: Get residuals details with merchant rows
      description: Get residuals reports calculation details for the processor by year and month
      parameters:
        - in: path
          name: processor_id
          schema:
            type: integer
          description: Processor ID
          required: true
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: group
          schema:
            type: integer
            example: 2
          description: Get residuals summary only for specific group
        - in: query
          name: agent
          schema:
            type: integer
            example: 123
          description: Get residuals summary only for specific user agent
        - in: query
          name: search
          schema:
            type: string
            example: search text
          description: Search query
        - in: query
          name: hide_null_merchants
          schema:
            type: boolean
            example: false
          description: Flag for hiding inactive merchants (true by default)
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResidualsDetails"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/lineitems/{year}/{month}:
    get:
      tags:
        - 'Residuals'
      summary: Get residuals line items
      description: Get residuals line items by month and year
      parameters:
        - in: path
          name: year
          schema:
            type: integer
          description: Line Item year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Line Item month
          required: true
        - in: query
          name: created
          schema:
            type: string
            format: date
            example: '2019-01-31'
          description: Filter line items by a date (Y-m-d)
        - in: query
          name: dba
          schema:
            type: string
            example: Test Merchant
        - in: query
          name: username
          schema:
            type: string
            example: Jane Doe
        - in: query
          name: user_id
          schema:
            type: integer
            example: 1
        - in: query
          name: description
          schema:
            type: string
            example: Description from Line Item
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LineItems"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/templates/:
    get:
      tags:
        - 'Residuals'
      summary: Get residuals templates
      description: Get a list of residuals templates with their respective rules
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter templates by name
        - in: query
          name: revision
          schema:
            type: string
          description: Filter templates by revision
        - in: query
          name: creator
          schema:
            type: integer
          description: Filter templates by creator
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResidualTemplate"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /residuals/templates/assigned/{year}/{month}:
    get:
      tags:
        - 'Residuals'
      summary: Get a list of users with assigned residuals templates
      description: Get a list of users with assigned residuals templates by month and year
      parameters:
        - in: path
          name: year
          schema:
            type: integer
          description: Residuals year
          required: true
        - in: path
          name: month
          schema:
            type: integer
          description: Residuals month
          required: true
        - in: query
          name: user
          schema:
            type: integer
          description: Filter templates by user
        - in: query
          name: processor
          schema:
            type: integer
          description: Filter templates by processor
        - in: query
          name: group
          schema:
            type: integer
          description: Filter templates by group
        - in: query
          name: class
          schema:
            type: integer
          description: Filter templates by user class
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A JSON array of rows
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResidualTemplateAssigned"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"


  /leads:
    post:
      tags:
      - "Leads"
      summary: Create a lead
      description: Create a lead
      requestBody:
        description: Lead details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - fields
              properties:
                campaign:
                  type: integer
                  description: Campaign Id
                  example: 1
                status:
                  type: integer
                  description: Status Id
                  example: 1
                source:
                  type: integer
                  description: Source Id
                  example: 1
                group:
                  type: integer
                  description: Group Id
                  example: 1
                users:
                  type: array
                  description: Ids of users to assign to a new lead
                  items:
                    type: integer
                  example: [1, 2]
                users_emails:
                  type: array
                  description: Emails of users to assign to a new lead
                  items:
                    type: string
                  example: [ 'aaa@example.com', 'bbb@example.com' ]
                fields:
                  type: array
                  description: Lead fields
                  items:
                    type: object
                    required:
                    - id
                    - value
                    properties:
                      id:
                        type: string
                        description: Field Id
                        example: 1
                      record:
                        type: string
                        description: Record Id
                        example: 1
                      value:
                        type: string
                        description: Field value
                        example: Test
      responses:
        200:
          description: Lead has been created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  leadId:
                    type: integer
                    description: Lead Id
                    example: 1
                  message:
                    type: string
                    description: Result message
                    example: The lead (1) has been created successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'campaign' => 1,
              'status' => 1,
              'source' => 1,
              'group' => 1,
              'users' => [1, 2],
              'fields' => [
                [
                  'id' => 1,
                  'record' => 1,
                  'value' => 'Test',
                ],
              ],
            ];

            try {
                $result = $apiInstance->leadsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Leads"
      summary: Get a list of leads
      description: Get a list of leads
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      - in: query
        name: sort_by
        schema:
          type: string
          enum: [
            id,
                        mid,
                        name,
            created,
            modified
          ]
        description: Sorting of leads by the field value
      - in: query
        name: sort_dir
        schema:
          type: string
          enum: [asc, desc]
          default: asc
        description: Direction of sorting
      - in: query
        name: group
        schema:
          type: integer
        description: Filter leads by a group id

      
      - in: query
        name: mid
        schema:
          type: integer
        description: Filter leads by a merchant id
      
      - in: query
        name: campaign
        schema:
          type: integer
        description: Filter leads by a campaign id
      - in: query
        name: source
        schema:
          type: integer
        description: Filter leads by a source id
      - in: query
        name: status
        schema:
          type: integer
        description: Filter leads by a status id
      - in: query
        name: category
        schema:
          type: integer
        description: Filter leads by a status category id
      - in: query
        name: user
        schema:
          type: integer
        description: Filter leads by a user id
      - in: query
        name: date_filter
        schema:
          type: string
          enum: [created, modified, last_note, last_status, last_task, last_task_due, last_appointment, last_appointment_due]
        description: Filtering leads by a date range depends on this filter
      - in: query
        name: start_date
        schema:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        description: Filter leads by a date in ISO 8601 format (Y-m-d\TH:i:sP) (**Please note that `+` sign should be encoded to `%2B`**)
      - in: query
        name: end_date
        schema:
          type: string
          format: date-time
          example: '2019-01-01T12:04:40+05:00'
        description: Filter leads by a date in ISO 8601 format (Y-m-d\TH:i:sP) (**Please note that `+` sign should be encoded to `%2B`**)
      - in: query
        name: email
        schema:
          type: string
        description: Filter leads by using an email address
      - in: query
        name: fields
        schema:
          type: array
          example: ?fields[field_id]=field_value&fields[field_id2]=field_value2
        description: >
          Filter leads by searching any lead field values. Search multiple values as an AND operation.
      responses:
        200:
          description: A JSON array of leads
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefLeadInfo"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $page = 56; // int | Page number
            $sort_by = "sort_by_example"; // string | Sorting of leads by the field value
            $sort_dir = "sort_dir_example"; // string | Direction of sorting
            $group = 56; // int | Filter leads by a group id
            $campaign = 56; // int | Filter leads by a campaign id
            $source = 56; // int | Filter leads by a source id
            $status = 56; // int | Filter leads by a status id
            $category = 56; // int | Filter leads by a status category id
            $user = 56; // int | Filter leads by a user id
            $date_filter = "date_filter_example"; // string | Filtering leads by a date range depends on this filter
            $start_date = new \DateTime("2013-10-20T19:20:30+01:00"); // \DateTime | Filter leads by a date in ISO 8601 format (Y-m-d\\TH:i:sP)
            $end_date = new \DateTime("2013-10-20T19:20:30+01:00"); // \DateTime | Filter leads by a date in ISO 8601 format (Y-m-d\\TH:i:sP)
            $email = "email_example"; // string | Filter leads by a email

            try {
              $result = $apiInstance->leadsGet($page, $sort_by, $sort_dir, $group, $campaign, $source, $status, $category, $user, $date_filter, $start_date, $end_date, $email);
              print_r($result);
            } catch (Exception $e) {
              echo 'Exception when calling LeadsApi->leadsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}:
    get:
      tags:
      - "Leads"
      summary: Get detailed lead information
      description: Get detailed lead information. If field has a default value, the `uid` field will be `null`
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: skip_empty_set
        schema:
          type: integer
        description: Skip empty sets (do not include empty sets in the response). 1 - skip, 0 - do not skip (default)
        required: false
        default: 0
      responses:
        200:
          description: Detailed lead information
          content:
            application/json:
              schema:
                type: object
                properties:
                  general:
                    $ref: '#/components/schemas/BriefLeadInfo'
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: string
                          enum: [tab, set]
                          example: tab
                        record:
                          type: integer
                          description: Record Id
                        fields:
                          type: array
                          items:
                            $ref: '#/components/schemas/LeadFieldValue'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdGet: ' . $e->getMessage() . PHP_EOL;
            }
    patch:
      tags:
      - "Leads"
      summary: Update a lead
      description: Update a lead
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Lead changes (send only fields you want to change)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  type: integer
                  description: Campaign Id
                  example: 1
                status:
                  type: integer
                  description: Status Id
                  example: 1
                source:
                  type: integer
                  description: Source Id
                  example: 1
                group:
                  type: integer
                  description: Group Id
                  example: 1
                fields:
                  type: array
                  description: Lead fields
                  items:
                    type: object
                    required:
                    - id
                    - value
                    properties:
                      id:
                        type: string
                        description: Field Id
                        example: 1
                      record:
                        type: string
                        description: Record Id
                        example: 1
                      value:
                        type: string
                        description: Field value
                        example: Test
      responses:
        200:
          description: Lead has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The lead has been updated successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'campaign' => 1,
              'status' => 1,
              'source' => 1,
              'group' => 1,
              'users' => [1, 2],
              'fields' => [
                [
                  'id' => 1,
                  'record' => 1,
                  'value' => 'Test',
                ],
              ],
            ];

            try {
                $result = $apiInstance->leadsLeadIdPatch($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdPatch: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/tabs/{tabId}/fields:
    get:
      tags:
        - "Leads"
      summary: Get lead information from a specific tab
      description: Get lead information from a specific tab. If field has a default value, the `uid` field will be `null`
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: tabId
          schema:
            type: integer
          description: Lead field tab Id
          required: true
      responses:
        200:
          description: Lead information from a specific tab
          content:
            application/json:
              schema:
                type: object
                properties:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      type:
                        type: string
                        enum: [ tab, set ]
                        example: tab
                      record:
                        type: integer
                        description: Record Id
                      fields:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeadFieldValue'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |

  /leads/{leadId}/records/{catId}/{recordId}:
    delete:
      tags:
        - "Leads"
      summary: Delete record from a lead record set
      description: The method allows deleting records from lead tabs with the type "set".
                   Values of `catId` and `recordId` can be obtained
                   by request [Get detailed lead information](#/paths/~1leads~1{leadId}/get)
                   (`details.id` = `catId`, `details.record` = `recordId`).
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: catId
          schema:
            type: integer
          description: Record category ID
          required: true
        - in: path
          name: recordId
          schema:
            type: integer
          description: Record ID
          required: true
      responses:
        200:
          description: The record has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The record has been deleted successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"

  /leads/fields:
    post:
      tags:
        - "Leads"
      summary: Create a new lead field
      description: Create a new lead field
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LeadField"
                - type: object
                  properties:
                    override:
                      type: boolean
                      description: Flag for overriding existing special field
                      example: true
      responses:
        200:
          description: Created field
          content:
            application/json:
              schema:
                summary: Created field attributes
                $ref: "#/components/schemas/LeadField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'tab' => 1,
              'label' => 'New Field',
              'type' => 'Select',
              'length' => 10,
              'default' => 'Some Value',
              'alignment' => 'left',
              'searchable' => 1,
              'special' => 'dba',
              'options' => [
                'dropdown' =>  [
                  'key' => 'key',
                  'value' => 'Option Value',
                ],
                'dupecheck' => true,
                'contactid' => 1,
                'mask' => 'validateSSN',
                'copy' => [
                  'title' => NULL,
                  'from' => [ 1, 2,],
                  'to' => [1, 2],
                ],
                'hyperlink' => true,
                'sms' => true,
                'dialer' => true,
                'googlemaps' => [1, 2],
                'zipcode_autocomplete' =>
                [
                  'city' => [1, 2],
                  'state' => [1, 2],
                  'zipcode' => [1, 2],
                ],
              ],
              'readOnly' => false,
              'required' => true,
              'override' => true,
            ];

            try {
                $result = $apiInstance->leadsFieldsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
        - "Leads"
      summary: Get a list of available lead fields
      description: Get a list of available lead fields
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of available fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LeadField"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/fields/{fieldId}:
    get:
      tags:
        - "Leads"
      summary: Get a lead field
      description: Get a lead field
      parameters:
        - in: path
          name: fieldId
          schema:
            type: integer
          description: Field Id
          required: true
      responses:
        200:
          description: Get a lead field
          content:
            application/json:
              schema:
                summary: Lead field
                $ref: "#/components/schemas/LeadField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsFieldIdGet($field_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsFieldIdGet: ' . $e->getMessage() . PHP_EOL;
            }
    patch:
      tags:
        - "Leads"
      summary: Update a lead field
      description: Update a field for the current lead
      parameters:
        - in: path
          name: fieldId
          schema:
            type: integer
          description: Field Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LeadField"
                - type: object
                  properties:
                    override:
                      type: boolean
                      description: Flag for overriding existing special field
                      example: true
      responses:
        200:
          description: Updated field attributes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'tab' => 1,
                  'label' => 'New Field',
                  'type' => 'Select',
                  'length' => 10,
                  'default' => 'Some Value',
                  'alignment' => 'left',
                  'searchable' => 1,
                  'special' => 'dba',
                  'options' => [
                    'dropdown' =>  [
                      'key' => 'key',
                      'value' => 'Option Value',
                    ],
                    'dupecheck' => true,
                    'contactid' => 1,
                    'mask' => 'validateSSN',
                    'copy' => [
                      'title' => NULL,
                      'from' => [ 1, 2,],
                      'to' => [1, 2],
                    ],
                    'hyperlink' => true,
                    'sms' => true,
                    'dialer' => true,
                    'googlemaps' => [1, 2],
                    'zipcode_autocomplete' =>
                    [
                      'city' => [1, 2],
                      'state' => [1, 2],
                      'zipcode' => [1, 2],
                    ],
                  ],
                  'readOnly' => false,
                  'required' => true,
                  'override' => true,
                ];
                $result = $apiInstance->leadsFieldsFieldIdPatch($field_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsFieldIdPatch: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/fields/{fieldId}/order:
    patch:
      tags:
        - "Leads"
      summary: Update a lead field order position
      description: Update a lead field order position for the current Lead. You can send value equal to 0 and type 'increment' or 'decrement' to set the field as first or last in the field list.
      parameters:
        - in: path
          name: fieldId
          schema:
            type: integer
          description: Field Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              summary: New field position values
              $ref: "#/components/schemas/LeadFieldOrder"
      responses:
        200:
          description: Updated Lead field order position
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Successful"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'value' => 1,
                  'type' => 'increment',
                ];
                $result = $apiInstance->leadsFieldsFieldIdOrderPatch($field_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsFieldIdOrderPatch: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/fields/tabs:
    post:
      tags:
        - "Leads"
      summary: Create a lead field tab
      description: Create a lead field tab
      requestBody:
        content:
          application/json:
            schema:
              summary: New lead field tab attributes
              $ref: "#/components/schemas/LeadFieldTab"
      responses:
        200:
          description: Create a lead field tab
          content:
            application/json:
              schema:
                summary: New lead field tab
                $ref: "#/components/schemas/LeadFieldTab"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'active' => 1,
              'position' => 1,
              'class' => 'Document',
              'name' => 'New tab',
              'description' => 'New tab',
              'order' => 1,
            ];
            try {
                $result = $apiInstance->leadsFieldsTabsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
        - "Leads"
      summary: Get a list of all lead field tabs
      description: Get a list of all lead field tabs
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of all lead field tabs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LeadFieldTab"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsTabsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/fields/tabs/{tabId}:
    get:
      tags:
        - "Leads"
      summary: Get a lead field tab
      description: Get a lead field tab
      parameters:
        - in: path
          name: tabId
          schema:
            type: integer
          description: Lead field tab Id
          required: true
      responses:
        200:
          description: Lead field tab
          content:
            application/json:
              schema:
                summary: One lead field tab
                $ref: "#/components/schemas/LeadFieldTab"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsFieldsTabsTabIdGet($tab_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsTabIdGet: ' . $e->getMessage() . PHP_EOL;
            }
    patch:
      tags:
        - "Leads"
      summary: Update a lead field tab
      description: Update a lead field tab
      parameters:
        - in: path
          name: tabId
          schema:
            type: integer
          description: Lead field tab Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              summary: New lead field tab attributes
              $ref: "#/components/schemas/LeadFieldTab"
      responses:
        200:
          description: Updated lead field tab
          content:
            application/json:
              schema:
                summary: One lead field tab
                $ref: "#/components/schemas/LeadFieldTab"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'active' => 1,
                  'position' => 1,
                  'class' => 'Document',
                  'name' => 'New tab',
                  'description' => 'New tab',
                  'order' => 1,
                ];
                $result = $apiInstance->leadsFieldsTabsTabIdPatch($tab_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsFieldsTabsTabIdPatch: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/pricing_templates:
    get:
      tags:
        - "Leads"
      summary: Get pricing templates
      description: Get pricing templates
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
                10,
                25,
                50,
                100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of pricing templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Template Id
                        name:
                          type: string
                          description: Template name
                          example: "Pricing #1"
                        created_by:
                          type: int
                          example: 1
                          description: Template creator
                        created_at:
                          type: string
                          format: date-time
                          example: "2021-02-24T13:16:13+00:00"
                          description: Template modification date and time (ISO-8601)
                        modified_by:
                          type: int
                          example: 1
                          description: Template modification date and time (ISO-8601)
                        modified_at:
                          type: string
                          format: date-time
                          example: "2021-02-24T13:16:13+00:00"
                          description: Last template editor
                        fields_changed_by:
                          type: int
                          example: 1
                          description: Last fields editor
                        fields_changed_at:
                          type: string
                          format: date-time
                          example: "2021-02-24T13:16:13+00:00"
                          description: Last fileds modification date and time (ISO-8601)
                        values:
                          type: array
                          items:
                            type: object
                            properties:
                              field_id:
                                type: int
                                example: 133
                              value:
                                type: string
                                example: Test


                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /leads/{leadId}/notes:
    post:
      tags:
      - "Leads"
      summary: Create a lead note
      description: Create a lead note
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead note
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - tab
              - note
              - sticky
              properties:
                tab:
                  type: integer
                  description: Tab Id
                  example: 1
                note:
                  type: string
                  description: Note text
                  example: Test note
                sticky:
                  type: string
                  description: Pin to top?
                  enum: [Yes, No]
                  example: Yes
                notify_users:
                  ype: string
                  description: Comma separated list of user ids to notify or `all_assigned` to notify all users assigned to the lead
                  required: false
                  example: 1,2,3
      responses:
        200:
          description: "Note has been added successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The note has been added successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'tab' => 1,
              'note' => 'Test note',
              'sticky' => 'Yes',
            ];

            try {
                $result = $apiInstance->leadsLeadIdNotesPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdNotesGet: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Leads"
      summary: Get lead notes
      description: Get lead notes
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of lead notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Note Id
                        sticky:
                          type: string
                          description: Pin note to top
                          enum: [Yes, No]
                          example: Yes
                        tab:
                          $ref: "#/components/schemas/BriefTabInfo"
                        text:
                          type: string
                          description: Note text
                        created:
                          type: string
                          description: Note creation date and time (ISO-8601)
                        modified:
                          type: string
                          description: Note modification date and time (ISO-8601)
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdNotesGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdNotesGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/appointments:
    post:
      tags:
      - "Leads"
      summary: Create a lead appointment
      description: Create a lead appointment
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead appointment
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - date
              - date_end
              - text
              - set_by
              - set_for
              properties:
                date:
                  type: string
                  format: date-time
                  example: "2018-05-30T13:16:13+00:00"
                  description: Date in format ISO 8601 (Y-m-d\TH:i:sP)
                date_end:
                  type: string
                  format: date-time
                  example: "2018-05-30T13:26:13+00:00"
                  description: End date in format ISO 8601 (Y-m-d\TH:i:sP)
                text:
                  type: string
                  description: Task description
                set_by:
                  type: string
                  description: Task set by user (User Id)
                  example: 1
                set_for:
                  type: string
                  description: Task set for user (User Id)
                  example: 1
      responses:
        200:
          description: "Appointment has been created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Appointment has been created successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'date' => '2018-05-30T13:16:13+00:00',
              'date_end' => '2018-05-30T13:26:13+00:00',
              'text' => 'string',
              'set_by' => 1,
              'set_for' => 1,
            ];

            try {
                $result = $apiInstance->leadsLeadIdAppointmentsPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdAppointmentsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Leads"
      summary: Get lead appointments
      description: Get lead appointments
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: set_for
        schema:
          type: integer
        description: Filter by the user for who appointment was created
      - in: query
        name: set_by
        schema:
          type: integer
        description: Filter by the user for who have created an appointment
      - in: query
        name: modified_by
        schema:
          type: integer
        description: Filter by the user for who have modified an appointment
      - in: query
        name: confirmed_by
        schema:
          type: integer
        description: Filter by the user for who have confirmed an appointment
      - in: query
        name: rescheduled_by
        schema:
          type: integer
        description: Filter by the user for who have rescheduled an appointment
      - in: query
        name: seen_by
        schema:
          type: integer
        description: Filter by the user for who have mark an appointment as seen
      - in: query
        name: rescheduled_count
        schema:
          type: integer
        description: Filter by the count of rescheduling
      - in: query
        name: done
        schema:
          type: boolean
        description: Filter by the done flag
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      - in: query
        name: sort_by
        schema:
          type: string
          enum: [
            'id',
            'set_for',
            'set_at',
            'set_by',
            'modified',
            'modified_by',
            'date',
            'date_end',
            'confirmed',
            'confirmed_by',
            'seen',
            'seen_by',
            'rescheduled',
            'rescheduled_by',
            'rescheduled_by'
          ]
        description: Sort appointments by columns
      - in: query
        name: sort_dir
        schema:
          type: string
          enum: [
            'asc',
            'desc'
          ]
        description: Sort direction
      - in: query
        name: date_filter
        schema:
          type: string
          enum: [
            'date',
            'set_at',
            'modified',
            'confirmed',
            'rescheduled',
            'seen'
          ]
        description: Filtering appointments by a date range depends on this filter
      - in: query
        name: start_date
        schema:
          type: string
          format: date
          example: '2019-01-01'
        description: Filter appointments by a date in format Y-m-d
      - in: query
        name: end_date
        schema:
          type: string
          format: date
          example: '2019-01-02'
        description: Filter leads by a date in format Y-m-d
      responses:
        200:
          description: A list of lead appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LeadAppointment"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdAppointmentsGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdAppointmentsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/applications/{applicationId}/populate:
    post:
      tags:
      - "Leads"
      summary: Populate PDF Document
      description: Populate a PDF document from a lead.
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: applicationId
        schema:
          type: integer
        description: Application Id
        required: true
      responses:
        200:
          description: "Document populated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Document populated successfully."
                  url:
                    type: string
                    example: "https://iriscrm.com/download/leadfile/1"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdApplicationsApplicationIdPopulatePost($lead_id, $application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdApplicationsApplicationIdPopulatePost: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/tasks:
    post:
      tags:
      - "Leads"
      summary: Create a lead task
      description: Create a lead task
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead task
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - priority
              - date
              - date_end
              - text
              - set_by
              - set_for
              properties:
                priority:
                  type: string
                  description: Priority
                  enum: [Normal, Medium, High]
                  example: Normal
                date:
                  type: string
                  description: Date in ISO 8601 format (Y-m-d\TH:i:sP)
                  example: "2018-05-30T13:16:13+00:00"
                date_end:
                  type: string
                  description: End date in ISO 8601 format (Y-m-d\TH:i:sP)
                  example: "2018-05-30T13:26:13+00:00"
                text:
                  type: string
                  description: Task description
                set_by:
                  type: string
                  description: Task set by user (user Id)
                  example: 1
                set_for:
                  type: string
                  description: Task set for user (user Id)
                  example: 1
      responses:
        200:
          description: "Task has been created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task has been created successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'priority' => 'Normal',
              'date' => '2018-05-30T13:16:13+00:00',
              'date_end' => '2018-05-30T13:26:13+00:00',
              'text' => 'string',
              'set_by' => 1,
              'set_for' => 1,
            ];

            try {
                $result = $apiInstance->leadsLeadIdTasksPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdTasksPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Leads"
      summary: Get lead tasks
      description: Get lead tasks
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of lead tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Task Id
                        user:
                          $ref: "#/components/schemas/BriefUserInfo"
                        text:
                          type: string
                          description: Task description
                        date:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: Task Date and time in format ISO 8601 (Y-m-d\TH:i:sP)
                        confirmed:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: Task confirmed date and time in format ISO 8601 (Y-m-d\TH:i:sP)
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdTasksGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdTasksGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/users:
    post:
      tags:
      - "Leads"
      summary: Assign a user
      description: Assign a user
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      requestBody:
        description: Create a lead task
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                  - user
                  properties:
                    user:
                      type: integer
                      description: User Id
                    assign_manager:
                      type: boolean
                      description: Assign User's Manager
                - type: object
                  required:
                    - email
                  properties:
                    email:
                      type: string
                      description: User Email
                    assign_manager:
                      type: boolean
                      description: Assign User's Manager
      responses:
        200:
          description: "User has been assigned successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User has been assigned successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'user' => 1
            ];

            try {
                $result = $apiInstance->leadsLeadIdUsersPost($body, $lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdUsersPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Leads"
      summary: Get a list of assigned users
      description: Get a list of assigned users
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of assigned users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefUserInfoWithClass"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdUsersGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdUsersGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/users/{userId}:
    delete:
      tags:
      - "Leads"
      summary: Unassign a user from a lead
      description: Unassign a user from a lead
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: userId
        schema:
          type: integer
        description: User Id
        required: true
      responses:
        200:
          description: "User has been unassigned successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User has been unassigned successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdUsersUserIdDelete($lead_id, $user_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdUsersUserIdDelete: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/documents:
    post:
      tags:
      - "Leads"
      summary: Upload a document
      description: Upload a document
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: tab
        schema:
          type: integer
        description: Tab Id
        required: true
      - in: query
        name: label
        schema:
          type: integer
        description: Label Id
        required: true
      - in: query
        name: filename
        schema:
          type: string
        description: File name
        required: true
      - in: query
        name: notify_users
        schema:
          type: string
        description: Comma separated list of user ids to notify or `all_assigned` to notify all users assigned to the lead
        required: false
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Document has been uploaded successfully
          content:
            text/plain:
              schema:
                type: string
                example: The document has been uploaded successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $tab = 1; // int | Tab Id
            $label = 2; // int | Label Id
            $filename = "filename_example"; // string | File name
            $body = 'file content';

            try {
                $result = $apiInstance->leadsLeadIdDocumentsPost($tab, $label, $filename, $lead_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Leads"
      summary: Get a list of available documents
      description: Get a list of available documents
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of available documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead documents"
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Document Id
                        name:
                          type: string
                          description: Name
                        size:
                          type: string
                          description: Size
                        tab:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Tab name
                        label:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Label name
                        createdAt:
                          type: string
                          format: date-time
                          example: '2019-01-01T12:04:40+05:00'
                          description: "Date and time of creation (ISO 8601)"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdDocumentsGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/file_labels:
    get:
      tags:
        - "Leads"
      summary: Get a list of available document labels
      description: Get a list of all document labels available when uploading and downloading files
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of available labels
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileLabel"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /leads/{leadId}/documents/{documentId}:
    get:
      tags:
      - "Leads"
      summary: Download a document
      description: Download a document
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: documentId
        schema:
          type: integer
        description: Document Id
        required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Document"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdDocumentsDocumentIdGet($lead_id, $document_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsDocumentIdGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/documents/download-files-archived:
    get:
      tags:
        - "Leads"
      summary: Download files archived
      description: Download files archived
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: query
          name: files[]
          schema:
            type: array
            items:
              type: integer
              description: "IDs of existing files"
              example: 123
      responses:
        200:
          description: Documents Archive URL
          content:
            application/json:
              schema:
                name: LeadDocumentsArchive
                type: object
                properties:
                  code:
                    type: integer
                    description: "Status code"
                    example: 1
                  file_ids:
                    type: array
                    description: "File Ids with no permissions"
                    items:
                      type: integer
                      example: 123
                  labels:
                    type: array
                    description: "Labels have no permission to download"
                    items:
                      type: string
                      example: [label_id => label_name]
                  archive_url:
                    type: string
                    description: "Archive URL"
                    example: https://hostname.com/tmp/lead_documents_630cb4efd0cfe1.46637711UWn9sq
                  message:
                    type: string
                    description: "Message"
                    example: Link is valid for the next 15 minutes
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdDocumentsArchiveGet($lead_id, $document_ids);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdDocumentsDocumentIdGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/signatures/{applicationId}/generate:
    post:
      tags:
      - "E-Signature"
      summary: Generate an e-signature document
      description: Generate a new electronic signature document and receive a signature-ready application URL.
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: applicationId
        schema:
          type: integer
        description: Application Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expire:
                  type: boolean
                  example: true
                  description: Expire the previously generated application
      responses:
        200:
          description: New E-Sign application hash and link to signature
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Result message
                    example: "E-signature documented was generated successfully."
                  hash:
                    type: string
                    description: E-Sign hash
                  url:
                    type: string
                    example: "https://iriscrm.com/sign/91391fe5"
                    description: E-Sign URL
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdSignaturesApplicationIdGeneratePost($lead_id, $application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSignaturesApplicationIdGeneratePost: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/signatures/{applicationId}/send:
    post:
      tags:
        - "E-Signature"
      summary: Send an e-signature document
      description: Send an e-signature document using an email template for signature.
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: applicationId
          schema:
            type: integer
          description: Application Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipients:
                  type: array
                  minItems: 1
                  maxItems: 5
                  items:
                    - type: object
                      properties:
                        fieldId:
                          type: integer
                          description: Lead Field Id with email address
                          example: 1
                    - type: object
                      properties:
                        email:
                          description: Recipient Email
                          type: string
                          format: email
                          example: example@iriscrm.com
                        name:
                          description: Recipient Name
                          type: string
                          example: John Doe
                    - type: object
                      properties:
                        email:
                          description: Recipient Email
                          type: string
                          format: email
                          example: jane@example.com
                        name:
                          description: Recipient Name
                          type: string
                          example: Jane Doe
                    - type: object
                      properties:
                        fieldId:
                          type: integer
                          description: Lead Field Id with email address
                          example: 2
                    - type: object
                      properties:
                        email:
                          description: Recipient Email
                          type: string
                          format: email
                          example: jack@example.com
                        name:
                          description: Recipient Name
                          type: string
                          example: Jack Doe
                expire:
                  type: boolean
                  example: true
                  description: Expire the previously generated application
      responses:
        200:
          description: New E-Sign application hash and link to signature
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Result message
                    example: 'E-signature documented was generated and sent to email successfully.'
                  emailId:
                    type: integer
                    description: Id of email what was sent
                    example: 11
                  hash:
                    type: string
                    example: '91391fe5'
                    description: E-Sign hash
                  url:
                    type: string
                    example: "https://iriscrm.com/sign/91391fe5"
                    description: E-Sign URL
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'fieldId' => 1
                ];
                $result = $apiInstance->leadsLeadIdSignaturesApplicationIdSendPost($lead_id, $application_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSignaturesApplicationIdSendPost: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/signatures/{applicationId}/download:
    get:
      tags:
        - "E-Signature"
      summary: Download an e-signature document
      description: Download an e-signature document.
      parameters:
        - in: path
          name: applicationId
          schema:
            type: integer
          description: Application Id
          required: true
      responses:
        200:
          description: E-Sign document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsSignaturesApplicationIdDownloadGet($application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsSignaturesApplicationIdDownloadGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/signatures:
    get:
      tags:
      - "E-Signature"
      summary: Get a list of all lead e-signatures documents
      description: Get a list of all lead e-signatures documents
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        '200':
          description: A list with all lead e-signatures
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                          example: Generated
                        url:
                          type: string
                          example: "https://iriscrm.com/sign/91391fe5"
                        templateId:
                          type: string
                          example: E-signature template
                        templateName:
                          type: string
                          example: E-signature name
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdSignaturesApplicationIdGeneratePost($lead_id, $application_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSignaturesApplicationIdGeneratePost: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/webforms:
    get:
      tags:
        - "Web Forms"
      summary: Get a list of lead web form sessions
      description: Get a list of lead web form sessions
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: show_archived
          schema:
            type: boolean
          description: Whether or not to include archived web form sessions
        - in: query
          name: status
          schema:
            type: string
            enum: [
              'generated',
              'sent',
              'form_opened',
              'esign_opened',
              'saved',
              'form_completed',
              'esign_completed'
            ]
          description: Filter by status
      responses:
        200:
          description: List of Lead Web Forms
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: array
                      items:
                        $ref: "#/components/schemas/WebFormSession"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
  /leads/{leadId}/webforms/{webFormDefaultId}/generate:
    post:
      tags:
        - "Web Forms"
      summary: Generate web form
      description: Generate a new web form from a lead.
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: webFormDefaultId
          schema:
            type: integer
          description: Web Form Default ID
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expire:
                  type: boolean
                  example: true
                  description: Expire the previously generated web forms
      responses:
        200:
          description: New Web Form session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebFormSession"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
  /leads/{leadId}/webforms/{webFormSessionId}/send:
    post:
      tags:
        - "Web Forms"
      summary: Send web form
      description: Send a lead web form.
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: webFormSessionId
          schema:
            type: integer
          description: Web Form Session Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_template_id:
                  type: integer
                  example: 15
                  description: Email template ID
                  required: true
                recipients:
                  type: array
                  minItems: 1
                  maxItems: 5
                  items:
                    - type: object
                      properties:
                        fieldId:
                          type: integer
                          description: Lead Field Id with email address
                          example: 1
                    - type: object
                      properties:
                        email:
                          description: Recipient Email
                          type: string
                          format: email
                          example: example@iriscrm.com
                        name:
                          description: Recipient Name
                          type: string
                          example: John Doe
                    - type: object
                      properties:
                        email:
                          description: Recipient Email
                          type: string
                          format: email
                          example: jane@example.com
                        name:
                          description: Recipient Name
                          type: string
                          example: Jane Doe
                    - type: object
                      properties:
                        fieldId:
                          type: integer
                          description: Lead Field Id with email address
                          example: 2
                    - type: object
                      properties:
                        email:
                          description: Recipient Email
                          type: string
                          format: email
                          example: jack@example.com
                        name:
                          description: Recipient Name
                          type: string
                          example: Jack Doe
      responses:
        200:
          description: Web Form Send Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Result message
                    example: 'Web Form was sent successfully.'
                  hash:
                    type: string
                    example: '91391fe5'
                    description: Web Form session hash
                  url:
                    type: string
                    example: "https://iriscrm.com/form-sign/91391fe5"
                    description: Web Form URL
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
  /leads/{leadId}/emails/{templateId}:
    post:
      tags:
      - "Leads"
      summary: Send an email to lead with template
      description: Send an email to lead with template
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: templateId
        schema:
          type: integer
        description: Template Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    fieldId:
                      type: integer
                      description: Lead Field Id with email address
                      example: 1
                    placeholders:
                      type: object
                      description: Object with template placeholders
                - type: object
                  properties:
                    email:
                      description: Recipient Email
                      type: string
                      format: email
                      example: example@iriscrm.com
                    name:
                      description: Recipient Name
                      type: string
                      example: John Doe
                    placeholders:
                      type: object
                      description: Object with template placeholders
      responses:
        200:
          description: Result of proccess
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Email has been sent successfully
                    example: Email has been sent successfully.
                  emailId:
                    type: string
                    description: Id of email what will be sended to lead
                    example: 1
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'fieldId' => 1
                ];

                $result = $apiInstance->leadsLeadIdEmailsTemplateIdPost($lead_id, $template_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdEmailsTemplateIdPost: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/emails/templates:
    get:
      tags:
        - "Leads"
      summary: Get a list of email templates
      description: Get list of available email templates for a lead email
      responses:
        200:
          description: A list of available email templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefEmailTemplate"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsEmailsTemplatesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsEmailsTemplatesGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/mailbox/{emailId}/attachment/{attachmentId}:
    get:
      tags:
        - "Leads"
      summary: Download a mailbox email attachment
      description: Download a mailbox email attachment
      parameters:
        - in: path
          name: leadId
          schema:
            type: integer
          description: Lead Id
          required: true
        - in: path
          name: emailId
          schema:
            type: integer
          description: Email Id
          required: true
        - in: path
          name: attachmentId
          schema:
            type: integer
          description: Attachment Id
          required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Attachment"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet($lead_id, $email_id, $attachment_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/sms/{templateId}:
    post:
      tags:
      - "Leads"
      summary: Send an SMS to lead with selected SMS template
      description: Send an SMS to lead with selected SMS template.
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: path
        name: templateId
        schema:
          type: integer
        description: Template Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    fieldId:
                      type: integer
                      example: 1
                - type: object
                  properties:
                    phone:
                      type: string
                      example: '206-206-2623'
      responses:
        200:
          description: Result of proccess
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: SMS has been sent successfully.
                    example: SMS has been sent successfully.
                  receiver:
                    type: string
                    description: Phone number of SMS receiver.
                    example: '123-456-7890'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'fieldId' => 1
                ];
                $result = $apiInstance->leadsLeadIdSmsTemplateIdPost($lead_id, $template_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdSmsTemplateIdPost: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/sms/templates:
    get:
      tags:
        - "Leads"
      summary: Get list of SMS templates
      description: Get list of available SMS templates for sending SMS to a lead
      responses:
        200:
          description: A list of available SMS templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefSmsTemplate"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsSmsTemplatesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsSmsTemplatesGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/campaign:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead campaign activity
      description: Get a list of all lead campaign activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CampaignActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityCampaignGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityCampaignGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/deletion:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead deletion activity
      description: Get a list of all lead deletion activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeletionActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityDeletionGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityDeletionGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/duplicates:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead duplicate activity
      description: Get a list of all lead duplicate activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DuplicateActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityDuplicatesGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityDuplicatesGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/links:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead links activity
      description: Get a list of all lead links activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/LinksActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityLinksGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityLinksGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/source:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead source activity
      description: Get a list of all lead source activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SourceActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivitySourceGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivitySourceGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/status:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead status activity
      description: Get a list of all lead status activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StatusActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityStatusGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityStatusGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/{leadId}/activity/revision-history:
    get:
      tags:
      - "Leads"
      summary: Get a list of all lead field revision activity
      description: Get a list of all lead field revision activity
      parameters:
      - in: path
        name: leadId
        schema:
          type: integer
        description: Lead Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500
          ]
        description: Count of records per page
      - in: query
        name: reveal_secure
        schema:
          type: integer
          enum: [0,1]
        description: Allows returning the lead's secure field values decrypted (for users who has Secure Fields Exporting permission)
      responses:
        200:
          description: A list of activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FieldRevisionActivity"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsLeadIdActivityRevisionHistoryGet($lead_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsLeadIdActivityRevisionHistoryGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/applications:
    get:
      tags:
      - "E-Signature"
      summary: Get a list of available applications
      description: Get a list of available applications
      responses:
        200:
          description: A list of available applications
          content:
            application/json:
              schema:
                type: array
                description: "A list of lead applications"
                items:
                  $ref: "#/components/schemas/BriefApplicationInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/applications/{appId}/mappings:
    post:
      tags:
      - "E-Signature"
      summary: Create a new application field mapping
      description: Creation of new application field mapping
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationField"
      responses:
        200:
          description: Created new application field mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            $body = [
              'from' => 1,
              'record' => 1,
              'to' => 'Test',
              'toAlt' => 'Alt test',
              'toType' => 'Text',
              'special' => 'chk',
            ];

            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsPost($app_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "E-Signature"
      summary: Get a list of available application field mappings
      description: Get a list of available application field mappings
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100,
            500,
            1000
          ]
        description: Count of records per page
      responses:
        200:
          description: A list of available application field mappings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApplicationField"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsGet($app_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/applications/{appId}/mappings/{mapId}:
    get:
      tags:
      - "E-Signature"
      summary: Get an application field mapping list
      description: Get an application field mapping list
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: path
        name: mapId
        schema:
          type: integer
        description: Mapping Id
        required: true
      responses:
        200:
          description: Application field mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsMapIdGet($app_id, $map_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsMapIdGet: ' . $e->getMessage() . PHP_EOL;
            }
    patch:
      tags:
      - "E-Signature"
      summary: Update an application field mapping
      description: Update an application field mapping
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: path
        name: mapId
        schema:
          type: integer
        description: Mapping Id
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationField"
      responses:
        200:
          description: Updated application field mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationField"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'from' => 1,
                  'record' => 1,
                  'to' => 'Test',
                  'toAlt' => 'Alt test',
                  'toType' => 'Text',
                  'special' => 'chk',
                ];

                $result = $apiInstance->leadsApplicationsAppIdMappingsMapIdPatch($app_id, $map_id, $body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsMapIdPatch: ' . $e->getMessage() . PHP_EOL;
            }
    delete:
      tags:
      - "E-Signature"
      summary: Delete an application field mapping
      description: Deletion of application field mapping
      parameters:
      - in: path
        name: appId
        schema:
          type: integer
        description: Application Id
        required: true
      - in: path
        name: mapId
        schema:
          type: integer
        description: Mapping Id
        required: true
      responses:
        200:
          description: Updated application field mapping
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Mapping was successfully removed.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsApplicationsAppIdMappingsMapIdDelete($app_id, $map_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsApplicationsAppIdMappingsMapIdDelete: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/campaigns:
    get:
      tags:
      - "Leads"
      summary: Get a list of available campaigns
      description: Get a list of available campaigns
      responses:
        200:
          description: A list of available campaigns
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead campaigns"
                    items:
                      $ref: "#/components/schemas/BriefCampaignInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsCampaignsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsCampaignsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/groups:
    get:
      tags:
      - "Leads"
      summary: Get a list of available groups
      description: Get a list of available groups
      parameters:
        - in: query
          name: status
          schema:
            type: integer
          description: Status Id
      responses:
        200:
          description: A list of available groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead groups"
                    items:
                      $ref: "#/components/schemas/BriefGroupInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsGroupsGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsGroupsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/sources:
    get:
      tags:
      - "Leads"
      summary: Get a list of available sources
      description: Get a list of available sources
      responses:
        200:
          description: A list of available sources
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead sources"
                    items:
                      $ref: "#/components/schemas/BriefSourceInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsSourcesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsSourcesGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/statuses:
    get:
      tags:
      - "Leads"
      summary: Get a list of available statuses
      description: Get a list of available statuses
      parameters:
        - in: query
          name: group
          schema:
            type: integer
          description: Group Id
      responses:
        200:
          description: A list of available statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "A list of lead statuses"
                    items:
                      $ref: "#/components/schemas/CategoryWithStatuses"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsStatusesGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsStatusesGet: ' . $e->getMessage() . PHP_EOL;
            }
  /leads/users:
    get:
      tags:
      - "Leads"
      summary: Get a list of available users
      description: Get a list of available users for assigning
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100
            ]
          description: Count of records per page
      responses:
        200:
          description: A list of available users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefUserInfoWithClass"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->leadsUsersGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling LeadsApi->leadsUsersGet: ' . $e->getMessage() . PHP_EOL;
            }


  /subscriptions:
    post:
      tags:
        - "Subscriptions"
      summary: Create a subscription
      description: Create a subscription
      requestBody:
        description: Subscription details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BriefSubscriptionInfo"
      responses:
        200:
          description: Subscription has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BriefSubscriptionInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'url' => 'https://example.com/hook',
                  'events' => ['api.updated'],
                  'multiple_at_once' => true,
                ];
                $result = $apiInstance->subscriptionsPost($body);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsPost: ' . $e->getMessage() . PHP_EOL;
            }
    get:
      tags:
      - "Subscriptions"
      summary: Return a list of subscriptions
      description: Return a list of subscriptions
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page Number
      - in: query
        name: per_page
        schema:
          type: integer
          enum: [
            10,
            25,
            50,
            100
          ]
        description: Count of records per page
      responses:
        200:
          description: A JSON array of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefSubscriptionInfo"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsGet($page);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/{subscriptionId}:
    get:
      tags:
      - "Subscriptions"
      summary: Return a subscription by its id
      description: Return a subscription details
      parameters:
      - in: path
        name: subscriptionId
        schema:
          type: integer
        description: Subscription Id
        required: true
      responses:
        200:
          description: Subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BriefSubscriptionInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSubscriptionIdGet($subscription_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSubscriptionIdGet: ' . $e->getMessage() . PHP_EOL;
            }
    patch:
      tags:
        - "Subscriptions"
      summary: Update a subscription
      description: Update a subscription
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: integer
          description: Subscription Id
          required: true
      requestBody:
        description: Subscription details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BriefSubscriptionInfo"
      responses:
        200:
          description: Subscription has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BriefSubscriptionInfo"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $body = [
                  'url' => 'https://example.com/hook',
                  'events' => ['api.updated'],
                  'multiple_at_once' => true,
                ];
                $result = $apiInstance->subscriptionsSubscriptionIdPatch($body, $subscription_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSubscriptionIdPatch: ' . $e->getMessage() . PHP_EOL;
            }
    delete:
      tags:
        - "Subscriptions"
      summary: Delete a subscription
      description: Delete a subscription
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: integer
          description: Subscription Id
          required: true
      responses:
        200:
          description: Subscription (1) has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Subscription deletion message
                    example: Subscription (1) has been deleted successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSubscriptionIdDelete($subscription_id);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSubscriptionIdDelete: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/subscription.test:
    get:
      tags:
        - "Subscriptions"
      summary: Test payload for checking server response
      description: "Example use: stay aware of changes and additions to the API."
      responses:
        200:
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSubscription'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/api.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when this API is updated
      description: "Example use: stay aware of changes and additions to the API."
      responses:
        200:
          description: API details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleApiUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleApiUpdatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.created:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead is created in this CRM, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: create a record in an external system when a lead is created in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadCreatedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadCreatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadCreatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's campaign, status, group, or field values are updated in this CRM, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: update field information for a record in an external system when the corresponding information is updated in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadUpdatedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadUpdatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.deleted:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead in this CRM is deleted
      description: "Example use: update the status, post a note, or delete a record in an external system when a lead is deleted in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadDeletedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadDeletedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadDeletedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.restored:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a deleted lead is restored in this CRM
      description: "Example use: update the status, post a note, or restore a record in an external system when a deleted lead is restored in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadRestoredEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadRestoredGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadRestoredGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.status.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's status is updated in this CRM, with the option to only receive a notification when a lead is moved to or from the status(es) specified here
      description: "Example use: update the status of a record in an external system after the lead's status is updated in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadStatusUpdatedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadStatusUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadStatusUpdatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.signature.generated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's e-signature document is generated
      description: "Example use: update an external system when a user generates an electronic signature document."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureGenerated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/lead.signature.opened:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's e-signature document is opened by the recipient
      description: "Example use: update an external system when a recipient clicks a link to open an electronic signature document."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureOpened'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /subscriptions/sample/lead.signature.signed:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead's e-signature document is signed by the recipient
      description: "Example use: update an external system when one or all recipients signed an electronic signature document."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureSigned'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /subscriptions/sample/lead.note.added:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead in this CRM has a note posted, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: add a note to a record in an external system when a note is posted on a lead in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadNoteAddedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadNoteAddedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadNoteAddedGet: ' . $e->getMessage() . PHP_EOL;
            }

  /subscriptions/sample/lead.user.assigned:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead in this CRM has user assigned
      description: "Example use: track assigned users in an external system when new user assigned to a lead in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadUserAssignedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"


  /subscriptions/sample/lead.user.unassigned:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead in this CRM has user unassigned
      description: "Example use: track assigned users in an external system when new user unassigned from a lead in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadUserUnassignedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /subscriptions/sample/lead.document.uploaded:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a lead document is uploaded
      description: "Example use: update the record in an external system after the lead's uploaded document in this CRM."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadDocumentUploadedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadDocumentUploadedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadDocumentUploadedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/lead.email.received:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when an email message is received on a lead in this CRM, with the option to only receive a notification when a lead is in the status(es) specified here
      description: "Example use: update the status of a lead when an email is received if it's in a certain status."
      responses:
        200:
          description: Lead details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadEmailReceivedEventInfo'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleLeadEmailReceivedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleLeadEmailReceivedGet: ' . $e->getMessage() . PHP_EOL;
            }

  
  /subscriptions/sample/turboapp.submitted:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a TurboApp is submitted to a processor
      description: "Example use: create a record in an external system when a TurboApp is submitted."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppSubmitted'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappSubmittedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappSubmittedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/turboapp.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when the underwriting status is updated
      description: "Example use: update the status of a merchant record in your system when TurboApp receives an underwriting update from the processor."
      responses:
        200:
          description: Application account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappUpdatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/turboapp.approved:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a merchant is approved
      description: "Example use: update the status of a record in your system when TurboApp receives an approval status from the processor."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppApproved'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappApprovedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappApprovedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/turboapp.declined:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a merchant is declined
      description: "Example use: update the status of a record in your system when TurboApp receives a declined status by the processor."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppDeclined'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappDeclinedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappDeclinedGet: ' . $e->getMessage() . PHP_EOL;
  /subscriptions/sample/turboapp.equipment.created:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when Equipment is created
      description: "Example use: update the status of a record in your system when TurboApp receives equipment from the processor. \n\n
        Note: This event is only triggered when a piece of equipment is created for Fiserv North and TSYS applications."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppEquipmentCreated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappEquipmentCreatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappEquipmentCreatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  /subscriptions/sample/turboapp.equipment.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when Equipment is updated
      description: "Example use: update the status of a record in your system when TurboApp receives equipment from the processor. \n\n
        Note: This event is only triggered when a piece of equipment is updated for Fiserv North and TSYS applications."
      responses:
        200:
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurboAppEquipmentUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
      x-code-samples:
        - lang: 'PHP'
          source: |
            try {
                $result = $apiInstance->subscriptionsSampleTurboappEquipmentUpdatedGet();
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling SubscriptionsApi->subscriptionsSampleTurboappEquipmentUpdatedGet: ' . $e->getMessage() . PHP_EOL;
            }
  
  /subscriptions/sample/ticket.created:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is created
      description: "Example use: receive an alert with ticket details every time a new ticket is created."
      responses:
        200:
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCreated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is updated
      description: "Example use: receive an alert with ticket details every time a ticket is updated."
      responses:
        200:
          description: Ticket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.deleted:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is deleted
      description: "Example use: receive an alert with ticket details when ticket is deleted."
      responses:
        200:
          description: Ticket is deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketDeleted'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.resolved:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket is resolved
      description: "Example use: receive an alert with ticket details every time a ticket is resolved."
      responses:
        200:
          description: Ticket resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResolved'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.commented:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket comment is added
      description: "Example use: receive an alert when a user adds a comment to a ticket."
      responses:
        200:
          description: Ticket commented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCommented'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.comment.edited:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket comment is edited
      description: "Example use: receive an alert when a user edited a comment in a ticket."
      responses:
        200:
          description: Ticket comment edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCommentEdited'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/ticket.checklist.updated:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a ticket's checklist is updated
      description: "Example use: receive an alert when a checklist item is updated on a ticket."
      responses:
        200:
          description: Ticket Checklist updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

    

  /subscriptions/sample/residuals.report.published:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification when a residuals report is published
      description: "Example use: update the status of a record in your system when a residuals report is published. 
      If the user with the subscription is Admin-type and they have Residuals and Systemwide Merchants permissions, 
      they will be notified by the API even if the Notify option was not selected when publishing the residuals report
      and the user is not assigned to a merchant in the report."
      responses:
        200:
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportPublished'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/residuals.lineitem.added:
    get:
      tags:
        - "Subscriptions"
      summary:  Receive a notification when a residuals line item is added
      description: "Example use: Trigger a workflow as soon as a line item is added"
      responses:
        200:
          description: Line item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItemAdded'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/chargeback.added:
    get:
      tags:
        - "Subscriptions"
      summary:  Receive a notification when a new chargeback case created
      description: "Example use: notify the responsible person when a new chargeback case created, so the reply can be submitted before the due date"
      responses:
        200:
          description: Chargeback case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebackAdded'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/chargeback.updated:
    get:
      tags:
        - "Subscriptions"
      summary:  Receive a notification when chargeback case status changed
      description: "Example use: check the chargeback case updates to make sure the reply is in review or is it lost or won"
      responses:
        200:
          description: Chargeback case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebackUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/chargeback.reminder:
    get:
      tags:
        - "Subscriptions"
      summary: Receive a notification in 7/3/1 days before the chargeback case due date
      description: "Example use: remind a client to post a reply for the chargeback case"
      responses:
        200:
          description: Chargeback case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebackReminder'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/retrieval.added:
    get:
      tags:
        - "Subscriptions"
      summary:  Receive a notification when a new retrieval case created
      description: "Example use: notify the responsible person when a new retrieval case created, so the reply can be submitted before the due date"
      responses:
        200:
          description: Retrieval case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievalAdded'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/retrieval.updated:
    get:
      tags:
        - "Subscriptions"
      summary:  Receive a notification when retrieval case status changed
      description: "Example use: check the retrieval case updates to make sure the reply is in review or is it lost or won"
      responses:
        200:
          description: Retrieval case details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievalUpdated'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /subscriptions/sample/retrieval.reminder:
     get:
       tags:
         - "Subscriptions"
       summary: Receive a notification in 7/3/1 days before the retrieval case due date
       description: "Example use: remind a client to post a reply for the retrieval case"
       responses:
         200:
           description: Retrieval case details
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/RetrievalReminder'
         401:
           $ref: "#/components/responses/UnauthorizedError"
         403:
           $ref: "#/components/responses/ForbiddenError"
         404:
           $ref: "#/components/responses/NotFoundError"
    
  /helpdesk:
    post:
      tags:
        - "Helpdesk"
      summary: Create a new ticket
      description: Create a new ticket
      requestBody:
        description: Ticket details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - subject
                - priority
                - assignType
                - assignTo
              properties:
                type:
                  type: integer
                  description: "Type id"
                  example: 1
                subject:
                  type: string
                  description: "Ticket subject"
                  example: "Ticket subject"
                description:
                  type: string
                  description: "Ticket description"
                  example: "Ticket description"
                priority:
                  type: integer
                  description: "Priority (0 - Normal, 1 - Medium, 2 - Rush)"
                  enum: [0, 1, 2]
                  example: 1
                assignedUsers:
                  type: array
                  items:
                    type: integer
                    description: "Assigned user ID's"
                    example: 11
                assignedMergeWithDefault:
                  type: boolean
                  description: "Set to `true` if you want to merge `assignedUsers` with the default users from a ticket type. Default value is `false`"
                  example: true
                files:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file (Deprecated, use 'extended_files' instead)"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                extended_files:
                  type: array
                  description: "Files data"
                  items:
                    type: object
                    properties:
                      tmp_name:
                        type: string
                        description: "Name of the temporary file"
                        example: "15dfd5e51a10145.87303877_ticket_file.png"
                      title:
                        type: string
                        description: "Name of the file"
                        example: "file_name"
                      label:
                        type: int
                        description: "File Label Id"
                        example: 1
                attached_files:
                  type: array
                  items:
                    type: integer
                    description: "IDs of existing files"
                    example: 123
                preview_images:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                assignType:
                  type: string
                  enum: [lead, merchant, none]
                  example: lead
                assignTo:
                  type: integer
                  example: 123
                group_id:
                  type: integer
                  example: 123
                due_date:
                  type: string
                  format: date-time
                  example: '2020-10-20T12:04:40-05:00'
                  description: "Ticket due datetime"
                only_business_days:
                  type: boolean
                  description: "Calculate only business days"
                  example: true
                notify_assigned_users:
                  type: boolean
                  example: true
                  description: Notify assigned users
                
                merchantVisible:
                  type: boolean
                  description: "Indicates if the ticket is visible to Merchant users"
                  example: true

                
                checklist:
                  type: array
                  items:
                    $ref: "#/components/schemas/CheckListRequest"
      responses:
        200:
          description: Ticket has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        405:
          $ref: "#/components/responses/ValidationError"
    get:
      tags:
        - 'Helpdesk'
      summary: Get a list of helpdesk tickets
      description: 'Return a list of helpdesk tickets. </br>
        <span style="color: rgb(224, 157, 67)">By default, the endpoint returns only
        tickets assigned to the users. Set `assigned_to` query parameter to the empty string
        and `unassigned` to the 1 if You need to select <strong>ALL</strong> tickets</span>'
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [
              id,
              status,
              subject,
              files,
              type,
              priority,
              last_comment,
              created,
              modified,
              resolved,
              mid,
              due
            ]
          description: Sorting of helpdesk tickets by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direction of sorting
        - in: query
          name: date_filter
          schema:
            type: string
            enum: [last_comment, created, modified, resolved, status_updated, due]
          description: Filter tickets by the specific date field
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'Start date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'End date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: group
          schema:
            type: string
            example: '1,2,3,4'
          description: Filter tickets by the specific ticket groups
        - in: query
          name: type
          schema:
            type: string
            example: '1,2,3,4'
          description: Filter tickets by the specific ticket types
        - in: query
          name: creator
          schema:
            type: number
            example: 1
          description: Filter tickets by the ticket creator
        - in: query
          name: modifier
          schema:
            type: number
            example: 1
          description: Filter tickets by the ticket modifier
        - in: query
          name: search
          schema:
            type: string
            example: Search criteia
          description: Search tickets by some criteria
        - in: query
          name: search_by
          schema:
            type: string
            example: description
            enum: [
              'all',
              'ticket_id',
              'name',
              'description',
                            'mid',
                            'dba',
              'comments',
              'attachments'
            ]
          description: Search tickets by some specific field
        - in: query
          name: resolver
          schema:
            type: number
            example: 1
          description: Filter tickets by the ticket resolver
        - in: query
          name: lid
          schema:
            type: number
            example: 1
          description: Filter tickets by the Lead ID

    
        - in: query
          name: mid
          schema:
            type: string
            example: 1
          description: Filter tickets by the Merchant ID

    
        - in: query
          name: hide_resolved
          schema:
            type: boolean
            example: 1
          description: Hide resolved ticket
        - in: query
          name: assigned_to
          schema:
            type: string
            example: '1,2,3,4'
          description: Filter tickets by the assigned users. For sending multiple users please send them in comma seperated format.
                       Please use an empty string to select all assigned tickets.
        - in: query
          name: unassigned
          schema:
            type: boolean
            example: 1
          description: Set this parameter to 1 if you need unassigned tickets also. For select only unassigned tickets
                       exclude `assigned_to` from the request
      responses:
        200:
          description: A JSON array of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/BriefTicketInfo"
                        - type: object
                          properties:
                            created_username:
                              type: string
                              example: John Doe
                            modified_username:
                              type: string
                              example: Jane Doe
                            resolved_username:
                              type: string
                              example: Jack Doe
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /helpdesk/{ticketId}/comment:
    post:
      tags:
        - "Helpdesk"
      summary: Add a ticket comment
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      description: Post a comment
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: "Comment text"
                  example: 'Comment text'
                notify:
                  type: array
                  items:
                    type: integer
                    description: "User ID's what should be notified"
                    example: 11
                files:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file (Deprecated, use 'extended_files' instead)"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                extended_files:
                  type: array
                  description: "Files data"
                  items:
                    type: object
                    properties:
                      tmp_name:
                        type: string
                        description: "Name of the temporary file"
                        example: "15dfd5e51a10145.87303877_ticket_file.png"
                      title:
                        type: string
                        description: "Name of the file"
                        example: "file_name"
                      label:
                        type: int
                        description: "File Label Id"
                        example: 1
                attached_files:
                  type: array
                  items:
                    type: integer
                    description: "IDs of existing files"
                    example: 123
                preview_images:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"

                
                merchantVisible:
                  type: boolean
                  description: "Indicates if the comment is visible to Merchant users"
                  example: true

                
      responses:
        200:
          description: Comment was added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BriefTicketComments"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"

  /helpdesk/{ticketId}:
    get:
      tags:
        - 'Helpdesk'
      summary: Get detailed ticked information
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      responses:
        200:
          description: A JSON array of tickets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - "Helpdesk"
      summary: Update a ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      description: Update a ticket
      requestBody:
        description: Ticket details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: integer
                  description: "Type id"
                  example: 1
                subject:
                  type: string
                  description: "Ticket subject"
                  example: "Ticket subject"
                description:
                  type: string
                  description: "Ticket description"
                  example: "Ticket description"
                status:
                  type: string
                  description: "Ticket status"
                  enum: [
                    new, open, in_progress, info_required, resolved
                  ]
                  example: resolved
                priority:
                  type: integer
                  description: "Priority (0 - Normal, 1 - Medium, 2 - Rush)"
                  enum: [0, 1, 2]
                  example: 1
                assignedUsers:
                  type: array
                  items:
                    type: integer
                    description: "Assigned user ID's"
                    example: 11
                assignedMergeWithDefault:
                  type: boolean
                  description: "Set to `true` if you want to merge `assignedUsers` with the default users from a ticket type. Default value is `false`"
                  example: true
                due_date:
                  type: string
                  format: date-time
                  example: '2020-10-20T12:04:40-05:00'
                  description: "Ticket due datetime"
                only_business_days:
                  type: boolean
                  description: "Calculate only business days"
                  example: true
                assignType:
                  type: string
                  enum: [lead, merchant, none]
                  example: lead
                assignTo:
                  type: integer
                  example: 123
                files:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file (Deprecated, use 'extended_files' instead)"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                extended_files:
                  type: array
                  description: "Files data"
                  items:
                    type: object
                    properties:
                      tmp_name:
                        type: string
                        description: "Name of the temporary file"
                        example: "15dfd5e51a10145.87303877_ticket_file.png"
                      title:
                        type: string
                        description: "Name of the file"
                        example: "file_name"
                      label:
                        type: int
                        description: "File Label Id"
                        example: 1
                attached_files:
                  type: array
                  items:
                    type: integer
                    description: "IDs of existing files"
                    example: 123
                preview_images:
                  type: array
                  items:
                    type: string
                    description: "ID to ticket file"
                    example: "15dfd5e51a10145.87303877_ticket_file.pdf"
                group_id:
                  type: integer
                  example: 123

                
                merchantVisible:
                  type: boolean
                  description: "Indicates if the ticket is visible to Merchant users"
                  example: true

                
                checklist:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/CheckListRequest"
                      - type: object
                        properties:
                          new_files:
                            type: array
                            description: "New files (Deprecated, use 'extended_files' instead)"
                            items:
                              type: string
                              example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
                          attached_files:
                            type: array
                            items:
                              type: integer
                              example: 123
      responses:
        200:
          description: Ticket has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    delete:
      tags:
        - "Helpdesk"
      summary: Delete a ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      description: Delete a ticket
      responses:
        200:
          description: Ticket has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /helpdesk/{ticketId}/assignments:
    get:
      tags:
        - 'Helpdesk'
      summary: Get ticked assignment logs
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
      responses:
        200:
          description: A JSON array of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  - type: object
                    properties:
                      active:
                        type: boolean
                      source:
                        type: string
                      date:
                        type: string
                      user:
                        type: number
                      assigned_by:
                        type: number

        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /helpdesk/file:
    post:
      tags:
        - "Helpdesk"
      summary: Upload temporary file that will be added to a ticket, comment, checklist, or ticket type
      description: Upload temporary file that will be added to a ticket, comment, checklist, or ticket type
      parameters:
        - in: query
          name: extension
          schema:
            type: string
            example: pdf
          description: File extension for validation
          required: true
        - in: query
          name: name
          schema:
            type: string
            example: pdf
          description: File name for validation
          required: true
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Document
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  fileId:
                    type: string
                    example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /helpdesk/{ticketId}/download/{attachmentId}:
    get:
      tags:
        - "Helpdesk"
      summary: Download an attachment from a ticket
      parameters:
        - in: path
          name: ticketId
          schema:
            type: integer
          description: Ticket Id
          required: true
        - in: path
          name: attachmentId
          schema:
            type: integer
          description: Attachment Id
          required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Document"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
  /helpdesk/types:
    post:
      tags:
        - 'Helpdesk'
      summary: Create a new helpdesk ticket type
      description: Create a new helpdesk ticket type
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TicketTypeRequest"
                - type: object
                  properties:
                    checklist:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/BriefTicketChecklistInfo'
                          - type: object
                            properties:
                              files:
                                type: array
                                items:
                                  type: string
                                  example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    get:
      tags:
        - 'Helpdesk'
      summary: Get a list of helpdesk ticket types
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [
              id,
              name,
              created,
              modified,
              status,
              order
            ]
          description: Sorting of helpdesk ticket types by the field value
        - in: query
          name: sort_dir
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direction of sorting
        - in: query
          name: date_filter
          schema:
            type: string
            enum: [created, modified]
          description: Filter ticket types by the specific date field
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'Start date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
            example: '2019-01-01T12:04:40+05:00'
          description: 'End date for date_filter filter in format ISO 8601 (**Please note that `+` sign should be encoded to `%2B`**)'
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
            example: active
        - in: query
          name: priority
          schema:
            type: integer
            enum: [0, 1, 2]
            example: 1
          description: 0 - Normal, 1 - Medium, 2 - Rush
        - in: query
          name: daysToResolve
          schema:
            type: number
            example: 1
        - in: query
          name: creator
          schema:
            type: number
            example: 1
        - in: query
          name: modifier
          schema:
            type: number
            example: 1
          description: Filter ticket types by the ticket modifier
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefTicketTypeInfo"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
  /helpdesk/types/{typeId}:
    get:
      tags:
        - 'Helpdesk'
      summary: Get details for a helpdesk ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - 'Helpdesk'
      summary: Update a helpdesk ticket type
      description: Update a helpdesk ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
      requestBody:
        description: Ticket data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TicketTypeRequest"
                - type: object
                  properties:
                    checklist:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/BriefTicketChecklistInfo'
                          - type: object
                            properties:
                              files:
                                type: array
                                items:
                                  type: string
                                  example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
                              new_files:
                                type: array
                                items:
                                  type: string
                                  example: "15dfd5e51a10145.87303877_ticket_checklist_file.pdf"
      responses:
        200:
          description: A JSON array of ticket types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
    delete:
      tags:
        - 'Helpdesk'
      summary: Delete a ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
      requestBody:
        description: Ticket data
        content:
          application/json:
            schema:
              type: object
              properties:
                newType:
                  type: integer
                  description: New ticket type Id
                  example: 1
      responses:
        200:
          description: Result message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ticket type was succesfuly deleted
                  movedTickets:
                    type: string
                    example: Count of moved tickets
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
  /helpdesk/types/{typeId}/download/{attachmentId}:
    get:
      tags:
        - "Helpdesk"
      summary: Download an attachment from a ticket type
      parameters:
        - in: path
          name: typeId
          schema:
            type: integer
          description: Ticket Type Id
          required: true
        - in: path
          name: attachmentId
          schema:
            type: integer
          description: Attachment Id
          required: true
      responses:
        200:
          description: Document
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: "Document"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"

  /helpdesk/users:
    get:
      tags:
        - 'Helpdesk'
      summary: Get a list of available users to notify and assign
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: role
          schema:
            type: string
            example: 1
          description: ID of user class
      responses:
        200:
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BriefUserInfoWithClass"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"


  /webforms:
    get:
      tags:
        - "Web Forms"
      summary: Get a list of web forms
      description: Get a list of web forms
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
            enum: [
              10,
              25,
              50,
              100,
              500,
              1000
            ]
          description: Count of records per page
        - in: query
          name: active
          schema:
            type: boolean
          description: Filter by active web forms
        - in: query
          name: group_id
          schema:
            type: boolean
          description: Filter by web form group id
          example: 2
      responses:
        200:
          description: Web Forms
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: array
                      items:
                        $ref: "#/components/schemas/WebForm"
                  links:
                    $ref: "#/components/schemas/Links"
                  meta:
                    $ref: "#/components/schemas/Meta"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        405:
          $ref: "#/components/responses/ValidationError"
        500:
          $ref: "#/components/responses/ServerError"
