-- Fix security policies, optimize RLS, and add missing indexes
-- Generated by Cursor assistant

BEGIN;

-- 1) Replace is_admin() with stable search_path and user_roles lookup
DROP FUNCTION IF EXISTS public.is_admin();
CREATE FUNCTION public.is_admin()
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
SET search_path = public, auth
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = (SELECT auth.uid())
      AND role = 'admin'
      AND revoked_at IS NULL
  );
$$;

-- 2) Add covering indexes for advisor warnings (unindexed foreign keys)
CREATE INDEX IF NOT EXISTS pipeline_runs_initiated_by_idx ON public.pipeline_runs(initiated_by);
CREATE INDEX IF NOT EXISTS sync_progress_sync_id_idx ON public.sync_progress(sync_id);
CREATE INDEX IF NOT EXISTS user_roles_granted_by_idx ON public.user_roles(granted_by);

-- 3) Tighten RLS policies across tables

-- agents
DROP POLICY IF EXISTS "Allow all for now" ON public.agents;
CREATE POLICY "Authenticated select agents"
ON public.agents FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Admins insert agents"
ON public.agents FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update agents"
ON public.agents FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete agents"
ON public.agents FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- api_credentials (admin-only)
DROP POLICY IF EXISTS "Allow all for now" ON public.api_credentials;
CREATE POLICY "Admins manage api_credentials"
ON public.api_credentials FOR ALL
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));

-- merchants
DROP POLICY IF EXISTS "Allow all for now" ON public.merchants;
CREATE POLICY "Authenticated select merchants"
ON public.merchants FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Admins insert merchants"
ON public.merchants FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update merchants"
ON public.merchants FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete merchants"
ON public.merchants FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- residuals (auth read, admin modify)
DROP POLICY IF EXISTS "Allow all for now" ON public.residuals;
CREATE POLICY "Authenticated select residuals"
ON public.residuals FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Admins insert residuals"
ON public.residuals FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update residuals"
ON public.residuals FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete residuals"
ON public.residuals FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- sync_jobs
DROP POLICY IF EXISTS "Allow all for now" ON public.sync_jobs;
CREATE POLICY "Authenticated select sync_jobs"
ON public.sync_jobs FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Admins insert sync_jobs"
ON public.sync_jobs FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update sync_jobs"
ON public.sync_jobs FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete sync_jobs"
ON public.sync_jobs FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- sync_progress
DROP POLICY IF EXISTS "Allow all for now" ON public.sync_progress;
CREATE POLICY "Authenticated select sync_progress"
ON public.sync_progress FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Admins insert sync_progress"
ON public.sync_progress FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update sync_progress"
ON public.sync_progress FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete sync_progress"
ON public.sync_progress FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- user_roles (admin-only)
DROP POLICY IF EXISTS "Allow all for now" ON public.user_roles;
CREATE POLICY "Admins manage user_roles"
ON public.user_roles FOR ALL
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));

-- merchant_processing_volumes: remove duplicates, add role-scoped policies
DROP POLICY IF EXISTS "Allow admins to manage merchant_processing_volumes" ON public.merchant_processing_volumes;
DROP POLICY IF EXISTS "Allow authenticated users to select from merchant_processing_vo" ON public.merchant_processing_volumes;
CREATE POLICY "Authenticated select merchant_processing_volumes"
ON public.merchant_processing_volumes FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Admins insert merchant_processing_volumes"
ON public.merchant_processing_volumes FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update merchant_processing_volumes"
ON public.merchant_processing_volumes FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete merchant_processing_volumes"
ON public.merchant_processing_volumes FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- ingestion_logs (admin-only)
DROP POLICY IF EXISTS "Allow admins to access ingestion_logs" ON public.ingestion_logs;
CREATE POLICY "Admins select ingestion_logs"
ON public.ingestion_logs FOR SELECT
TO authenticated
USING ((SELECT public.is_admin()));
CREATE POLICY "Admins insert ingestion_logs"
ON public.ingestion_logs FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins update ingestion_logs"
ON public.ingestion_logs FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins delete ingestion_logs"
ON public.ingestion_logs FOR DELETE
TO authenticated
USING ((SELECT public.is_admin()));

-- merchant_metrics: normalize policies, role-scoped and no per-row helpers
DROP POLICY IF EXISTS "Allow authenticated insert on merchant_metrics" ON public.merchant_metrics;
DROP POLICY IF EXISTS "Allow authenticated select on merchant_metrics" ON public.merchant_metrics;
CREATE POLICY "Authenticated insert merchant_metrics"
ON public.merchant_metrics FOR INSERT
TO authenticated
WITH CHECK (true);
CREATE POLICY "Authenticated select merchant_metrics"
ON public.merchant_metrics FOR SELECT
TO authenticated
USING (true);

-- residual_payouts: normalize to one per action and role-scoped
DROP POLICY IF EXISTS "Allow authenticated users to delete from residual_payouts" ON public.residual_payouts;
DROP POLICY IF EXISTS "Allow authenticated users to insert into residual_payouts" ON public.residual_payouts;
DROP POLICY IF EXISTS "Allow authenticated users to select from residual_payouts" ON public.residual_payouts;
DROP POLICY IF EXISTS "Allow authenticated users to update residual_payouts" ON public.residual_payouts;
CREATE POLICY "Authenticated select residual_payouts"
ON public.residual_payouts FOR SELECT
TO authenticated
USING (true);
CREATE POLICY "Authenticated insert residual_payouts"
ON public.residual_payouts FOR INSERT
TO authenticated
WITH CHECK (true);
CREATE POLICY "Authenticated update residual_payouts"
ON public.residual_payouts FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);
CREATE POLICY "Authenticated delete residual_payouts"
ON public.residual_payouts FOR DELETE
TO authenticated
USING (true);

-- pipeline_runs: use is_admin and scope to authenticated
DROP POLICY IF EXISTS "Admins can create pipeline runs" ON public.pipeline_runs;
DROP POLICY IF EXISTS "Admins can see all pipeline runs" ON public.pipeline_runs;
DROP POLICY IF EXISTS "Admins can update pipeline runs" ON public.pipeline_runs;
CREATE POLICY "Admins insert pipeline_runs"
ON public.pipeline_runs FOR INSERT
TO authenticated
WITH CHECK ((SELECT public.is_admin()));
CREATE POLICY "Admins select pipeline_runs"
ON public.pipeline_runs FOR SELECT
TO authenticated
USING ((SELECT public.is_admin()));
CREATE POLICY "Admins update pipeline_runs"
ON public.pipeline_runs FOR UPDATE
TO authenticated
USING ((SELECT public.is_admin()))
WITH CHECK ((SELECT public.is_admin()));

COMMIT;


